
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 10 00 20 f1 1f 00 08 93 42 00 08 c5 1f 00 08     ... .....B......
 8000010:	c5 1f 00 08 c5 1f 00 08 c5 1f 00 08 00 00 00 00     ................
	...
 800002c:	59 19 00 08 c5 1f 00 08 00 00 00 00 05 19 00 08     Y...............
 800003c:	cd 2d 00 08                                         .-..

08000040 <_irq_vector_table>:
 8000040:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000050:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000060:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000070:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000080:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000090:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 80000a0:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 80000b0:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 80000c0:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 80000d0:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 80000e0:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 80000f0:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000100:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000110:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000120:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000130:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000140:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000150:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000160:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000170:	09 1a 00 08 09 1a 00 08 09 1a 00 08 09 1a 00 08     ................
 8000180:	09 1a 00 08 09 1a 00 08 09 1a 00 08                 ............

Disassembly of section text:

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b80c 	b.w	80001c0 <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f808 	bl	80001c4 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__aeabi_idiv0>:
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop

080001c4 <__udivmoddi4>:
 80001c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c8:	4686      	mov	lr, r0
 80001ca:	468c      	mov	ip, r1
 80001cc:	4608      	mov	r0, r1
 80001ce:	9e08      	ldr	r6, [sp, #32]
 80001d0:	4615      	mov	r5, r2
 80001d2:	4674      	mov	r4, lr
 80001d4:	4619      	mov	r1, r3
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	f040 80c2 	bne.w	8000360 <__udivmoddi4+0x19c>
 80001dc:	4285      	cmp	r5, r0
 80001de:	fab2 f282 	clz	r2, r2
 80001e2:	d945      	bls.n	8000270 <__udivmoddi4+0xac>
 80001e4:	b14a      	cbz	r2, 80001fa <__udivmoddi4+0x36>
 80001e6:	f1c2 0320 	rsb	r3, r2, #32
 80001ea:	fa00 fc02 	lsl.w	ip, r0, r2
 80001ee:	fa2e f303 	lsr.w	r3, lr, r3
 80001f2:	4095      	lsls	r5, r2
 80001f4:	ea43 0c0c 	orr.w	ip, r3, ip
 80001f8:	4094      	lsls	r4, r2
 80001fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001fe:	b2a8      	uxth	r0, r5
 8000200:	fbbc f8fe 	udiv	r8, ip, lr
 8000204:	0c23      	lsrs	r3, r4, #16
 8000206:	fb0e cc18 	mls	ip, lr, r8, ip
 800020a:	fb08 f900 	mul.w	r9, r8, r0
 800020e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000212:	4599      	cmp	r9, r3
 8000214:	d928      	bls.n	8000268 <__udivmoddi4+0xa4>
 8000216:	18eb      	adds	r3, r5, r3
 8000218:	f108 37ff 	add.w	r7, r8, #4294967295
 800021c:	d204      	bcs.n	8000228 <__udivmoddi4+0x64>
 800021e:	4599      	cmp	r9, r3
 8000220:	d902      	bls.n	8000228 <__udivmoddi4+0x64>
 8000222:	f1a8 0702 	sub.w	r7, r8, #2
 8000226:	442b      	add	r3, r5
 8000228:	eba3 0309 	sub.w	r3, r3, r9
 800022c:	b2a4      	uxth	r4, r4
 800022e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000232:	fb0e 331c 	mls	r3, lr, ip, r3
 8000236:	fb0c f000 	mul.w	r0, ip, r0
 800023a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800023e:	42a0      	cmp	r0, r4
 8000240:	d914      	bls.n	800026c <__udivmoddi4+0xa8>
 8000242:	192c      	adds	r4, r5, r4
 8000244:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000248:	d204      	bcs.n	8000254 <__udivmoddi4+0x90>
 800024a:	42a0      	cmp	r0, r4
 800024c:	d902      	bls.n	8000254 <__udivmoddi4+0x90>
 800024e:	f1ac 0302 	sub.w	r3, ip, #2
 8000252:	442c      	add	r4, r5
 8000254:	1a24      	subs	r4, r4, r0
 8000256:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa0>
 800025c:	40d4      	lsrs	r4, r2
 800025e:	2300      	movs	r3, #0
 8000260:	6034      	str	r4, [r6, #0]
 8000262:	6073      	str	r3, [r6, #4]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	4647      	mov	r7, r8
 800026a:	e7dd      	b.n	8000228 <__udivmoddi4+0x64>
 800026c:	4663      	mov	r3, ip
 800026e:	e7f1      	b.n	8000254 <__udivmoddi4+0x90>
 8000270:	bb92      	cbnz	r2, 80002d8 <__udivmoddi4+0x114>
 8000272:	1b43      	subs	r3, r0, r5
 8000274:	2101      	movs	r1, #1
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	b2af      	uxth	r7, r5
 800027c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000280:	0c20      	lsrs	r0, r4, #16
 8000282:	fb0e 331c 	mls	r3, lr, ip, r3
 8000286:	fb0c f807 	mul.w	r8, ip, r7
 800028a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800028e:	4598      	cmp	r8, r3
 8000290:	d962      	bls.n	8000358 <__udivmoddi4+0x194>
 8000292:	18eb      	adds	r3, r5, r3
 8000294:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000298:	d204      	bcs.n	80002a4 <__udivmoddi4+0xe0>
 800029a:	4598      	cmp	r8, r3
 800029c:	d902      	bls.n	80002a4 <__udivmoddi4+0xe0>
 800029e:	f1ac 0002 	sub.w	r0, ip, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	eba3 0308 	sub.w	r3, r3, r8
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ae:	fb0e 331c 	mls	r3, lr, ip, r3
 80002b2:	fb0c f707 	mul.w	r7, ip, r7
 80002b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ba:	42a7      	cmp	r7, r4
 80002bc:	d94e      	bls.n	800035c <__udivmoddi4+0x198>
 80002be:	192c      	adds	r4, r5, r4
 80002c0:	f10c 33ff 	add.w	r3, ip, #4294967295
 80002c4:	d204      	bcs.n	80002d0 <__udivmoddi4+0x10c>
 80002c6:	42a7      	cmp	r7, r4
 80002c8:	d902      	bls.n	80002d0 <__udivmoddi4+0x10c>
 80002ca:	f1ac 0302 	sub.w	r3, ip, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	1be4      	subs	r4, r4, r7
 80002d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002d6:	e7c0      	b.n	800025a <__udivmoddi4+0x96>
 80002d8:	f1c2 0320 	rsb	r3, r2, #32
 80002dc:	fa20 f103 	lsr.w	r1, r0, r3
 80002e0:	4095      	lsls	r5, r2
 80002e2:	4090      	lsls	r0, r2
 80002e4:	fa2e f303 	lsr.w	r3, lr, r3
 80002e8:	4303      	orrs	r3, r0
 80002ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002ee:	b2af      	uxth	r7, r5
 80002f0:	fbb1 fcfe 	udiv	ip, r1, lr
 80002f4:	fb0e 101c 	mls	r0, lr, ip, r1
 80002f8:	0c19      	lsrs	r1, r3, #16
 80002fa:	fb0c f807 	mul.w	r8, ip, r7
 80002fe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000302:	4588      	cmp	r8, r1
 8000304:	fa04 f402 	lsl.w	r4, r4, r2
 8000308:	d922      	bls.n	8000350 <__udivmoddi4+0x18c>
 800030a:	1869      	adds	r1, r5, r1
 800030c:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000310:	d204      	bcs.n	800031c <__udivmoddi4+0x158>
 8000312:	4588      	cmp	r8, r1
 8000314:	d902      	bls.n	800031c <__udivmoddi4+0x158>
 8000316:	f1ac 0002 	sub.w	r0, ip, #2
 800031a:	4429      	add	r1, r5
 800031c:	eba1 0108 	sub.w	r1, r1, r8
 8000320:	b29b      	uxth	r3, r3
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	fb0e 111c 	mls	r1, lr, ip, r1
 800032a:	fb0c f707 	mul.w	r7, ip, r7
 800032e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000332:	429f      	cmp	r7, r3
 8000334:	d90e      	bls.n	8000354 <__udivmoddi4+0x190>
 8000336:	18eb      	adds	r3, r5, r3
 8000338:	f10c 31ff 	add.w	r1, ip, #4294967295
 800033c:	d204      	bcs.n	8000348 <__udivmoddi4+0x184>
 800033e:	429f      	cmp	r7, r3
 8000340:	d902      	bls.n	8000348 <__udivmoddi4+0x184>
 8000342:	f1ac 0102 	sub.w	r1, ip, #2
 8000346:	442b      	add	r3, r5
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800034e:	e792      	b.n	8000276 <__udivmoddi4+0xb2>
 8000350:	4660      	mov	r0, ip
 8000352:	e7e3      	b.n	800031c <__udivmoddi4+0x158>
 8000354:	4661      	mov	r1, ip
 8000356:	e7f7      	b.n	8000348 <__udivmoddi4+0x184>
 8000358:	4660      	mov	r0, ip
 800035a:	e7a3      	b.n	80002a4 <__udivmoddi4+0xe0>
 800035c:	4663      	mov	r3, ip
 800035e:	e7b7      	b.n	80002d0 <__udivmoddi4+0x10c>
 8000360:	4283      	cmp	r3, r0
 8000362:	d906      	bls.n	8000372 <__udivmoddi4+0x1ae>
 8000364:	b916      	cbnz	r6, 800036c <__udivmoddi4+0x1a8>
 8000366:	2100      	movs	r1, #0
 8000368:	4608      	mov	r0, r1
 800036a:	e77b      	b.n	8000264 <__udivmoddi4+0xa0>
 800036c:	e9c6 e000 	strd	lr, r0, [r6]
 8000370:	e7f9      	b.n	8000366 <__udivmoddi4+0x1a2>
 8000372:	fab3 f783 	clz	r7, r3
 8000376:	b98f      	cbnz	r7, 800039c <__udivmoddi4+0x1d8>
 8000378:	4283      	cmp	r3, r0
 800037a:	d301      	bcc.n	8000380 <__udivmoddi4+0x1bc>
 800037c:	4572      	cmp	r2, lr
 800037e:	d808      	bhi.n	8000392 <__udivmoddi4+0x1ce>
 8000380:	ebbe 0402 	subs.w	r4, lr, r2
 8000384:	eb60 0303 	sbc.w	r3, r0, r3
 8000388:	2001      	movs	r0, #1
 800038a:	469c      	mov	ip, r3
 800038c:	b91e      	cbnz	r6, 8000396 <__udivmoddi4+0x1d2>
 800038e:	2100      	movs	r1, #0
 8000390:	e768      	b.n	8000264 <__udivmoddi4+0xa0>
 8000392:	4638      	mov	r0, r7
 8000394:	e7fa      	b.n	800038c <__udivmoddi4+0x1c8>
 8000396:	e9c6 4c00 	strd	r4, ip, [r6]
 800039a:	e7f8      	b.n	800038e <__udivmoddi4+0x1ca>
 800039c:	f1c7 0c20 	rsb	ip, r7, #32
 80003a0:	40bb      	lsls	r3, r7
 80003a2:	fa22 f40c 	lsr.w	r4, r2, ip
 80003a6:	431c      	orrs	r4, r3
 80003a8:	fa2e f10c 	lsr.w	r1, lr, ip
 80003ac:	fa20 f30c 	lsr.w	r3, r0, ip
 80003b0:	40b8      	lsls	r0, r7
 80003b2:	4301      	orrs	r1, r0
 80003b4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003b8:	fa0e f507 	lsl.w	r5, lr, r7
 80003bc:	fbb3 f8f9 	udiv	r8, r3, r9
 80003c0:	fa1f fe84 	uxth.w	lr, r4
 80003c4:	fb09 3018 	mls	r0, r9, r8, r3
 80003c8:	0c0b      	lsrs	r3, r1, #16
 80003ca:	fb08 fa0e 	mul.w	sl, r8, lr
 80003ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003d2:	459a      	cmp	sl, r3
 80003d4:	fa02 f207 	lsl.w	r2, r2, r7
 80003d8:	d940      	bls.n	800045c <__udivmoddi4+0x298>
 80003da:	18e3      	adds	r3, r4, r3
 80003dc:	f108 30ff 	add.w	r0, r8, #4294967295
 80003e0:	d204      	bcs.n	80003ec <__udivmoddi4+0x228>
 80003e2:	459a      	cmp	sl, r3
 80003e4:	d902      	bls.n	80003ec <__udivmoddi4+0x228>
 80003e6:	f1a8 0002 	sub.w	r0, r8, #2
 80003ea:	4423      	add	r3, r4
 80003ec:	eba3 030a 	sub.w	r3, r3, sl
 80003f0:	b289      	uxth	r1, r1
 80003f2:	fbb3 f8f9 	udiv	r8, r3, r9
 80003f6:	fb09 3318 	mls	r3, r9, r8, r3
 80003fa:	fb08 fe0e 	mul.w	lr, r8, lr
 80003fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000402:	458e      	cmp	lr, r1
 8000404:	d92c      	bls.n	8000460 <__udivmoddi4+0x29c>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f108 33ff 	add.w	r3, r8, #4294967295
 800040c:	d204      	bcs.n	8000418 <__udivmoddi4+0x254>
 800040e:	458e      	cmp	lr, r1
 8000410:	d902      	bls.n	8000418 <__udivmoddi4+0x254>
 8000412:	f1a8 0302 	sub.w	r3, r8, #2
 8000416:	4421      	add	r1, r4
 8000418:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041c:	fba0 9802 	umull	r9, r8, r0, r2
 8000420:	eba1 010e 	sub.w	r1, r1, lr
 8000424:	4541      	cmp	r1, r8
 8000426:	46ce      	mov	lr, r9
 8000428:	4643      	mov	r3, r8
 800042a:	d302      	bcc.n	8000432 <__udivmoddi4+0x26e>
 800042c:	d106      	bne.n	800043c <__udivmoddi4+0x278>
 800042e:	454d      	cmp	r5, r9
 8000430:	d204      	bcs.n	800043c <__udivmoddi4+0x278>
 8000432:	ebb9 0e02 	subs.w	lr, r9, r2
 8000436:	eb68 0304 	sbc.w	r3, r8, r4
 800043a:	3801      	subs	r0, #1
 800043c:	2e00      	cmp	r6, #0
 800043e:	d0a6      	beq.n	800038e <__udivmoddi4+0x1ca>
 8000440:	ebb5 020e 	subs.w	r2, r5, lr
 8000444:	eb61 0103 	sbc.w	r1, r1, r3
 8000448:	fa01 fc0c 	lsl.w	ip, r1, ip
 800044c:	fa22 f307 	lsr.w	r3, r2, r7
 8000450:	ea4c 0303 	orr.w	r3, ip, r3
 8000454:	40f9      	lsrs	r1, r7
 8000456:	e9c6 3100 	strd	r3, r1, [r6]
 800045a:	e798      	b.n	800038e <__udivmoddi4+0x1ca>
 800045c:	4640      	mov	r0, r8
 800045e:	e7c5      	b.n	80003ec <__udivmoddi4+0x228>
 8000460:	4643      	mov	r3, r8
 8000462:	e7d9      	b.n	8000418 <__udivmoddi4+0x254>
 8000464:	0000      	movs	r0, r0
	...

08000468 <pwm_set>:
 * @retval -ENOTSUP If requested period or pulse cycles are not supported.
 * @retval -errno Other negative errno code on failure.
 */
static inline int pwm_set(const struct device *dev, uint32_t channel,
			  uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
 8000468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800046c:	b087      	sub	sp, #28
 800046e:	4605      	mov	r5, r0
 8000470:	9103      	str	r1, [sp, #12]
 8000472:	4617      	mov	r7, r2
 8000474:	461e      	mov	r6, r3
	return api->get_cycles_per_sec(dev, channel, cycles);
 8000476:	6883      	ldr	r3, [r0, #8]
 8000478:	aa04      	add	r2, sp, #16
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	4798      	blx	r3
	uint64_t pulse_cycles;
	uint64_t period_cycles;
	uint64_t cycles_per_sec;

	err = pwm_get_cycles_per_sec(dev, channel, &cycles_per_sec);
	if (err < 0) {
 800047e:	2800      	cmp	r0, #0
 8000480:	db31      	blt.n	80004e6 <pwm_set+0x7e>
		return err;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 8000482:	e9dd 4a04 	ldrd	r4, sl, [sp, #16]
 8000486:	fba7 b304 	umull	fp, r3, r7, r4
 800048a:	fb07 370a 	mla	r7, r7, sl, r3
 800048e:	4658      	mov	r0, fp
 8000490:	a319      	add	r3, pc, #100	; (adr r3, 80004f8 <pwm_set+0x90>)
 8000492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000496:	4639      	mov	r1, r7
 8000498:	f7ff fe7a 	bl	8000190 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
 800049c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8000500 <pwm_set+0x98>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
 80004a0:	9002      	str	r0, [sp, #8]
	if (period_cycles > UINT32_MAX) {
 80004a2:	f04f 39ff 	mov.w	r9, #4294967295
 80004a6:	45d9      	cmp	r9, fp
 80004a8:	eb78 0307 	sbcs.w	r3, r8, r7
 80004ac:	d31e      	bcc.n	80004ec <pwm_set+0x84>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 80004ae:	fba6 b404 	umull	fp, r4, r6, r4
 80004b2:	fb06 440a 	mla	r4, r6, sl, r4
 80004b6:	a310      	add	r3, pc, #64	; (adr r3, 80004f8 <pwm_set+0x90>)
 80004b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004bc:	4621      	mov	r1, r4
 80004be:	4658      	mov	r0, fp
 80004c0:	f7ff fe66 	bl	8000190 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
 80004c4:	45d9      	cmp	r9, fp
 80004c6:	eb78 0404 	sbcs.w	r4, r8, r4
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
 80004ca:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
 80004cc:	d30e      	bcc.n	80004ec <pwm_set+0x84>
	if (pulse > period) {
 80004ce:	9902      	ldr	r1, [sp, #8]
	const struct pwm_driver_api *api =
 80004d0:	68aa      	ldr	r2, [r5, #8]
	if (pulse > period) {
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d30d      	bcc.n	80004f2 <pwm_set+0x8a>
	return api->set_cycles(dev, channel, period, pulse, flags);
 80004d6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80004da:	9100      	str	r1, [sp, #0]
 80004dc:	6814      	ldr	r4, [r2, #0]
 80004de:	4628      	mov	r0, r5
 80004e0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80004e4:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_set_cycles(dev, channel, (uint32_t)period_cycles,
			      (uint32_t)pulse_cycles, flags);
}
 80004e6:	b007      	add	sp, #28
 80004e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
 80004ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80004f0:	e7f9      	b.n	80004e6 <pwm_set+0x7e>
		return -EINVAL;
 80004f2:	f06f 0015 	mvn.w	r0, #21
 80004f6:	e7f6      	b.n	80004e6 <pwm_set+0x7e>
 80004f8:	3b9aca00 	.word	0x3b9aca00
 80004fc:	00000000 	.word	0x00000000
 8000500:	3b9ac9ff 	.word	0x3b9ac9ff

08000504 <main>:

#define MIN_PERIOD PWM_SEC(1U) / 128U
#define MAX_PERIOD PWM_SEC(1U)

void main(void)
{
 8000504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8000508:	4c2a      	ldr	r4, [pc, #168]	; (80005b4 <main+0xb0>)
 800050a:	4620      	mov	r0, r4
 800050c:	f004 f9d1 	bl	80048b2 <z_device_is_ready>
	uint32_t period;
	uint8_t dir = 0U;
	int ret;


	if (!device_is_ready(pwm_led0.dev)) {
 8000510:	b930      	cbnz	r0, 8000520 <main+0x1c>
		printk("Error: PWM device %s is not ready\n",
 8000512:	6821      	ldr	r1, [r4, #0]
 8000514:	4828      	ldr	r0, [pc, #160]	; (80005b8 <main+0xb4>)
			dir = 1U;
		}

		k_sleep(K_SECONDS(4U));
	}
}
 8000516:	b003      	add	sp, #12
 8000518:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			printk("Error %d: failed to set pulse width\n", ret);
 800051c:	f003 bdb0 	b.w	8004080 <printk>
	printk("Calibrating for channel %d...\n", pwm_led0.channel);
 8000520:	4826      	ldr	r0, [pc, #152]	; (80005bc <main+0xb8>)
	max_period = MAX_PERIOD;
 8000522:	4e27      	ldr	r6, [pc, #156]	; (80005c0 <main+0xbc>)
	printk("Calibrating for channel %d...\n", pwm_led0.channel);
 8000524:	2102      	movs	r1, #2
 8000526:	f003 fdab 	bl	8004080 <printk>
	while (pwm_set_dt(&pwm_led0, max_period, max_period / 2U)) {
 800052a:	2706      	movs	r7, #6
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
 800052c:	f04f 0900 	mov.w	r9, #0
 8000530:	46b0      	mov	r8, r6
 8000532:	0876      	lsrs	r6, r6, #1
 8000534:	f8cd 9000 	str.w	r9, [sp]
 8000538:	4633      	mov	r3, r6
 800053a:	4642      	mov	r2, r8
 800053c:	2102      	movs	r1, #2
 800053e:	4620      	mov	r0, r4
 8000540:	f7ff ff92 	bl	8000468 <pwm_set>
 8000544:	4605      	mov	r5, r0
 8000546:	b9c0      	cbnz	r0, 800057a <main+0x76>
	printk("Done calibrating; maximum/minimum periods %u/%lu usec\n",
 8000548:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <main+0xc0>)
 800054a:	481f      	ldr	r0, [pc, #124]	; (80005c8 <main+0xc4>)
 800054c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80005b4 <main+0xb0>
		} else if (period < MIN_PERIOD) {
 8000550:	f8df a078 	ldr.w	sl, [pc, #120]	; 80005cc <main+0xc8>
			period = MIN_PERIOD * 2U;
 8000554:	f8df b078 	ldr.w	fp, [pc, #120]	; 80005d0 <main+0xcc>
	printk("Done calibrating; maximum/minimum periods %u/%lu usec\n",
 8000558:	4641      	mov	r1, r8
 800055a:	f003 fd91 	bl	8004080 <printk>
 800055e:	4647      	mov	r7, r8
 8000560:	2300      	movs	r3, #0
		ret = pwm_set_dt(&pwm_led0, period, period / 2U);
 8000562:	087c      	lsrs	r4, r7, #1
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2102      	movs	r1, #2
 8000568:	4623      	mov	r3, r4
 800056a:	463a      	mov	r2, r7
 800056c:	4648      	mov	r0, r9
 800056e:	f7ff ff7b 	bl	8000468 <pwm_set>
		if (ret) {
 8000572:	4601      	mov	r1, r0
 8000574:	b130      	cbz	r0, 8000584 <main+0x80>
			printk("Error %d: failed to set pulse width\n", ret);
 8000576:	4817      	ldr	r0, [pc, #92]	; (80005d4 <main+0xd0>)
 8000578:	e7cd      	b.n	8000516 <main+0x12>
		if (max_period < (4U * MIN_PERIOD)) {
 800057a:	3f01      	subs	r7, #1
 800057c:	d1d8      	bne.n	8000530 <main+0x2c>
			printk("Error: PWM device "
 800057e:	4916      	ldr	r1, [pc, #88]	; (80005d8 <main+0xd4>)
 8000580:	4816      	ldr	r0, [pc, #88]	; (80005dc <main+0xd8>)
 8000582:	e7c8      	b.n	8000516 <main+0x12>
		period = dir ? (period * 2U) : (period / 2U);
 8000584:	b16d      	cbz	r5, 80005a2 <main+0x9e>
		if (period > max_period) {
 8000586:	ebb8 0f47 	cmp.w	r8, r7, lsl #1
		period = dir ? (period * 2U) : (period / 2U);
 800058a:	ea4f 0447 	mov.w	r4, r7, lsl #1
		if (period > max_period) {
 800058e:	d201      	bcs.n	8000594 <main+0x90>
	while (pwm_set_dt(&pwm_led0, max_period, max_period / 2U)) {
 8000590:	4634      	mov	r4, r6
			dir = 0U;
 8000592:	4605      	mov	r5, r0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000594:	f649 4040 	movw	r0, #40000	; 0x9c40
 8000598:	2100      	movs	r1, #0
 800059a:	f003 fb5d 	bl	8003c58 <z_impl_k_sleep>
	while (1) {
 800059e:	4627      	mov	r7, r4
 80005a0:	e7de      	b.n	8000560 <main+0x5c>
		if (period > max_period) {
 80005a2:	4544      	cmp	r4, r8
 80005a4:	d804      	bhi.n	80005b0 <main+0xac>
		} else if (period < MIN_PERIOD) {
 80005a6:	4554      	cmp	r4, sl
 80005a8:	d8f4      	bhi.n	8000594 <main+0x90>
			dir = 1U;
 80005aa:	2501      	movs	r5, #1
			period = MIN_PERIOD * 2U;
 80005ac:	465c      	mov	r4, fp
 80005ae:	e7f1      	b.n	8000594 <main+0x90>
	while (pwm_set_dt(&pwm_led0, max_period, max_period / 2U)) {
 80005b0:	4634      	mov	r4, r6
 80005b2:	e7ef      	b.n	8000594 <main+0x90>
 80005b4:	08004b58 	.word	0x08004b58
 80005b8:	080050fa 	.word	0x080050fa
 80005bc:	0800511d 	.word	0x0800511d
 80005c0:	3b9aca00 	.word	0x3b9aca00
 80005c4:	00773594 	.word	0x00773594
 80005c8:	08005176 	.word	0x08005176
 80005cc:	00773593 	.word	0x00773593
 80005d0:	00ee6b28 	.word	0x00ee6b28
 80005d4:	080051ad 	.word	0x080051ad
 80005d8:	01dcd650 	.word	0x01dcd650
 80005dc:	0800513c 	.word	0x0800513c

080005e0 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 80005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e4:	b08d      	sub	sp, #52	; 0x34
 80005e6:	469b      	mov	fp, r3
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 80005e8:	f002 0304 	and.w	r3, r2, #4
 80005ec:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 80005ee:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80005f2:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 80005f4:	0784      	lsls	r4, r0, #30
 80005f6:	9d16      	ldr	r5, [sp, #88]	; 0x58
{
 80005f8:	9203      	str	r2, [sp, #12]
 80005fa:	4606      	mov	r6, r0
 80005fc:	460f      	mov	r7, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 80005fe:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
 8000600:	f040 819d 	bne.w	800093e <cbvprintf_package+0x35e>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
 8000604:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8000606:	b130      	cbz	r0, 8000616 <cbvprintf_package+0x36>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 8000608:	2907      	cmp	r1, #7
 800060a:	d809      	bhi.n	8000620 <cbvprintf_package+0x40>
		return -ENOSPC;
 800060c:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 8000610:	b00d      	add	sp, #52	; 0x34
 8000612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 8000616:	f001 0707 	and.w	r7, r1, #7
 800061a:	1d3c      	adds	r4, r7, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 800061c:	f1c7 0708 	rsb	r7, r7, #8
	s = fmt--;
 8000620:	f10b 33ff 	add.w	r3, fp, #4294967295
 8000624:	9301      	str	r3, [sp, #4]
	align = VA_STACK_ALIGN(char *);
 8000626:	f04f 0804 	mov.w	r8, #4
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 800062a:	2300      	movs	r3, #0
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 800062c:	9304      	str	r3, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 800062e:	461a      	mov	r2, r3
	bool parsing = false;
 8000630:	469a      	mov	sl, r3
	size = sizeof(char *);
 8000632:	46c1      	mov	r9, r8
			if (buf0 != NULL) {
 8000634:	b10e      	cbz	r6, 800063a <cbvprintf_package+0x5a>
				*(const char **)buf = s;
 8000636:	f8c4 b000 	str.w	fp, [r4]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 800063a:	9805      	ldr	r0, [sp, #20]
 800063c:	2800      	cmp	r0, #0
 800063e:	f300 80e3 	bgt.w	8000808 <cbvprintf_package+0x228>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8000642:	4892      	ldr	r0, [pc, #584]	; (800088c <cbvprintf_package+0x2ac>)
 8000644:	4583      	cmp	fp, r0
 8000646:	d303      	bcc.n	8000650 <cbvprintf_package+0x70>
 8000648:	4891      	ldr	r0, [pc, #580]	; (8000890 <cbvprintf_package+0x2b0>)
 800064a:	4583      	cmp	fp, r0
 800064c:	f0c0 80dc 	bcc.w	8000808 <cbvprintf_package+0x228>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 8000650:	9903      	ldr	r1, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8000652:	eba4 0e06 	sub.w	lr, r4, r6
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 8000656:	0789      	lsls	r1, r1, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8000658:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 800065c:	f100 80f9 	bmi.w	8000852 <cbvprintf_package+0x272>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 8000660:	2a0f      	cmp	r2, #15
 8000662:	f200 80af 	bhi.w	80007c4 <cbvprintf_package+0x1e4>
				if (buf0 != NULL) {
 8000666:	2e00      	cmp	r6, #0
 8000668:	f000 80f9 	beq.w	800085e <cbvprintf_package+0x27e>
					str_ptr_pos[s_idx] = s_ptr_idx;
 800066c:	b2c0      	uxtb	r0, r0
 800066e:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8000672:	eb0d 0c01 	add.w	ip, sp, r1
 8000676:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_rw_cnt++;
 800067a:	9804      	ldr	r0, [sp, #16]
 800067c:	3001      	adds	r0, #1
 800067e:	9004      	str	r0, [sp, #16]
 8000680:	e0df      	b.n	8000842 <cbvprintf_package+0x262>
			switch (*fmt) {
 8000682:	287a      	cmp	r0, #122	; 0x7a
 8000684:	d832      	bhi.n	80006ec <cbvprintf_package+0x10c>
 8000686:	284b      	cmp	r0, #75	; 0x4b
 8000688:	d80b      	bhi.n	80006a2 <cbvprintf_package+0xc2>
 800068a:	2847      	cmp	r0, #71	; 0x47
 800068c:	d82e      	bhi.n	80006ec <cbvprintf_package+0x10c>
 800068e:	2829      	cmp	r0, #41	; 0x29
 8000690:	d82f      	bhi.n	80006f2 <cbvprintf_package+0x112>
 8000692:	2820      	cmp	r0, #32
 8000694:	d07d      	beq.n	8000792 <cbvprintf_package+0x1b2>
 8000696:	3823      	subs	r0, #35	; 0x23
 8000698:	f1d0 0a00 	rsbs	sl, r0, #0
 800069c:	eb4a 0a00 	adc.w	sl, sl, r0
 80006a0:	e077      	b.n	8000792 <cbvprintf_package+0x1b2>
 80006a2:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
 80006a6:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 80006aa:	d81f      	bhi.n	80006ec <cbvprintf_package+0x10c>
 80006ac:	e8df f00c 	tbb	[pc, ip]
 80006b0:	1e1e1e71 	.word	0x1e1e1e71
 80006b4:	1e1e1e1e 	.word	0x1e1e1e1e
 80006b8:	1e1e1e1e 	.word	0x1e1e1e1e
 80006bc:	1e1e1e4b 	.word	0x1e1e1e4b
 80006c0:	1e1e1e1e 	.word	0x1e1e1e1e
 80006c4:	4b1e5b1e 	.word	0x4b1e5b1e
 80006c8:	5b5b5b4b 	.word	0x5b5b5b4b
 80006cc:	1e6e4b71 	.word	0x1e6e4b71
 80006d0:	4b181e71 	.word	0x4b181e71
 80006d4:	821e1e18 	.word	0x821e1e18
 80006d8:	1e1e4b7f 	.word	0x1e1e4b7f
 80006dc:	1e4b      	.short	0x1e4b
 80006de:	7f          	.byte	0x7f
 80006df:	00          	.byte	0x00
 80006e0:	2000      	movs	r0, #0
 80006e2:	f04f 0a00 	mov.w	sl, #0
				align = VA_STACK_ALIGN(void *);
 80006e6:	f04f 0804 	mov.w	r8, #4
 80006ea:	e03a      	b.n	8000762 <cbvprintf_package+0x182>
				parsing = false;
 80006ec:	f04f 0a00 	mov.w	sl, #0
 80006f0:	e04f      	b.n	8000792 <cbvprintf_package+0x1b2>
			switch (*fmt) {
 80006f2:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
 80006f6:	fa5f fc8c 	uxtb.w	ip, ip
 80006fa:	2101      	movs	r1, #1
 80006fc:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000700:	ea1c 0f0e 	tst.w	ip, lr
 8000704:	d145      	bne.n	8000792 <cbvprintf_package+0x1b2>
 8000706:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
 800070a:	d12c      	bne.n	8000766 <cbvprintf_package+0x186>
 800070c:	ea1c 0a01 	ands.w	sl, ip, r1
 8000710:	d03f      	beq.n	8000792 <cbvprintf_package+0x1b2>
		buf = (void *) ROUND_UP(buf, align);
 8000712:	3c01      	subs	r4, #1
 8000714:	4444      	add	r4, r8
 8000716:	f1c8 0c00 	rsb	ip, r8, #0
 800071a:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 800071e:	2e00      	cmp	r6, #0
 8000720:	d05e      	beq.n	80007e0 <cbvprintf_package+0x200>
 8000722:	eba9 0c06 	sub.w	ip, r9, r6
 8000726:	44a4      	add	ip, r4
 8000728:	45bc      	cmp	ip, r7
 800072a:	f63f af6f 	bhi.w	800060c <cbvprintf_package+0x2c>
		if (is_str_arg) {
 800072e:	2800      	cmp	r0, #0
 8000730:	d164      	bne.n	80007fc <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
 8000732:	f1b9 0f04 	cmp.w	r9, #4
 8000736:	d142      	bne.n	80007be <cbvprintf_package+0x1de>
			int v = va_arg(ap, int);
 8000738:	f855 0b04 	ldr.w	r0, [r5], #4
				*(int *)buf = v;
 800073c:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
 800073e:	3404      	adds	r4, #4
 8000740:	f04f 0904 	mov.w	r9, #4
 8000744:	e025      	b.n	8000792 <cbvprintf_package+0x1b2>
				if (fmt[-1] == 'l') {
 8000746:	9901      	ldr	r1, [sp, #4]
 8000748:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800074c:	286c      	cmp	r0, #108	; 0x6c
 800074e:	d133      	bne.n	80007b8 <cbvprintf_package+0x1d8>
					if (fmt[-2] == 'l') {
 8000750:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8000754:	286c      	cmp	r0, #108	; 0x6c
 8000756:	f04f 0000 	mov.w	r0, #0
				parsing = false;
 800075a:	4682      	mov	sl, r0
					if (fmt[-2] == 'l') {
 800075c:	d1c3      	bne.n	80006e6 <cbvprintf_package+0x106>
						align = VA_STACK_ALIGN(long long);
 800075e:	f04f 0808 	mov.w	r8, #8
				size = sizeof(void *);
 8000762:	46c1      	mov	r9, r8
 8000764:	e7d5      	b.n	8000712 <cbvprintf_package+0x132>
					v.ld = va_arg(ap, long double);
 8000766:	3507      	adds	r5, #7
 8000768:	f025 0507 	bic.w	r5, r5, #7
				buf = (void *) ROUND_UP(buf, align);
 800076c:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
 800076e:	e8f5 8902 	ldrd	r8, r9, [r5], #8
				buf = (void *) ROUND_UP(buf, align);
 8000772:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
 8000776:	b136      	cbz	r6, 8000786 <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
 8000778:	9806      	ldr	r0, [sp, #24]
 800077a:	4420      	add	r0, r4
 800077c:	42b8      	cmp	r0, r7
 800077e:	f63f af45 	bhi.w	800060c <cbvprintf_package+0x2c>
						*(long double *)buf = v.ld;
 8000782:	e9c4 8900 	strd	r8, r9, [r4]
				buf += size;
 8000786:	3408      	adds	r4, #8
				parsing = false;
 8000788:	f04f 0a00 	mov.w	sl, #0
				align = VA_STACK_ALIGN(intmax_t);
 800078c:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
 8000790:	46c1      	mov	r9, r8
			if (*++fmt == '\0') {
 8000792:	9901      	ldr	r1, [sp, #4]
 8000794:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8000798:	9101      	str	r1, [sp, #4]
 800079a:	2800      	cmp	r0, #0
 800079c:	d06d      	beq.n	800087a <cbvprintf_package+0x29a>
			if (!parsing) {
 800079e:	f1ba 0f00 	cmp.w	sl, #0
 80007a2:	f47f af6e 	bne.w	8000682 <cbvprintf_package+0xa2>
				if (*fmt == '%') {
 80007a6:	2825      	cmp	r0, #37	; 0x25
 80007a8:	d1f3      	bne.n	8000792 <cbvprintf_package+0x1b2>
					parsing = true;
 80007aa:	f04f 0a01 	mov.w	sl, #1
				align = VA_STACK_ALIGN(size_t);
 80007ae:	f04f 0804 	mov.w	r8, #4
 80007b2:	e7ed      	b.n	8000790 <cbvprintf_package+0x1b0>
			switch (*fmt) {
 80007b4:	4650      	mov	r0, sl
 80007b6:	e794      	b.n	80006e2 <cbvprintf_package+0x102>
 80007b8:	2000      	movs	r0, #0
				parsing = false;
 80007ba:	4682      	mov	sl, r0
 80007bc:	e7a9      	b.n	8000712 <cbvprintf_package+0x132>
		} else if (size == sizeof(long long)) {
 80007be:	f1b9 0f08 	cmp.w	r9, #8
 80007c2:	d002      	beq.n	80007ca <cbvprintf_package+0x1ea>
					return -EINVAL;
 80007c4:	f06f 0015 	mvn.w	r0, #21
 80007c8:	e722      	b.n	8000610 <cbvprintf_package+0x30>
			long long v = va_arg(ap, long long);
 80007ca:	3507      	adds	r5, #7
 80007cc:	f025 0507 	bic.w	r5, r5, #7
 80007d0:	e8f5 0102 	ldrd	r0, r1, [r5], #8
					*(long long *)buf = v;
 80007d4:	e9c4 0100 	strd	r0, r1, [r4]
			buf += sizeof(long long);
 80007d8:	3408      	adds	r4, #8
 80007da:	f04f 0908 	mov.w	r9, #8
 80007de:	e7d8      	b.n	8000792 <cbvprintf_package+0x1b2>
		if (is_str_arg) {
 80007e0:	b960      	cbnz	r0, 80007fc <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
 80007e2:	f1b9 0f04 	cmp.w	r9, #4
 80007e6:	d101      	bne.n	80007ec <cbvprintf_package+0x20c>
			int v = va_arg(ap, int);
 80007e8:	3504      	adds	r5, #4
			if (buf0 != NULL) {
 80007ea:	e7a8      	b.n	800073e <cbvprintf_package+0x15e>
		} else if (size == sizeof(long long)) {
 80007ec:	f1b9 0f08 	cmp.w	r9, #8
 80007f0:	d1e8      	bne.n	80007c4 <cbvprintf_package+0x1e4>
			long long v = va_arg(ap, long long);
 80007f2:	3507      	adds	r5, #7
 80007f4:	f025 0507 	bic.w	r5, r5, #7
 80007f8:	3508      	adds	r5, #8
			if (buf0 != NULL) {
 80007fa:	e7ed      	b.n	80007d8 <cbvprintf_package+0x1f8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80007fc:	9905      	ldr	r1, [sp, #20]
			s = va_arg(ap, char *);
 80007fe:	f855 bb04 	ldr.w	fp, [r5], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8000802:	3901      	subs	r1, #1
 8000804:	9105      	str	r1, [sp, #20]
			s = va_arg(ap, char *);
 8000806:	e715      	b.n	8000634 <cbvprintf_package+0x54>
			if (is_ro && !do_ro) {
 8000808:	9903      	ldr	r1, [sp, #12]
 800080a:	0789      	lsls	r1, r1, #30
 800080c:	d51a      	bpl.n	8000844 <cbvprintf_package+0x264>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 800080e:	eba4 0e06 	sub.w	lr, r4, r6
 8000812:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8000816:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 800081a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 800081e:	d2d1      	bcs.n	80007c4 <cbvprintf_package+0x1e4>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 8000820:	2a0f      	cmp	r2, #15
 8000822:	d8cf      	bhi.n	80007c4 <cbvprintf_package+0x1e4>
				if (buf0 != NULL) {
 8000824:	b1c6      	cbz	r6, 8000858 <cbvprintf_package+0x278>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8000826:	b2c0      	uxtb	r0, r0
					if (is_ro) {
 8000828:	f1bc 0f00 	cmp.w	ip, #0
 800082c:	f43f af1f 	beq.w	800066e <cbvprintf_package+0x8e>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 8000830:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8000834:	eb0d 0c01 	add.w	ip, sp, r1
 8000838:	f060 007f 	orn	r0, r0, #127	; 0x7f
 800083c:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_ro_cnt++;
 8000840:	3301      	adds	r3, #1
				s_idx++;
 8000842:	3201      	adds	r2, #1
					if (BUF_OFFSET + size > len) {
 8000844:	f1c6 0108 	rsb	r1, r6, #8
			buf += sizeof(char *);
 8000848:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
 800084a:	9106      	str	r1, [sp, #24]
			switch (*fmt) {
 800084c:	f64f 7eda 	movw	lr, #65498	; 0xffda
 8000850:	e79f      	b.n	8000792 <cbvprintf_package+0x1b2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8000852:	f04f 0c00 	mov.w	ip, #0
 8000856:	e7e0      	b.n	800081a <cbvprintf_package+0x23a>
				} else if (is_ro || rws_pos_en) {
 8000858:	f1bc 0f00 	cmp.w	ip, #0
 800085c:	d101      	bne.n	8000862 <cbvprintf_package+0x282>
 800085e:	9802      	ldr	r0, [sp, #8]
 8000860:	b108      	cbz	r0, 8000866 <cbvprintf_package+0x286>
					len += 1;
 8000862:	3701      	adds	r7, #1
 8000864:	e7ed      	b.n	8000842 <cbvprintf_package+0x262>
					len += strlen(s) + 1 + 1;
 8000866:	4658      	mov	r0, fp
 8000868:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800086c:	f003 fd38 	bl	80042e0 <strlen>
 8000870:	3702      	adds	r7, #2
 8000872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000876:	4407      	add	r7, r0
 8000878:	e7e3      	b.n	8000842 <cbvprintf_package+0x262>
	if (BUF_OFFSET / sizeof(int) > 255) {
 800087a:	1ba1      	subs	r1, r4, r6
 800087c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8000880:	d2a0      	bcs.n	80007c4 <cbvprintf_package+0x1e4>
	if (buf0 == NULL) {
 8000882:	b93e      	cbnz	r6, 8000894 <cbvprintf_package+0x2b4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 8000884:	f1a7 0008 	sub.w	r0, r7, #8
 8000888:	4408      	add	r0, r1
 800088a:	e6c1      	b.n	8000610 <cbvprintf_package+0x30>
 800088c:	08004a48 	.word	0x08004a48
 8000890:	08005a08 	.word	0x08005a08
	*(char **)buf0 = NULL;
 8000894:	6030      	str	r0, [r6, #0]
	if (rws_pos_en) {
 8000896:	9802      	ldr	r0, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
 8000898:	0889      	lsrs	r1, r1, #2
 800089a:	7031      	strb	r1, [r6, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 800089c:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (rws_pos_en) {
 80008a0:	b188      	cbz	r0, 80008c6 <cbvprintf_package+0x2e6>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 80008a2:	70f1      	strb	r1, [r6, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
 80008a4:	70b3      	strb	r3, [r6, #2]
	if (s_ro_cnt) {
 80008a6:	b12b      	cbz	r3, 80008b4 <cbvprintf_package+0x2d4>
 80008a8:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
 80008aa:	2500      	movs	r5, #0
			if (BUF_OFFSET + 1 > len) {
 80008ac:	f1c6 0c01 	rsb	ip, r6, #1
		for (i = 0; i < s_idx; i++) {
 80008b0:	42aa      	cmp	r2, r5
 80008b2:	d10a      	bne.n	80008ca <cbvprintf_package+0x2ea>
 80008b4:	ad08      	add	r5, sp, #32
 80008b6:	eb05 0802 	add.w	r8, r5, r2
		if (BUF_OFFSET + 1 + size > len) {
 80008ba:	f1c6 0901 	rsb	r9, r6, #1
	for (i = 0; i < s_idx; i++) {
 80008be:	45a8      	cmp	r8, r5
 80008c0:	d113      	bne.n	80008ea <cbvprintf_package+0x30a>
	return BUF_OFFSET;
 80008c2:	1ba0      	subs	r0, r4, r6
 80008c4:	e6a4      	b.n	8000610 <cbvprintf_package+0x30>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
 80008c6:	7071      	strb	r1, [r6, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
 80008c8:	e7ec      	b.n	80008a4 <cbvprintf_package+0x2c4>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 80008ca:	f810 1b01 	ldrb.w	r1, [r0], #1
 80008ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80008d2:	d008      	beq.n	80008e6 <cbvprintf_package+0x306>
			if (BUF_OFFSET + 1 > len) {
 80008d4:	eb04 0e0c 	add.w	lr, r4, ip
 80008d8:	45be      	cmp	lr, r7
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 80008da:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
 80008de:	f63f ae95 	bhi.w	800060c <cbvprintf_package+0x2c>
			*buf++ = pos;
 80008e2:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
 80008e6:	3501      	adds	r5, #1
 80008e8:	e7e2      	b.n	80008b0 <cbvprintf_package+0x2d0>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 80008ea:	b11b      	cbz	r3, 80008f4 <cbvprintf_package+0x314>
 80008ec:	f995 2000 	ldrsb.w	r2, [r5]
 80008f0:	2a00      	cmp	r2, #0
 80008f2:	db1f      	blt.n	8000934 <cbvprintf_package+0x354>
		if (rws_pos_en) {
 80008f4:	9a02      	ldr	r2, [sp, #8]
 80008f6:	b9fa      	cbnz	r2, 8000938 <cbvprintf_package+0x358>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 80008f8:	782a      	ldrb	r2, [r5, #0]
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	f856 b022 	ldr.w	fp, [r6, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8000900:	9b02      	ldr	r3, [sp, #8]
 8000902:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
			size = strlen(s) + 1;
 8000906:	4658      	mov	r0, fp
 8000908:	f003 fcea 	bl	80042e0 <strlen>
 800090c:	9b01      	ldr	r3, [sp, #4]
 800090e:	f100 0a01 	add.w	sl, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
 8000912:	eb04 0209 	add.w	r2, r4, r9
 8000916:	4452      	add	r2, sl
 8000918:	42ba      	cmp	r2, r7
 800091a:	9301      	str	r3, [sp, #4]
 800091c:	f63f ae76 	bhi.w	800060c <cbvprintf_package+0x2c>
		*buf++ = str_ptr_pos[i];
 8000920:	782a      	ldrb	r2, [r5, #0]
 8000922:	f804 2b01 	strb.w	r2, [r4], #1
		memcpy(buf, s, size);
 8000926:	4659      	mov	r1, fp
 8000928:	4620      	mov	r0, r4
 800092a:	4652      	mov	r2, sl
 800092c:	f003 fce8 	bl	8004300 <memcpy>
		buf += size;
 8000930:	9b01      	ldr	r3, [sp, #4]
 8000932:	4454      	add	r4, sl
	for (i = 0; i < s_idx; i++) {
 8000934:	3501      	adds	r5, #1
 8000936:	e7c2      	b.n	80008be <cbvprintf_package+0x2de>
			size = 0;
 8000938:	f04f 0a00 	mov.w	sl, #0
 800093c:	e7e9      	b.n	8000912 <cbvprintf_package+0x332>
		return -EFAULT;
 800093e:	f06f 000d 	mvn.w	r0, #13
 8000942:	e665      	b.n	8000610 <cbvprintf_package+0x30>

08000944 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <__printk_hook_install+0x8>)
 8000946:	6018      	str	r0, [r3, #0]
}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000000 	.word	0x20000000

08000950 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000954:	4681      	mov	r9, r0
 8000956:	b095      	sub	sp, #84	; 0x54
 8000958:	468b      	mov	fp, r1
 800095a:	4617      	mov	r7, r2
 800095c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800095e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000960:	7838      	ldrb	r0, [r7, #0]
 8000962:	b908      	cbnz	r0, 8000968 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000964:	4628      	mov	r0, r5
 8000966:	e358      	b.n	800101a <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
 8000968:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 800096a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 800096c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 800096e:	d006      	beq.n	800097e <z_cbvprintf_impl+0x2e>
			OUTC('%');
 8000970:	4659      	mov	r1, fp
 8000972:	47c8      	blx	r9
 8000974:	2800      	cmp	r0, #0
 8000976:	f2c0 8350 	blt.w	800101a <z_cbvprintf_impl+0x6ca>
 800097a:	3501      	adds	r5, #1
		if (bps == NULL) {
 800097c:	e1fb      	b.n	8000d76 <z_cbvprintf_impl+0x426>
		} state = {
 800097e:	2218      	movs	r2, #24
 8000980:	2100      	movs	r1, #0
 8000982:	a80e      	add	r0, sp, #56	; 0x38
 8000984:	f003 fcc7 	bl	8004316 <memset>
	if (*sp == '%') {
 8000988:	787b      	ldrb	r3, [r7, #1]
 800098a:	2b25      	cmp	r3, #37	; 0x25
 800098c:	d07d      	beq.n	8000a8a <z_cbvprintf_impl+0x13a>
 800098e:	2300      	movs	r3, #0
 8000990:	1c78      	adds	r0, r7, #1
 8000992:	4698      	mov	r8, r3
 8000994:	469e      	mov	lr, r3
 8000996:	469c      	mov	ip, r3
 8000998:	461e      	mov	r6, r3
 800099a:	4601      	mov	r1, r0
		switch (*sp) {
 800099c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009a0:	2a2b      	cmp	r2, #43	; 0x2b
 80009a2:	f000 80a1 	beq.w	8000ae8 <z_cbvprintf_impl+0x198>
 80009a6:	f200 8098 	bhi.w	8000ada <z_cbvprintf_impl+0x18a>
 80009aa:	2a20      	cmp	r2, #32
 80009ac:	f000 809f 	beq.w	8000aee <z_cbvprintf_impl+0x19e>
 80009b0:	2a23      	cmp	r2, #35	; 0x23
 80009b2:	f000 809f 	beq.w	8000af4 <z_cbvprintf_impl+0x1a4>
 80009b6:	b12b      	cbz	r3, 80009c4 <z_cbvprintf_impl+0x74>
 80009b8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80009bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80009c4:	f1b8 0f00 	cmp.w	r8, #0
 80009c8:	d005      	beq.n	80009d6 <z_cbvprintf_impl+0x86>
 80009ca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80009d6:	f1be 0f00 	cmp.w	lr, #0
 80009da:	d005      	beq.n	80009e8 <z_cbvprintf_impl+0x98>
 80009dc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80009e8:	f1bc 0f00 	cmp.w	ip, #0
 80009ec:	d005      	beq.n	80009fa <z_cbvprintf_impl+0xaa>
 80009ee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80009fa:	b12e      	cbz	r6, 8000a08 <z_cbvprintf_impl+0xb8>
 80009fc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 8000a08:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000a0c:	f003 0044 	and.w	r0, r3, #68	; 0x44
 8000a10:	2844      	cmp	r0, #68	; 0x44
 8000a12:	d103      	bne.n	8000a1c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 8000a14:	f36f 1386 	bfc	r3, #6, #1
 8000a18:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 8000a1c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000a20:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 8000a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a26:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 8000a2a:	d17f      	bne.n	8000b2c <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 8000a2c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000a30:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
 8000a34:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8000a36:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	2a2e      	cmp	r2, #46	; 0x2e
 8000a3e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000a42:	bf0c      	ite	eq
 8000a44:	2101      	moveq	r1, #1
 8000a46:	2100      	movne	r1, #0
 8000a48:	f361 0241 	bfi	r2, r1, #1, #1
 8000a4c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 8000a50:	d178      	bne.n	8000b44 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 8000a52:	785a      	ldrb	r2, [r3, #1]
 8000a54:	2a2a      	cmp	r2, #42	; 0x2a
 8000a56:	d06e      	beq.n	8000b36 <z_cbvprintf_impl+0x1e6>
	++sp;
 8000a58:	3301      	adds	r3, #1
	size_t val = 0;
 8000a5a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000a5c:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000a60:	4619      	mov	r1, r3
 8000a62:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000a66:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000a6a:	2e09      	cmp	r6, #9
 8000a6c:	f240 8095 	bls.w	8000b9a <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000a70:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 8000a74:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 8000a76:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8000a7a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 8000a7e:	460a      	mov	r2, r1
 8000a80:	f360 0241 	bfi	r2, r0, #1, #1
 8000a84:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000a88:	e05c      	b.n	8000b44 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 8000a8a:	1cba      	adds	r2, r7, #2
 8000a8c:	9203      	str	r2, [sp, #12]
 8000a8e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 8000a92:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000a96:	07da      	lsls	r2, r3, #31
 8000a98:	f140 812e 	bpl.w	8000cf8 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 8000a9c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000aa0:	f1b8 0f00 	cmp.w	r8, #0
 8000aa4:	da07      	bge.n	8000ab6 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 8000aa6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000aaa:	f042 0204 	orr.w	r2, r2, #4
 8000aae:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
 8000ab2:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 8000ab6:	075e      	lsls	r6, r3, #29
 8000ab8:	f140 8127 	bpl.w	8000d0a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 8000abc:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 8000ac0:	f1ba 0f00 	cmp.w	sl, #0
 8000ac4:	f280 8126 	bge.w	8000d14 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 8000ac8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000acc:	f36f 0341 	bfc	r3, #1, #1
 8000ad0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 8000ad4:	f04f 3aff 	mov.w	sl, #4294967295
 8000ad8:	e11c      	b.n	8000d14 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 8000ada:	2a2d      	cmp	r2, #45	; 0x2d
 8000adc:	d00d      	beq.n	8000afa <z_cbvprintf_impl+0x1aa>
 8000ade:	2a30      	cmp	r2, #48	; 0x30
 8000ae0:	f47f af69 	bne.w	80009b6 <z_cbvprintf_impl+0x66>
 8000ae4:	2301      	movs	r3, #1
	} while (loop);
 8000ae6:	e758      	b.n	800099a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 8000ae8:	f04f 0c01 	mov.w	ip, #1
 8000aec:	e755      	b.n	800099a <z_cbvprintf_impl+0x4a>
 8000aee:	f04f 0e01 	mov.w	lr, #1
 8000af2:	e752      	b.n	800099a <z_cbvprintf_impl+0x4a>
 8000af4:	f04f 0801 	mov.w	r8, #1
 8000af8:	e74f      	b.n	800099a <z_cbvprintf_impl+0x4a>
 8000afa:	2601      	movs	r6, #1
 8000afc:	e74d      	b.n	800099a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 8000afe:	fb0e 6202 	mla	r2, lr, r2, r6
 8000b02:	3a30      	subs	r2, #48	; 0x30
 8000b04:	4603      	mov	r3, r0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f810 6b01 	ldrb.w	r6, [r0], #1
 8000b0c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000b10:	f1bc 0f09 	cmp.w	ip, #9
 8000b14:	d9f3      	bls.n	8000afe <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d08f      	beq.n	8000a3a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 8000b1a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 8000b1e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 8000b20:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8000b22:	f362 0141 	bfi	r1, r2, #1, #1
 8000b26:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 8000b2a:	e786      	b.n	8000a3a <z_cbvprintf_impl+0xea>
 8000b2c:	460b      	mov	r3, r1
	size_t val = 0;
 8000b2e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000b30:	f04f 0e0a 	mov.w	lr, #10
 8000b34:	e7e7      	b.n	8000b06 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 8000b36:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000b3a:	f042 0204 	orr.w	r2, r2, #4
 8000b3e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 8000b42:	3302      	adds	r3, #2
	switch (*sp) {
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	2a6c      	cmp	r2, #108	; 0x6c
 8000b48:	d047      	beq.n	8000bda <z_cbvprintf_impl+0x28a>
 8000b4a:	d82b      	bhi.n	8000ba4 <z_cbvprintf_impl+0x254>
 8000b4c:	2a68      	cmp	r2, #104	; 0x68
 8000b4e:	d031      	beq.n	8000bb4 <z_cbvprintf_impl+0x264>
 8000b50:	2a6a      	cmp	r2, #106	; 0x6a
 8000b52:	d04b      	beq.n	8000bec <z_cbvprintf_impl+0x29c>
 8000b54:	2a4c      	cmp	r2, #76	; 0x4c
 8000b56:	d051      	beq.n	8000bfc <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000b5e:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
 8000b60:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000b62:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
 8000b66:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
 8000b6a:	f200 80be 	bhi.w	8000cea <z_cbvprintf_impl+0x39a>
 8000b6e:	2b6d      	cmp	r3, #109	; 0x6d
 8000b70:	d851      	bhi.n	8000c16 <z_cbvprintf_impl+0x2c6>
 8000b72:	2b69      	cmp	r3, #105	; 0x69
 8000b74:	f200 80b9 	bhi.w	8000cea <z_cbvprintf_impl+0x39a>
 8000b78:	2b57      	cmp	r3, #87	; 0x57
 8000b7a:	d867      	bhi.n	8000c4c <z_cbvprintf_impl+0x2fc>
 8000b7c:	2b41      	cmp	r3, #65	; 0x41
 8000b7e:	d003      	beq.n	8000b88 <z_cbvprintf_impl+0x238>
 8000b80:	3b45      	subs	r3, #69	; 0x45
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	f200 80b1 	bhi.w	8000cea <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 8000b88:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	f362 0302 	bfi	r3, r2, #0, #3
 8000b92:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 8000b96:	2301      	movs	r3, #1
			break;
 8000b98:	e073      	b.n	8000c82 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 8000b9a:	fb0c 0202 	mla	r2, ip, r2, r0
 8000b9e:	3a30      	subs	r2, #48	; 0x30
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	e75d      	b.n	8000a60 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 8000ba4:	2a74      	cmp	r2, #116	; 0x74
 8000ba6:	d025      	beq.n	8000bf4 <z_cbvprintf_impl+0x2a4>
 8000ba8:	2a7a      	cmp	r2, #122	; 0x7a
 8000baa:	d1d5      	bne.n	8000b58 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 8000bac:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000bb0:	2106      	movs	r1, #6
 8000bb2:	e00c      	b.n	8000bce <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 8000bb4:	785a      	ldrb	r2, [r3, #1]
 8000bb6:	2a68      	cmp	r2, #104	; 0x68
 8000bb8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000bbc:	d106      	bne.n	8000bcc <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 8000bbe:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000bc0:	f361 02c6 	bfi	r2, r1, #3, #4
 8000bc4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 8000bc8:	3302      	adds	r3, #2
 8000bca:	e7c5      	b.n	8000b58 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 8000bcc:	2102      	movs	r1, #2
 8000bce:	f361 02c6 	bfi	r2, r1, #3, #4
 8000bd2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	e7be      	b.n	8000b58 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 8000bda:	785a      	ldrb	r2, [r3, #1]
 8000bdc:	2a6c      	cmp	r2, #108	; 0x6c
 8000bde:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000be2:	d101      	bne.n	8000be8 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 8000be4:	2104      	movs	r1, #4
 8000be6:	e7eb      	b.n	8000bc0 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 8000be8:	2103      	movs	r1, #3
 8000bea:	e7f0      	b.n	8000bce <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 8000bec:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000bf0:	2105      	movs	r1, #5
 8000bf2:	e7ec      	b.n	8000bce <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 8000bf4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	e7e8      	b.n	8000bce <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 8000bfc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8000c00:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000c04:	f022 0202 	bic.w	r2, r2, #2
 8000c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c0c:	f042 0202 	orr.w	r2, r2, #2
 8000c10:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 8000c14:	e7df      	b.n	8000bd6 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 8000c16:	3b6e      	subs	r3, #110	; 0x6e
 8000c18:	b2d9      	uxtb	r1, r3
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	f240 4182 	movw	r1, #1154	; 0x482
 8000c22:	420b      	tst	r3, r1
 8000c24:	d137      	bne.n	8000c96 <z_cbvprintf_impl+0x346>
 8000c26:	f013 0f24 	tst.w	r3, #36	; 0x24
 8000c2a:	d151      	bne.n	8000cd0 <z_cbvprintf_impl+0x380>
 8000c2c:	07d8      	lsls	r0, r3, #31
 8000c2e:	d55c      	bpl.n	8000cea <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 8000c30:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000c34:	2103      	movs	r1, #3
 8000c36:	f361 0302 	bfi	r3, r1, #0, #3
 8000c3a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000c3e:	f002 0378 	and.w	r3, r2, #120	; 0x78
 8000c42:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8000c46:	424b      	negs	r3, r1
 8000c48:	414b      	adcs	r3, r1
 8000c4a:	e01a      	b.n	8000c82 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
 8000c4c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 8000c50:	b2c9      	uxtb	r1, r1
 8000c52:	2001      	movs	r0, #1
 8000c54:	fa00 f101 	lsl.w	r1, r0, r1
 8000c58:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 8000c5c:	d194      	bne.n	8000b88 <z_cbvprintf_impl+0x238>
 8000c5e:	f640 0601 	movw	r6, #2049	; 0x801
 8000c62:	4231      	tst	r1, r6
 8000c64:	d11d      	bne.n	8000ca2 <z_cbvprintf_impl+0x352>
 8000c66:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 8000c6a:	d03e      	beq.n	8000cea <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 8000c6c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000c70:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000c74:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000c78:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 8000c7a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000c7e:	d034      	beq.n	8000cea <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 8000c80:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 8000c82:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000c86:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	f363 0241 	bfi	r2, r3, #1, #1
 8000c90:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000c94:	e6fd      	b.n	8000a92 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 8000c96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	f361 0302 	bfi	r3, r1, #0, #3
 8000ca0:	e7e8      	b.n	8000c74 <z_cbvprintf_impl+0x324>
 8000ca2:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 8000ca6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000ca8:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000cac:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000cb0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000cb2:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 8000cb6:	bf02      	ittt	eq
 8000cb8:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 8000cbc:	f041 0101 	orreq.w	r1, r1, #1
 8000cc0:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 8000cc4:	2b63      	cmp	r3, #99	; 0x63
 8000cc6:	d1db      	bne.n	8000c80 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000cc8:	1e13      	subs	r3, r2, #0
 8000cca:	bf18      	it	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	e7d8      	b.n	8000c82 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 8000cd0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 8000cda:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000cde:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 8000ce2:	bf14      	ite	ne
 8000ce4:	2301      	movne	r3, #1
 8000ce6:	2300      	moveq	r3, #0
 8000ce8:	e7cb      	b.n	8000c82 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 8000cea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 8000cf6:	e7c3      	b.n	8000c80 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 8000cf8:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 8000cfc:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000cfe:	bfb4      	ite	lt
 8000d00:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
 8000d04:	f04f 38ff 	movge.w	r8, #4294967295
 8000d08:	e6d5      	b.n	8000ab6 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 8000d0a:	0798      	lsls	r0, r3, #30
 8000d0c:	f57f aee2 	bpl.w	8000ad4 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 8000d10:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
 8000d14:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
 8000d18:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000d1a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000d1e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
 8000d22:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000d26:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000d28:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000d2c:	d133      	bne.n	8000d96 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 8000d2e:	1ecb      	subs	r3, r1, #3
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d804      	bhi.n	8000d3e <z_cbvprintf_impl+0x3ee>
 8000d34:	e8df f003 	tbb	[pc, r3]
 8000d38:	21464621 	.word	0x21464621
 8000d3c:	21          	.byte	0x21
 8000d3d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8000d3e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 8000d40:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 8000d42:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000d46:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000d4a:	d11c      	bne.n	8000d86 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 8000d4c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 8000d50:	17da      	asrs	r2, r3, #31
 8000d52:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 8000d56:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 8000d58:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000d5c:	f013 0603 	ands.w	r6, r3, #3
 8000d60:	d050      	beq.n	8000e04 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 8000d62:	9b03      	ldr	r3, [sp, #12]
 8000d64:	463a      	mov	r2, r7
 8000d66:	4659      	mov	r1, fp
 8000d68:	4648      	mov	r0, r9
 8000d6a:	f003 f9e6 	bl	800413a <outs>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	f2c0 8153 	blt.w	800101a <z_cbvprintf_impl+0x6ca>
 8000d74:	4405      	add	r5, r0
			continue;
 8000d76:	9f03      	ldr	r7, [sp, #12]
 8000d78:	e5f2      	b.n	8000960 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000d7a:	f854 3b04 	ldr.w	r3, [r4], #4
 8000d7e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8000d80:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8000d84:	e7e8      	b.n	8000d58 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 8000d86:	2902      	cmp	r1, #2
 8000d88:	d1e5      	bne.n	8000d56 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	f343 33c0 	sbfx	r3, r3, #15, #1
 8000d90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000d94:	e7df      	b.n	8000d56 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d124      	bne.n	8000de4 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 8000d9a:	1ecb      	subs	r3, r1, #3
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d804      	bhi.n	8000daa <z_cbvprintf_impl+0x45a>
 8000da0:	e8df f003 	tbb	[pc, r3]
 8000da4:	18101018 	.word	0x18101018
 8000da8:	18          	.byte	0x18
 8000da9:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 8000daa:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 8000dac:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	d014      	beq.n	8000de0 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 8000db6:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8000db8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 8000dbc:	d1cc      	bne.n	8000d58 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 8000dbe:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8000dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8000dc2:	e7c9      	b.n	8000d58 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 8000dc4:	3407      	adds	r4, #7
 8000dc6:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8000dca:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000dce:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000dd2:	e7c1      	b.n	8000d58 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 8000dd4:	f854 3b04 	ldr.w	r3, [r4], #4
 8000dd8:	930e      	str	r3, [sp, #56]	; 0x38
 8000dda:	2300      	movs	r3, #0
 8000ddc:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 8000dde:	e7bb      	b.n	8000d58 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	e7cd      	b.n	8000d80 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d108      	bne.n	8000dfa <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 8000de8:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 8000dea:	f024 0407 	bic.w	r4, r4, #7
 8000dee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000df2:	3408      	adds	r4, #8
 8000df4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000df8:	e7ae      	b.n	8000d58 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d1ac      	bne.n	8000d58 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 8000dfe:	f854 3b04 	ldr.w	r3, [r4], #4
 8000e02:	e7dd      	b.n	8000dc0 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 8000e04:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000e08:	2878      	cmp	r0, #120	; 0x78
 8000e0a:	d8b4      	bhi.n	8000d76 <z_cbvprintf_impl+0x426>
 8000e0c:	2862      	cmp	r0, #98	; 0x62
 8000e0e:	d81c      	bhi.n	8000e4a <z_cbvprintf_impl+0x4fa>
 8000e10:	2825      	cmp	r0, #37	; 0x25
 8000e12:	f43f adad 	beq.w	8000970 <z_cbvprintf_impl+0x20>
 8000e16:	2858      	cmp	r0, #88	; 0x58
 8000e18:	d1ad      	bne.n	8000d76 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000e1a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8000e24:	ab08      	add	r3, sp, #32
 8000e26:	aa10      	add	r2, sp, #64	; 0x40
 8000e28:	f003 f941 	bl	80040ae <encode_uint>
			if (precision >= 0) {
 8000e2c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000e30:	4607      	mov	r7, r0
			if (precision >= 0) {
 8000e32:	f280 809a 	bge.w	8000f6a <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
 8000e36:	2f00      	cmp	r7, #0
 8000e38:	d09d      	beq.n	8000d76 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000e3a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000e3e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	f000 80c1 	beq.w	8000fc8 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
 8000e46:	3001      	adds	r0, #1
 8000e48:	e0be      	b.n	8000fc8 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
 8000e4a:	3863      	subs	r0, #99	; 0x63
 8000e4c:	2815      	cmp	r0, #21
 8000e4e:	d892      	bhi.n	8000d76 <z_cbvprintf_impl+0x426>
 8000e50:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <z_cbvprintf_impl+0x508>)
 8000e52:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000f2d 	.word	0x08000f2d
 8000e5c:	08000f3f 	.word	0x08000f3f
 8000e60:	08000d77 	.word	0x08000d77
 8000e64:	08000d77 	.word	0x08000d77
 8000e68:	08000d77 	.word	0x08000d77
 8000e6c:	08000d77 	.word	0x08000d77
 8000e70:	08000f3f 	.word	0x08000f3f
 8000e74:	08000d77 	.word	0x08000d77
 8000e78:	08000d77 	.word	0x08000d77
 8000e7c:	08000d77 	.word	0x08000d77
 8000e80:	08000d77 	.word	0x08000d77
 8000e84:	08000fcd 	.word	0x08000fcd
 8000e88:	08000f65 	.word	0x08000f65
 8000e8c:	08000f8b 	.word	0x08000f8b
 8000e90:	08000d77 	.word	0x08000d77
 8000e94:	08000d77 	.word	0x08000d77
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000d77 	.word	0x08000d77
 8000ea0:	08000f65 	.word	0x08000f65
 8000ea4:	08000d77 	.word	0x08000d77
 8000ea8:	08000d77 	.word	0x08000d77
 8000eac:	08000f65 	.word	0x08000f65
			if (precision >= 0) {
 8000eb0:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8000eb4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8000eb6:	db35      	blt.n	8000f24 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 8000eb8:	4651      	mov	r1, sl
 8000eba:	4638      	mov	r0, r7
 8000ebc:	f003 fa17 	bl	80042ee <strnlen>
			bpe = bps + len;
 8000ec0:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8000ec4:	2f00      	cmp	r7, #0
 8000ec6:	f43f af56 	beq.w	8000d76 <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000eca:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8000ecc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000ed0:	f013 0210 	ands.w	r2, r3, #16
 8000ed4:	9205      	str	r2, [sp, #20]
 8000ed6:	f000 8093 	beq.w	8001000 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
 8000eda:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000edc:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8000ede:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8000ee0:	bf48      	it	mi
 8000ee2:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8000ee4:	9204      	str	r2, [sp, #16]
 8000ee6:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 8000ee8:	bf48      	it	mi
 8000eea:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8000eec:	f1b8 0f00 	cmp.w	r8, #0
 8000ef0:	f340 80a0 	ble.w	8001034 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
 8000ef4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 8000ef8:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8000efc:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000f00:	0750      	lsls	r0, r2, #29
 8000f02:	9306      	str	r3, [sp, #24]
 8000f04:	f100 8096 	bmi.w	8001034 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
 8000f08:	0651      	lsls	r1, r2, #25
 8000f0a:	f140 8089 	bpl.w	8001020 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
 8000f0e:	b13e      	cbz	r6, 8000f20 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 8000f10:	4659      	mov	r1, fp
 8000f12:	4630      	mov	r0, r6
 8000f14:	47c8      	blx	r9
 8000f16:	2800      	cmp	r0, #0
 8000f18:	db7f      	blt.n	800101a <z_cbvprintf_impl+0x6ca>
 8000f1a:	9b06      	ldr	r3, [sp, #24]
 8000f1c:	3501      	adds	r5, #1
 8000f1e:	461e      	mov	r6, r3
					pad = '0';
 8000f20:	2230      	movs	r2, #48	; 0x30
 8000f22:	e07e      	b.n	8001022 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
 8000f24:	4638      	mov	r0, r7
 8000f26:	f003 f9db 	bl	80042e0 <strlen>
 8000f2a:	e7c9      	b.n	8000ec0 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f2e:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
 8000f32:	2600      	movs	r6, #0
			bps = buf;
 8000f34:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8000f36:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	e7c6      	b.n	8000ecc <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 8000f3e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8000f40:	bf5c      	itt	pl
 8000f42:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 8000f46:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
 8000f48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
 8000f4c:	bf48      	it	mi
 8000f4e:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f6bf af62 	bge.w	8000e1a <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8000f56:	4252      	negs	r2, r2
 8000f58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
 8000f60:	262d      	movs	r6, #45	; 0x2d
 8000f62:	e75a      	b.n	8000e1a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8000f64:	2600      	movs	r6, #0
 8000f66:	e758      	b.n	8000e1a <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 8000f68:	2600      	movs	r6, #0
				conv->flag_zero = false;
 8000f6a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8000f6e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000f72:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8000f74:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000f78:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8000f7a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 8000f7e:	f67f af5a 	bls.w	8000e36 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 8000f82:	ebaa 0303 	sub.w	r3, sl, r3
 8000f86:	9311      	str	r3, [sp, #68]	; 0x44
 8000f88:	e755      	b.n	8000e36 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 8000f8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f8c:	b390      	cbz	r0, 8000ff4 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000f8e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	aa10      	add	r2, sp, #64	; 0x40
 8000f96:	ab08      	add	r3, sp, #32
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f003 f888 	bl	80040ae <encode_uint>
				conv->altform_0c = true;
 8000f9e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8000fa2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000fa6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000faa:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
 8000fae:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000fb2:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8000fb4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000fb8:	dad6      	bge.n	8000f68 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	f43f aedb 	beq.w	8000d76 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000fc0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000fc4:	1a18      	subs	r0, r3, r0
		char sign = 0;
 8000fc6:	2600      	movs	r6, #0
 8000fc8:	469a      	mov	sl, r3
 8000fca:	e77f      	b.n	8000ecc <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 8000fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 8000fce:	2907      	cmp	r1, #7
 8000fd0:	f63f aed1 	bhi.w	8000d76 <z_cbvprintf_impl+0x426>
 8000fd4:	e8df f001 	tbb	[pc, r1]
 8000fd8:	0c06040c 	.word	0x0c06040c
 8000fdc:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8000fe0:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8000fe2:	e6c8      	b.n	8000d76 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 8000fe4:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 8000fe6:	e6c6      	b.n	8000d76 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 8000fe8:	17ea      	asrs	r2, r5, #31
 8000fea:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8000fee:	e6c2      	b.n	8000d76 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000ff0:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8000ff2:	e6c0      	b.n	8000d76 <z_cbvprintf_impl+0x426>
 8000ff4:	4f2e      	ldr	r7, [pc, #184]	; (80010b0 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 8000ff6:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000ff8:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 8000ffc:	2005      	movs	r0, #5
 8000ffe:	e765      	b.n	8000ecc <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 8001000:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8001002:	bf48      	it	mi
 8001004:	3001      	addmi	r0, #1
 8001006:	e769      	b.n	8000edc <z_cbvprintf_impl+0x58c>
 8001008:	9307      	str	r3, [sp, #28]
					OUTC(pad);
 800100a:	4610      	mov	r0, r2
 800100c:	9206      	str	r2, [sp, #24]
 800100e:	4659      	mov	r1, fp
 8001010:	47c8      	blx	r9
 8001012:	2800      	cmp	r0, #0
 8001014:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001018:	da04      	bge.n	8001024 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
 800101a:	b015      	add	sp, #84	; 0x54
 800101c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8001020:	2220      	movs	r2, #32
					pad = '0';
 8001022:	4643      	mov	r3, r8
				while (width-- > 0) {
 8001024:	4619      	mov	r1, r3
 8001026:	2900      	cmp	r1, #0
 8001028:	f103 33ff 	add.w	r3, r3, #4294967295
 800102c:	dcec      	bgt.n	8001008 <z_cbvprintf_impl+0x6b8>
 800102e:	4445      	add	r5, r8
 8001030:	1a6d      	subs	r5, r5, r1
 8001032:	4698      	mov	r8, r3
		if (sign != 0) {
 8001034:	b12e      	cbz	r6, 8001042 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
 8001036:	4659      	mov	r1, fp
 8001038:	4630      	mov	r0, r6
 800103a:	47c8      	blx	r9
 800103c:	2800      	cmp	r0, #0
 800103e:	dbec      	blt.n	800101a <z_cbvprintf_impl+0x6ca>
 8001040:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8001042:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8001046:	06da      	lsls	r2, r3, #27
 8001048:	d401      	bmi.n	800104e <z_cbvprintf_impl+0x6fe>
 800104a:	071b      	lsls	r3, r3, #28
 800104c:	d505      	bpl.n	800105a <z_cbvprintf_impl+0x70a>
				OUTC('0');
 800104e:	4659      	mov	r1, fp
 8001050:	2030      	movs	r0, #48	; 0x30
 8001052:	47c8      	blx	r9
 8001054:	2800      	cmp	r0, #0
 8001056:	dbe0      	blt.n	800101a <z_cbvprintf_impl+0x6ca>
 8001058:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 800105a:	9b05      	ldr	r3, [sp, #20]
 800105c:	b133      	cbz	r3, 800106c <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
 800105e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8001062:	4659      	mov	r1, fp
 8001064:	47c8      	blx	r9
 8001066:	2800      	cmp	r0, #0
 8001068:	dbd7      	blt.n	800101a <z_cbvprintf_impl+0x6ca>
 800106a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 800106c:	9e04      	ldr	r6, [sp, #16]
 800106e:	442e      	add	r6, r5
 8001070:	e005      	b.n	800107e <z_cbvprintf_impl+0x72e>
				OUTC('0');
 8001072:	4659      	mov	r1, fp
 8001074:	2030      	movs	r0, #48	; 0x30
 8001076:	47c8      	blx	r9
 8001078:	2800      	cmp	r0, #0
 800107a:	dbce      	blt.n	800101a <z_cbvprintf_impl+0x6ca>
 800107c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 800107e:	1b73      	subs	r3, r6, r5
 8001080:	2b00      	cmp	r3, #0
 8001082:	dcf6      	bgt.n	8001072 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
 8001084:	4653      	mov	r3, sl
 8001086:	463a      	mov	r2, r7
 8001088:	4659      	mov	r1, fp
 800108a:	4648      	mov	r0, r9
 800108c:	f003 f855 	bl	800413a <outs>
 8001090:	2800      	cmp	r0, #0
 8001092:	dbc2      	blt.n	800101a <z_cbvprintf_impl+0x6ca>
 8001094:	4405      	add	r5, r0
		while (width > 0) {
 8001096:	44a8      	add	r8, r5
 8001098:	eba8 0305 	sub.w	r3, r8, r5
 800109c:	2b00      	cmp	r3, #0
 800109e:	f77f ae6a 	ble.w	8000d76 <z_cbvprintf_impl+0x426>
			OUTC(' ');
 80010a2:	4659      	mov	r1, fp
 80010a4:	2020      	movs	r0, #32
 80010a6:	47c8      	blx	r9
 80010a8:	2800      	cmp	r0, #0
 80010aa:	dbb6      	blt.n	800101a <z_cbvprintf_impl+0x6ca>
 80010ac:	3501      	adds	r5, #1
			--width;
 80010ae:	e7f3      	b.n	8001098 <z_cbvprintf_impl+0x748>
 80010b0:	080051d2 	.word	0x080051d2

080010b4 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 80010b4:	f04f 0210 	mov.w	r2, #16
 80010b8:	f3ef 8311 	mrs	r3, BASEPRI
 80010bc:	f382 8812 	msr	BASEPRI_MAX, r2
 80010c0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80010c4:	f383 8811 	msr	BASEPRI, r3
 80010c8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <stm32l4_init+0x24>)
 80010ce:	4a03      	ldr	r2, [pc, #12]	; (80010dc <stm32l4_init+0x28>)
 80010d0:	601a      	str	r2, [r3, #0]

	return 0;
}
 80010d2:	2000      	movs	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000030 	.word	0x20000030
 80010dc:	003d0900 	.word	0x003d0900

080010e0 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
 80010e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <z_log_init.isra.0+0xd8>)
 80010e6:	f3bf 8f5b 	dmb	ish
 80010ea:	4682      	mov	sl, r0
 80010ec:	460f      	mov	r7, r1
 80010ee:	e853 5f00 	ldrex	r5, [r3]
 80010f2:	1c6a      	adds	r2, r5, #1
 80010f4:	e843 2100 	strex	r1, r2, [r3]
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d1f8      	bne.n	80010ee <z_log_init.isra.0+0xe>
 80010fc:	f3bf 8f5b 	dmb	ish
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
	int i;

	if (atomic_inc(&initialized) != 0) {
 8001100:	b97d      	cbnz	r5, 8001122 <z_log_init.isra.0+0x42>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8001102:	4c2e      	ldr	r4, [pc, #184]	; (80011bc <z_log_init.isra.0+0xdc>)
 8001104:	4e2e      	ldr	r6, [pc, #184]	; (80011c0 <z_log_init.isra.0+0xe0>)
 8001106:	1b36      	subs	r6, r6, r4
 8001108:	1136      	asrs	r6, r6, #4
		return 0;
	}

	/* Assign ids to backends. */
	for (i = 0; i < log_backend_count_get(); i++) {
 800110a:	46a9      	mov	r9, r5
 800110c:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
 800110e:	f04f 0b01 	mov.w	fp, #1
	for (i = 0; i < log_backend_count_get(); i++) {
 8001112:	45b1      	cmp	r9, r6
 8001114:	db08      	blt.n	8001128 <z_log_init.isra.0+0x48>
			}
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
 8001116:	f1ba 0f00 	cmp.w	sl, #0
 800111a:	d002      	beq.n	8001122 <z_log_init.isra.0+0x42>
		mask_cpy &= ~BIT(i);
 800111c:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
 8001120:	b9fd      	cbnz	r5, 8001162 <z_log_init.isra.0+0x82>
			}
		}
	}

	return mask;
}
 8001122:	b003      	add	sp, #12
 8001124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
 8001128:	7b23      	ldrb	r3, [r4, #12]
 800112a:	b173      	cbz	r3, 800114a <z_log_init.isra.0+0x6a>
	if (backend->api->init) {
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	b11a      	cbz	r2, 800113a <z_log_init.isra.0+0x5a>
		backend->api->init(backend);
 8001132:	4620      	mov	r0, r4
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	4790      	blx	r2
 8001138:	9b01      	ldr	r3, [sp, #4]
	if (backend->api->is_ready != NULL) {
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	b94b      	cbnz	r3, 8001152 <z_log_init.isra.0+0x72>
				log_backend_enable(backend,
 800113e:	6863      	ldr	r3, [r4, #4]
 8001140:	2204      	movs	r2, #4
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	4620      	mov	r0, r4
 8001146:	f000 f8c5 	bl	80012d4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 800114a:	f109 0901 	add.w	r9, r9, #1
 800114e:	3410      	adds	r4, #16
 8001150:	e7df      	b.n	8001112 <z_log_init.isra.0+0x32>
		return backend->api->is_ready(backend);
 8001152:	4620      	mov	r0, r4
 8001154:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
 8001156:	2800      	cmp	r0, #0
 8001158:	d0f1      	beq.n	800113e <z_log_init.isra.0+0x5e>
				mask |= BIT(i);
 800115a:	fa0b f309 	lsl.w	r3, fp, r9
 800115e:	431d      	orrs	r5, r3
 8001160:	e7f3      	b.n	800114a <z_log_init.isra.0+0x6a>
 8001162:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
 8001164:	fa95 f4a5 	rbit	r4, r5
 8001168:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
 800116c:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 8001170:	0126      	lsls	r6, r4, #4
 8001172:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
 8001176:	ea6f 0b03 	mvn.w	fp, r3
 800117a:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 800117e:	7b23      	ldrb	r3, [r4, #12]
 8001180:	b163      	cbz	r3, 800119c <z_log_init.isra.0+0xbc>
	if (backend->api->is_ready != NULL) {
 8001182:	f858 3006 	ldr.w	r3, [r8, r6]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	b98b      	cbnz	r3, 80011ae <z_log_init.isra.0+0xce>
					   backend->cb->ctx,
 800118a:	4446      	add	r6, r8
			log_backend_enable(backend,
 800118c:	2204      	movs	r2, #4
 800118e:	6873      	ldr	r3, [r6, #4]
 8001190:	4620      	mov	r0, r4
 8001192:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
 8001194:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
 8001198:	f000 f89c 	bl	80012d4 <log_backend_enable>
	while (mask_cpy) {
 800119c:	2d00      	cmp	r5, #0
 800119e:	d1e1      	bne.n	8001164 <z_log_init.isra.0+0x84>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
 80011a0:	b11f      	cbz	r7, 80011aa <z_log_init.isra.0+0xca>
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	2100      	movs	r1, #0
 80011a6:	f002 fd57 	bl	8003c58 <z_impl_k_sleep>
 80011aa:	464d      	mov	r5, r9
 80011ac:	e7b8      	b.n	8001120 <z_log_init.isra.0+0x40>
		return backend->api->is_ready(backend);
 80011ae:	4620      	mov	r0, r4
 80011b0:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d1f2      	bne.n	800119c <z_log_init.isra.0+0xbc>
 80011b6:	e7e8      	b.n	800118a <z_log_init.isra.0+0xaa>
 80011b8:	20000170 	.word	0x20000170
 80011bc:	08004e88 	.word	0x08004e88
 80011c0:	08004e98 	.word	0x08004e98

080011c4 <log_format_func_t_get>:
}
 80011c4:	4b01      	ldr	r3, [pc, #4]	; (80011cc <log_format_func_t_get+0x8>)
 80011c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80011ca:	4770      	bx	lr
 80011cc:	08004ea0 	.word	0x08004ea0

080011d0 <log_core_init>:
	panic_mode = false;
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <log_core_init+0x18>)
 80011d2:	2300      	movs	r3, #0
 80011d4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <log_core_init+0x1c>)
 80011d8:	6013      	str	r3, [r2, #0]
{
	if (timestamp_getter == NULL) {
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <log_core_init+0x20>)
 80011dc:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <log_core_init+0x24>)
 80011de:	601a      	str	r2, [r3, #0]
	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
 80011e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e4:	f000 ba78 	b.w	80016d8 <log_output_timestamp_freq_set>
 80011e8:	200002a8 	.word	0x200002a8
 80011ec:	20000168 	.word	0x20000168
 80011f0:	20000004 	.word	0x20000004
 80011f4:	08004173 	.word	0x08004173

080011f8 <z_impl_log_panic>:

	return 0;
}

void z_impl_log_panic(void)
{
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct log_backend const *backend;

	if (panic_mode) {
 80011fa:	4f0d      	ldr	r7, [pc, #52]	; (8001230 <z_impl_log_panic+0x38>)
 80011fc:	783d      	ldrb	r5, [r7, #0]
 80011fe:	b95d      	cbnz	r5, 8001218 <z_impl_log_panic+0x20>
	return __log_backends_end - __log_backends_start;
 8001200:	4c0c      	ldr	r4, [pc, #48]	; (8001234 <z_impl_log_panic+0x3c>)
 8001202:	4e0d      	ldr	r6, [pc, #52]	; (8001238 <z_impl_log_panic+0x40>)
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
 8001204:	4629      	mov	r1, r5
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff ff6a 	bl	80010e0 <z_log_init.isra.0>
 800120c:	1b36      	subs	r6, r6, r4
 800120e:	1136      	asrs	r6, r6, #4
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	for (int i = 0; i < log_backend_count_get(); i++) {
 8001210:	42b5      	cmp	r5, r6
 8001212:	db02      	blt.n	800121a <z_impl_log_panic+0x22>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
 8001214:	2301      	movs	r3, #1
 8001216:	703b      	strb	r3, [r7, #0]
}
 8001218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 800121a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 800121c:	795b      	ldrb	r3, [r3, #5]
 800121e:	b11b      	cbz	r3, 8001228 <z_impl_log_panic+0x30>
	backend->api->panic(backend);
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	4620      	mov	r0, r4
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8001228:	3501      	adds	r5, #1
 800122a:	3410      	adds	r4, #16
 800122c:	e7f0      	b.n	8001210 <z_impl_log_panic+0x18>
 800122e:	bf00      	nop
 8001230:	200002a8 	.word	0x200002a8
 8001234:	08004e88 	.word	0x08004e88
 8001238:	08004e98 	.word	0x08004e98

0800123c <z_log_dropped>:
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <z_log_dropped+0x34>)
 800123e:	f3bf 8f5b 	dmb	ish
 8001242:	e853 1f00 	ldrex	r1, [r3]
 8001246:	3101      	adds	r1, #1
 8001248:	e843 1200 	strex	r2, r1, [r3]
 800124c:	2a00      	cmp	r2, #0
 800124e:	d1f8      	bne.n	8001242 <z_log_dropped+0x6>
 8001250:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
 8001254:	b158      	cbz	r0, 800126e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8001256:	f3bf 8f5b 	dmb	ish
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <z_log_dropped+0x38>)
 800125c:	e853 1f00 	ldrex	r1, [r3]
 8001260:	3901      	subs	r1, #1
 8001262:	e843 1200 	strex	r2, r1, [r3]
 8001266:	2a00      	cmp	r2, #0
 8001268:	d1f8      	bne.n	800125c <z_log_dropped+0x20>
 800126a:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
 800126e:	4770      	bx	lr
 8001270:	20000168 	.word	0x20000168
 8001274:	2000016c 	.word	0x2000016c

08001278 <z_log_msg_commit>:
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg_commit(struct log_msg *msg)
{
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	union log_msg_generic *m = (union log_msg_generic *)msg;

	msg->hdr.timestamp = timestamp_func();
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <z_log_msg_commit+0x34>)
	return __log_backends_end - __log_backends_start;
 800127c:	4c0c      	ldr	r4, [pc, #48]	; (80012b0 <z_log_msg_commit+0x38>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4d0c      	ldr	r5, [pc, #48]	; (80012b4 <z_log_msg_commit+0x3c>)
{
 8001282:	4606      	mov	r6, r0
	msg->hdr.timestamp = timestamp_func();
 8001284:	4798      	blx	r3
 8001286:	1b2d      	subs	r5, r5, r4
 8001288:	60b0      	str	r0, [r6, #8]
 800128a:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 800128c:	2700      	movs	r7, #0
 800128e:	42af      	cmp	r7, r5
 8001290:	db00      	blt.n	8001294 <z_log_msg_commit+0x1c>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, &m->buf);
	z_log_msg_post_finalize();
}
 8001292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8001294:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
 8001296:	795b      	ldrb	r3, [r3, #5]
 8001298:	b123      	cbz	r3, 80012a4 <z_log_msg_commit+0x2c>
	backend->api->process(backend, msg);
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	4631      	mov	r1, r6
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4620      	mov	r0, r4
 80012a2:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80012a4:	3701      	adds	r7, #1
 80012a6:	3410      	adds	r4, #16
 80012a8:	e7f1      	b.n	800128e <z_log_msg_commit+0x16>
 80012aa:	bf00      	nop
 80012ac:	20000004 	.word	0x20000004
 80012b0:	08004e88 	.word	0x08004e88
 80012b4:	08004e98 	.word	0x08004e98

080012b8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <log_source_name_get+0x14>)
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <log_source_name_get+0x18>)
 80012bc:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80012be:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 80012c2:	bf34      	ite	cc
 80012c4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80012c8:	2000      	movcs	r0, #0
}
 80012ca:	4770      	bx	lr
 80012cc:	08004e50 	.word	0x08004e50
 80012d0:	08004e88 	.word	0x08004e88

080012d4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <log_backend_enable+0x1c>)
	backend->cb->id = id;
 80012d6:	6842      	ldr	r2, [r0, #4]
 80012d8:	1ac3      	subs	r3, r0, r3
 80012da:	111b      	asrs	r3, r3, #4
 80012dc:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
 80012de:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 80012e0:	6843      	ldr	r3, [r0, #4]
 80012e2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 80012e4:	6843      	ldr	r3, [r0, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 80012ea:	f002 bf5f 	b.w	80041ac <z_log_notify_backend_enabled>
 80012ee:	bf00      	nop
 80012f0:	08004e88 	.word	0x08004e88

080012f4 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
 80012f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af02      	add	r7, sp, #8
 80012fc:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
 8001300:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8001302:	4604      	mov	r4, r0
 8001304:	460e      	mov	r6, r1
 8001306:	4693      	mov	fp, r2
 8001308:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
 800130a:	f1ba 0f00 	cmp.w	sl, #0
 800130e:	d035      	beq.n	800137c <z_impl_z_log_msg_runtime_vcreate+0x88>
		va_list ap2;

		va_copy(ap2, ap);
 8001310:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
 8001314:	f8cd 9000 	str.w	r9, [sp]
 8001318:	2110      	movs	r1, #16
 800131a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800131c:	4653      	mov	r3, sl
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff f95e 	bl	80005e0 <cbvprintf_package>
 8001324:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
 8001328:	f004 0407 	and.w	r4, r4, #7
 800132c:	f00b 0b07 	and.w	fp, fp, #7
 8001330:	00e4      	lsls	r4, r4, #3
 8001332:	ea02 2241 	and.w	r2, r2, r1, lsl #9
 8001336:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
 800133a:	4314      	orrs	r4, r2
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <z_impl_z_log_msg_runtime_vcreate+0x90>)
 800133e:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 8001342:	3517      	adds	r5, #23
 8001344:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
 8001346:	f025 0507 	bic.w	r5, r5, #7
 800134a:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
 800134e:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
 8001350:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
 8001352:	f1ba 0f00 	cmp.w	sl, #0
 8001356:	d007      	beq.n	8001368 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
 8001358:	f8cd 9000 	str.w	r9, [sp]
 800135c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800135e:	4653      	mov	r3, sl
 8001360:	f105 0010 	add.w	r0, r5, #16
 8001364:	f7ff f93c 	bl	80005e0 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
 8001368:	4643      	mov	r3, r8
 800136a:	4622      	mov	r2, r4
 800136c:	4631      	mov	r1, r6
 800136e:	4628      	mov	r0, r5
 8001370:	f002 ff1f 	bl	80041b2 <z_log_msg_finalize>
	}
}
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
 800137c:	4651      	mov	r1, sl
 800137e:	e7d2      	b.n	8001326 <z_impl_z_log_msg_runtime_vcreate+0x32>
 8001380:	0007fe00 	.word	0x0007fe00
 8001384:	7ff80000 	.word	0x7ff80000

08001388 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8001388:	b40e      	push	{r1, r2, r3}
 800138a:	b503      	push	{r0, r1, lr}
 800138c:	ab03      	add	r3, sp, #12
 800138e:	4601      	mov	r1, r0
 8001390:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <print_formatted+0x20>)
	va_start(args, fmt);
 8001396:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8001398:	f002 ff4e 	bl	8004238 <cbvprintf>
	va_end(args);

	return length;
}
 800139c:	b002      	add	sp, #8
 800139e:	f85d eb04 	ldr.w	lr, [sp], #4
 80013a2:	b003      	add	sp, #12
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	080041e7 	.word	0x080041e7

080013ac <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80013ac:	06ca      	lsls	r2, r1, #27
 80013ae:	d405      	bmi.n	80013bc <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80013b0:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
 80013b2:	bf4c      	ite	mi
 80013b4:	4902      	ldrmi	r1, [pc, #8]	; (80013c0 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
 80013b6:	4903      	ldrpl	r1, [pc, #12]	; (80013c4 <newline_print+0x18>)
 80013b8:	f7ff bfe6 	b.w	8001388 <print_formatted>
	}
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	080051e1 	.word	0x080051e1
 80013c4:	080051e0 	.word	0x080051e0

080013c8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
 80013c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013cc:	b089      	sub	sp, #36	; 0x24
 80013ce:	469b      	mov	fp, r3
 80013d0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80013d4:	9304      	str	r3, [sp, #16]
 80013d6:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
 80013da:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
 80013dc:	9b04      	ldr	r3, [sp, #16]
{
 80013de:	9206      	str	r2, [sp, #24]
 80013e0:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
 80013e4:	4604      	mov	r4, r0
 80013e6:	460d      	mov	r5, r1
	if (!raw_string) {
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 8087 	beq.w	80014fc <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80013ee:	f006 0308 	and.w	r3, r6, #8
 80013f2:	9307      	str	r3, [sp, #28]
	const char *tag = z_log_get_tag();
 80013f4:	f002 fedb 	bl	80041ae <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 80013f8:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
 80013fc:	4602      	mov	r2, r0
 80013fe:	2800      	cmp	r0, #0
 8001400:	d04b      	beq.n	800149a <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
 8001402:	4986      	ldr	r1, [pc, #536]	; (800161c <log_output_process+0x254>)
 8001404:	4620      	mov	r0, r4
 8001406:	f7ff ffbf 	bl	8001388 <print_formatted>
 800140a:	4680      	mov	r8, r0
	if (stamp) {
 800140c:	f1ba 0f00 	cmp.w	sl, #0
 8001410:	d008      	beq.n	8001424 <log_output_process+0x5c>
	if (!format) {
 8001412:	f016 0f44 	tst.w	r6, #68	; 0x44
 8001416:	d142      	bne.n	800149e <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
 8001418:	4981      	ldr	r1, [pc, #516]	; (8001620 <log_output_process+0x258>)
 800141a:	462a      	mov	r2, r5
 800141c:	4620      	mov	r0, r4
 800141e:	f7ff ffb3 	bl	8001388 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8001422:	4480      	add	r8, r0
	if (color) {
 8001424:	f006 0301 	and.w	r3, r6, #1
 8001428:	b15b      	cbz	r3, 8001442 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
 800142a:	4b7e      	ldr	r3, [pc, #504]	; (8001624 <log_output_process+0x25c>)
 800142c:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
 800142e:	497e      	ldr	r1, [pc, #504]	; (8001628 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
 8001430:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
 8001434:	4b7d      	ldr	r3, [pc, #500]	; (800162c <log_output_process+0x264>)
 8001436:	4620      	mov	r0, r4
 8001438:	2a00      	cmp	r2, #0
 800143a:	bf08      	it	eq
 800143c:	461a      	moveq	r2, r3
 800143e:	f7ff ffa3 	bl	8001388 <print_formatted>
	if (level_on) {
 8001442:	f006 0308 	and.w	r3, r6, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d055      	beq.n	80014f6 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
 800144a:	4b79      	ldr	r3, [pc, #484]	; (8001630 <log_output_process+0x268>)
 800144c:	9a04      	ldr	r2, [sp, #16]
 800144e:	4979      	ldr	r1, [pc, #484]	; (8001634 <log_output_process+0x26c>)
 8001450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001454:	4620      	mov	r0, r4
 8001456:	f7ff ff97 	bl	8001388 <print_formatted>
 800145a:	4605      	mov	r5, r0
	if (domain) {
 800145c:	9b06      	ldr	r3, [sp, #24]
 800145e:	b12b      	cbz	r3, 800146c <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
 8001460:	4975      	ldr	r1, [pc, #468]	; (8001638 <log_output_process+0x270>)
 8001462:	461a      	mov	r2, r3
 8001464:	4620      	mov	r0, r4
 8001466:	f7ff ff8f 	bl	8001388 <print_formatted>
 800146a:	4405      	add	r5, r0
	if (source) {
 800146c:	f1bb 0f00 	cmp.w	fp, #0
 8001470:	d005      	beq.n	800147e <log_output_process+0xb6>
		total += print_formatted(output,
 8001472:	4972      	ldr	r1, [pc, #456]	; (800163c <log_output_process+0x274>)
 8001474:	465a      	mov	r2, fp
 8001476:	4620      	mov	r0, r4
 8001478:	f7ff ff86 	bl	8001388 <print_formatted>
 800147c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
 800147e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
 8001480:	f1b9 0f00 	cmp.w	r9, #0
 8001484:	d149      	bne.n	800151a <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
 8001486:	2f00      	cmp	r7, #0
 8001488:	d14f      	bne.n	800152a <log_output_process+0x162>
	if (color) {
 800148a:	07f3      	lsls	r3, r6, #31
 800148c:	f100 80c0 	bmi.w	8001610 <log_output_process+0x248>
	newline_print(output, flags);
 8001490:	4631      	mov	r1, r6
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff ff8a 	bl	80013ac <newline_print>
}
 8001498:	e0b4      	b.n	8001604 <log_output_process+0x23c>
	uint32_t length = 0U;
 800149a:	4680      	mov	r8, r0
 800149c:	e7b6      	b.n	800140c <log_output_process+0x44>
	} else if (freq != 0U) {
 800149e:	4b68      	ldr	r3, [pc, #416]	; (8001640 <log_output_process+0x278>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d0bd      	beq.n	8001422 <log_output_process+0x5a>
		timestamp /= timestamp_div;
 80014a6:	4b67      	ldr	r3, [pc, #412]	; (8001644 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
 80014a8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
 80014b2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80014b6:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
 80014ba:	fb00 5513 	mls	r5, r0, r3, r5
 80014be:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
 80014c2:	fb0e f505 	mul.w	r5, lr, r5
 80014c6:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
 80014ca:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80014cc:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
 80014d0:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80014d4:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
 80014d8:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80014dc:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
 80014e0:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80014e2:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
 80014e6:	4958      	ldr	r1, [pc, #352]	; (8001648 <log_output_process+0x280>)
 80014e8:	e9cd c501 	strd	ip, r5, [sp, #4]
 80014ec:	4652      	mov	r2, sl
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff ff4a 	bl	8001388 <print_formatted>
 80014f4:	e795      	b.n	8001422 <log_output_process+0x5a>
	int total = 0;
 80014f6:	f006 0508 	and.w	r5, r6, #8
 80014fa:	e7af      	b.n	800145c <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 80014fc:	f1bb 0f01 	cmp.w	fp, #1
 8001500:	d106      	bne.n	8001510 <log_output_process+0x148>
	if (package) {
 8001502:	f1b9 0f00 	cmp.w	r9, #0
 8001506:	d164      	bne.n	80015d2 <log_output_process+0x20a>
	if (data_len) {
 8001508:	2f00      	cmp	r7, #0
 800150a:	d07b      	beq.n	8001604 <log_output_process+0x23c>
		prefix_offset = 0;
 800150c:	2500      	movs	r5, #0
 800150e:	e00c      	b.n	800152a <log_output_process+0x162>
	if (package) {
 8001510:	f1b9 0f00 	cmp.w	r9, #0
 8001514:	d0f8      	beq.n	8001508 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 8001516:	484d      	ldr	r0, [pc, #308]	; (800164c <log_output_process+0x284>)
 8001518:	e05c      	b.n	80015d4 <log_output_process+0x20c>
		cb = out_func;
 800151a:	484d      	ldr	r0, [pc, #308]	; (8001650 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 800151c:	494d      	ldr	r1, [pc, #308]	; (8001654 <log_output_process+0x28c>)
 800151e:	464b      	mov	r3, r9
 8001520:	4622      	mov	r2, r4
 8001522:	f002 fd7e 	bl	8004022 <cbpprintf_external>
	if (data_len) {
 8001526:	2f00      	cmp	r7, #0
 8001528:	d068      	beq.n	80015fc <log_output_process+0x234>
		print_formatted(output, " ");
 800152a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8001658 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
 800152e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800165c <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8001532:	2f10      	cmp	r7, #16
	newline_print(output, flags);
 8001534:	4631      	mov	r1, r6
 8001536:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8001538:	46b8      	mov	r8, r7
 800153a:	bf28      	it	cs
 800153c:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
 8001540:	f7ff ff34 	bl	80013ac <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
 8001544:	f04f 0b00 	mov.w	fp, #0
 8001548:	455d      	cmp	r5, fp
 800154a:	dc45      	bgt.n	80015d8 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
 800154c:	9b05      	ldr	r3, [sp, #20]
 800154e:	4651      	mov	r1, sl
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff ff18 	bl	8001388 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8001558:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
 800155c:	f01b 0f07 	tst.w	fp, #7
 8001560:	d103      	bne.n	800156a <log_output_process+0x1a2>
			print_formatted(output, " ");
 8001562:	4649      	mov	r1, r9
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ff0f 	bl	8001388 <print_formatted>
		if (i < length) {
 800156a:	45d8      	cmp	r8, fp
 800156c:	d93b      	bls.n	80015e6 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
 800156e:	9b05      	ldr	r3, [sp, #20]
 8001570:	4651      	mov	r1, sl
 8001572:	f813 200b 	ldrb.w	r2, [r3, fp]
 8001576:	4620      	mov	r0, r4
 8001578:	f7ff ff06 	bl	8001388 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800157c:	f10b 0b01 	add.w	fp, fp, #1
 8001580:	f1bb 0f10 	cmp.w	fp, #16
 8001584:	d1ea      	bne.n	800155c <log_output_process+0x194>
	print_formatted(output, "|");
 8001586:	4936      	ldr	r1, [pc, #216]	; (8001660 <log_output_process+0x298>)
 8001588:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800158a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
 800158e:	f7ff fefb 	bl	8001388 <print_formatted>
		if (i < length) {
 8001592:	465a      	mov	r2, fp
			char c = (char)data[i];
 8001594:	9b05      	ldr	r3, [sp, #20]
 8001596:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
 8001598:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
 800159c:	295f      	cmp	r1, #95	; 0x5f
 800159e:	bf28      	it	cs
 80015a0:	222e      	movcs	r2, #46	; 0x2e
 80015a2:	4930      	ldr	r1, [pc, #192]	; (8001664 <log_output_process+0x29c>)
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff feef 	bl	8001388 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80015aa:	f10b 0b01 	add.w	fp, fp, #1
 80015ae:	f1bb 0f10 	cmp.w	fp, #16
 80015b2:	d01d      	beq.n	80015f0 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
 80015b4:	f01b 0f07 	tst.w	fp, #7
 80015b8:	d103      	bne.n	80015c2 <log_output_process+0x1fa>
			print_formatted(output, " ");
 80015ba:	4649      	mov	r1, r9
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff fee3 	bl	8001388 <print_formatted>
		if (i < length) {
 80015c2:	45d8      	cmp	r8, fp
 80015c4:	465a      	mov	r2, fp
 80015c6:	d8e5      	bhi.n	8001594 <log_output_process+0x1cc>
			print_formatted(output, " ");
 80015c8:	4649      	mov	r1, r9
 80015ca:	4620      	mov	r0, r4
 80015cc:	f7ff fedc 	bl	8001388 <print_formatted>
 80015d0:	e7eb      	b.n	80015aa <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 80015d2:	481f      	ldr	r0, [pc, #124]	; (8001650 <log_output_process+0x288>)
		prefix_offset = 0;
 80015d4:	9d04      	ldr	r5, [sp, #16]
 80015d6:	e7a1      	b.n	800151c <log_output_process+0x154>
		print_formatted(output, " ");
 80015d8:	4649      	mov	r1, r9
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff fed4 	bl	8001388 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80015e0:	f10b 0b01 	add.w	fp, fp, #1
 80015e4:	e7b0      	b.n	8001548 <log_output_process+0x180>
			print_formatted(output, "   ");
 80015e6:	4920      	ldr	r1, [pc, #128]	; (8001668 <log_output_process+0x2a0>)
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff fecd 	bl	8001388 <print_formatted>
 80015ee:	e7c5      	b.n	800157c <log_output_process+0x1b4>
		data += length;
 80015f0:	9b05      	ldr	r3, [sp, #20]
	} while (len);
 80015f2:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
 80015f6:	4443      	add	r3, r8
 80015f8:	9305      	str	r3, [sp, #20]
	} while (len);
 80015fa:	d19a      	bne.n	8001532 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
 80015fc:	9b04      	ldr	r3, [sp, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f47f af43 	bne.w	800148a <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8001604:	4620      	mov	r0, r4
}
 8001606:	b009      	add	sp, #36	; 0x24
 8001608:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
 800160c:	f002 be1b 	b.w	8004246 <log_output_flush>
		print_formatted(output, "%s", log_color);
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <log_output_process+0x264>)
 8001612:	4905      	ldr	r1, [pc, #20]	; (8001628 <log_output_process+0x260>)
 8001614:	4620      	mov	r0, r4
 8001616:	f7ff feb7 	bl	8001388 <print_formatted>
}
 800161a:	e739      	b.n	8001490 <log_output_process+0xc8>
 800161c:	080051e8 	.word	0x080051e8
 8001620:	080051ec 	.word	0x080051ec
 8001624:	08004eac 	.word	0x08004eac
 8001628:	08005211 	.word	0x08005211
 800162c:	080051e3 	.word	0x080051e3
 8001630:	08004ec0 	.word	0x08004ec0
 8001634:	08005214 	.word	0x08005214
 8001638:	0800521a 	.word	0x0800521a
 800163c:	0800521e 	.word	0x0800521e
 8001640:	20000178 	.word	0x20000178
 8001644:	20000174 	.word	0x20000174
 8001648:	080051f5 	.word	0x080051f5
 800164c:	08004203 	.word	0x08004203
 8001650:	080041e7 	.word	0x080041e7
 8001654:	08004239 	.word	0x08004239
 8001658:	0800522b 	.word	0x0800522b
 800165c:	08005223 	.word	0x08005223
 8001660:	0800522d 	.word	0x0800522d
 8001664:	0800522f 	.word	0x0800522f
 8001668:	08005229 	.word	0x08005229

0800166c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
 800166c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
 8001670:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
 8001672:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
 8001674:	688e      	ldr	r6, [r1, #8]
 8001676:	b086      	sub	sp, #24
 8001678:	4605      	mov	r5, r0
 800167a:	460c      	mov	r4, r1
 800167c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
 800167e:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
 8001682:	b15b      	cbz	r3, 800169c <log_output_msg_process+0x30>
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <log_output_msg_process+0x68>)
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 800168c:	2900      	cmp	r1, #0
 800168e:	db1f      	blt.n	80016d0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
 8001690:	7820      	ldrb	r0, [r4, #0]
 8001692:	f3c0 00c2 	ubfx	r0, r0, #3, #3
 8001696:	f7ff fe0f 	bl	80012b8 <log_source_name_get>
 800169a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 800169c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
 800169e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
 80016a0:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
 80016a4:	9700      	str	r7, [sp, #0]
 80016a6:	f3c2 2249 	ubfx	r2, r2, #9, #10
 80016aa:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
 80016ac:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
 80016b0:	f3c0 00cb 	ubfx	r0, r0, #3, #12
 80016b4:	bf08      	it	eq
 80016b6:	2100      	moveq	r1, #0
 80016b8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80016bc:	e9cd 1401 	strd	r1, r4, [sp, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	4631      	mov	r1, r6
 80016c4:	4628      	mov	r0, r5
 80016c6:	f7ff fe7f 	bl	80013c8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
 80016ca:	b006      	add	sp, #24
 80016cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e7e3      	b.n	800169c <log_output_msg_process+0x30>
 80016d4:	08004e50 	.word	0x08004e50

080016d8 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <log_output_timestamp_freq_set+0x20>)
 80016da:	2100      	movs	r1, #0
 80016dc:	2301      	movs	r3, #1
 80016de:	4290      	cmp	r0, r2
 80016e0:	d806      	bhi.n	80016f0 <log_output_timestamp_freq_set+0x18>
 80016e2:	4a06      	ldr	r2, [pc, #24]	; (80016fc <log_output_timestamp_freq_set+0x24>)
 80016e4:	b901      	cbnz	r1, 80016e8 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
 80016e6:	2301      	movs	r3, #1
 80016e8:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <log_output_timestamp_freq_set+0x28>)
 80016ec:	6018      	str	r0, [r3, #0]
}
 80016ee:	4770      	bx	lr
		frequency /= 2U;
 80016f0:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2101      	movs	r1, #1
 80016f6:	e7f2      	b.n	80016de <log_output_timestamp_freq_set+0x6>
 80016f8:	000f4240 	.word	0x000f4240
 80016fc:	20000174 	.word	0x20000174
 8001700:	20000178 	.word	0x20000178

08001704 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 8001704:	4b01      	ldr	r3, [pc, #4]	; (800170c <format_set+0x8>)
	return 0;
}
 8001706:	2000      	movs	r0, #0
	log_format_current = log_type;
 8001708:	6019      	str	r1, [r3, #0]
}
 800170a:	4770      	bx	lr
 800170c:	20000190 	.word	0x20000190

08001710 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <panic+0x10>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	f002 bd95 	b.w	8004246 <log_output_flush>
 800171c:	200002aa 	.word	0x200002aa
 8001720:	08004ef0 	.word	0x08004ef0

08001724 <process>:
{
 8001724:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <process+0x1c>)
 8001728:	6818      	ldr	r0, [r3, #0]
{
 800172a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 800172c:	f7ff fd4a 	bl	80011c4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 8001730:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8001732:	4603      	mov	r3, r0
}
 8001734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <process+0x20>)
 800173a:	220f      	movs	r2, #15
 800173c:	4718      	bx	r3
 800173e:	bf00      	nop
 8001740:	20000190 	.word	0x20000190
 8001744:	08004ef0 	.word	0x08004ef0

08001748 <char_out>:
{
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 800174a:	4f07      	ldr	r7, [pc, #28]	; (8001768 <char_out+0x20>)
 800174c:	460d      	mov	r5, r1
 800174e:	4604      	mov	r4, r0
 8001750:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
 8001752:	42b4      	cmp	r4, r6
 8001754:	d101      	bne.n	800175a <char_out+0x12>
}
 8001756:	4628      	mov	r0, r5
 8001758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 800175a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	4801      	ldr	r0, [pc, #4]	; (8001768 <char_out+0x20>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 8001766:	e7f4      	b.n	8001752 <char_out+0xa>
 8001768:	08004b40 	.word	0x08004b40

0800176c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 800176c:	4901      	ldr	r1, [pc, #4]	; (8001774 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 800176e:	2210      	movs	r2, #16
	str	r2, [r1]
 8001770:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8001772:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8001774:	e000ed10 	.word	0xe000ed10

08001778 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8001778:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800177a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 800177c:	f380 8811 	msr	BASEPRI, r0
	isb
 8001780:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8001784:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8001788:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800178a:	b662      	cpsie	i
	isb
 800178c:	f3bf 8f6f 	isb	sy

	bx	lr
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop

08001794 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	4606      	mov	r6, r0
 8001798:	b086      	sub	sp, #24

	if (esf != NULL) {
 800179a:	460d      	mov	r5, r1
 800179c:	2900      	cmp	r1, #0
 800179e:	d038      	beq.n	8001812 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 80017a0:	688b      	ldr	r3, [r1, #8]
 80017a2:	9305      	str	r3, [sp, #20]
 80017a4:	684b      	ldr	r3, [r1, #4]
 80017a6:	9304      	str	r3, [sp, #16]
 80017a8:	680b      	ldr	r3, [r1, #0]
 80017aa:	9303      	str	r3, [sp, #12]
 80017ac:	2400      	movs	r4, #0
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <z_arm_fatal_error+0x8c>)
 80017b0:	491c      	ldr	r1, [pc, #112]	; (8001824 <z_arm_fatal_error+0x90>)
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4623      	mov	r3, r4
 80017b8:	4620      	mov	r0, r4
 80017ba:	e9cd 4400 	strd	r4, r4, [sp]
 80017be:	f002 fd50 	bl	8004262 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 80017c2:	696b      	ldr	r3, [r5, #20]
 80017c4:	9305      	str	r3, [sp, #20]
 80017c6:	692b      	ldr	r3, [r5, #16]
 80017c8:	9304      	str	r3, [sp, #16]
 80017ca:	68eb      	ldr	r3, [r5, #12]
 80017cc:	9303      	str	r3, [sp, #12]
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <z_arm_fatal_error+0x94>)
 80017d0:	4914      	ldr	r1, [pc, #80]	; (8001824 <z_arm_fatal_error+0x90>)
 80017d2:	9400      	str	r4, [sp, #0]
 80017d4:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	4623      	mov	r3, r4
 80017dc:	4620      	mov	r0, r4
 80017de:	f002 fd40 	bl	8004262 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 80017e2:	69eb      	ldr	r3, [r5, #28]
 80017e4:	9303      	str	r3, [sp, #12]
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <z_arm_fatal_error+0x98>)
 80017e8:	490e      	ldr	r1, [pc, #56]	; (8001824 <z_arm_fatal_error+0x90>)
 80017ea:	9400      	str	r4, [sp, #0]
 80017ec:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4623      	mov	r3, r4
 80017f4:	4620      	mov	r0, r4
 80017f6:	f002 fd34 	bl	8004262 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 80017fa:	69ab      	ldr	r3, [r5, #24]
 80017fc:	9303      	str	r3, [sp, #12]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <z_arm_fatal_error+0x9c>)
 8001800:	4908      	ldr	r1, [pc, #32]	; (8001824 <z_arm_fatal_error+0x90>)
 8001802:	9400      	str	r4, [sp, #0]
 8001804:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	4623      	mov	r3, r4
 800180c:	4620      	mov	r0, r4
 800180e:	f002 fd28 	bl	8004262 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8001812:	4629      	mov	r1, r5
 8001814:	4630      	mov	r0, r6
}
 8001816:	b006      	add	sp, #24
 8001818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
 800181c:	f001 be32 	b.w	8003484 <z_fatal_error>
 8001820:	0800526c 	.word	0x0800526c
 8001824:	08004e68 	.word	0x08004e68
 8001828:	0800529b 	.word	0x0800529b
 800182c:	080052ca 	.word	0x080052ca
 8001830:	080052d9 	.word	0x080052d9

08001834 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8001834:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001836:	2800      	cmp	r0, #0
 8001838:	db07      	blt.n	800184a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <arch_irq_enable+0x18>)
 800183c:	0941      	lsrs	r1, r0, #5
 800183e:	2301      	movs	r3, #1
 8001840:	f000 001f 	and.w	r0, r0, #31
 8001844:	4083      	lsls	r3, r0
 8001846:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100

08001850 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8001850:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001852:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	bfa8      	it	ge
 8001856:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 800185a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	bfb8      	it	lt
 8001860:	4b06      	ldrlt	r3, [pc, #24]	; (800187c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8001866:	bfac      	ite	ge
 8001868:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	bfb4      	ite	lt
 8001874:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
 800187a:	4770      	bx	lr
 800187c:	e000ed14 	.word	0xe000ed14

08001880 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8001880:	bf30      	wfi
    b z_SysNmiOnReset
 8001882:	f7ff bffd 	b.w	8001880 <z_SysNmiOnReset>
 8001886:	bf00      	nop

08001888 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 800188a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <z_arm_prep_c+0x44>)
 800188e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001892:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001898:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 800189c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80018a8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80018ac:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80018b0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80018b4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80018b8:	f001 fe62 	bl	8003580 <z_bss_zero>
	z_data_copy();
 80018bc:	f002 fa4a 	bl	8003d54 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80018c0:	f000 fb8a 	bl	8001fd8 <z_arm_interrupt_init>
	z_cstart();
 80018c4:	f001 fea0 	bl	8003608 <z_cstart>
 80018c8:	08000000 	.word	0x08000000
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 80018d0:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 80018d2:	490a      	ldr	r1, [pc, #40]	; (80018fc <arch_swap+0x2c>)
	_current->arch.basepri = key;
 80018d4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 80018d6:	6809      	ldr	r1, [r1, #0]
 80018d8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80018da:	4909      	ldr	r1, [pc, #36]	; (8001900 <arch_swap+0x30>)
	_current->arch.basepri = key;
 80018dc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80018de:	684b      	ldr	r3, [r1, #4]
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	604b      	str	r3, [r1, #4]
 80018e6:	2300      	movs	r3, #0
 80018e8:	f383 8811 	msr	BASEPRI, r3
 80018ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 80018f0:	6893      	ldr	r3, [r2, #8]
}
 80018f2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000274 	.word	0x20000274
 80018fc:	080050dc 	.word	0x080050dc
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001904:	4912      	ldr	r1, [pc, #72]	; (8001950 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8001906:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8001908:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800190c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800190e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001912:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001916:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8001918:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800191c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8001920:	4f0c      	ldr	r7, [pc, #48]	; (8001954 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001922:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8001926:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8001928:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800192a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800192c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 800192e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001930:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001932:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8001936:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8001938:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800193a:	f000 fb91 	bl	8002060 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800193e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8001942:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8001946:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800194a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 800194e:	4770      	bx	lr
    ldr r1, =_kernel
 8001950:	20000274 	.word	0x20000274
    ldr v4, =_SCS_ICSR
 8001954:	e000ed04 	.word	0xe000ed04

08001958 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8001958:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 800195c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800195e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8001962:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8001966:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8001968:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 800196c:	2902      	cmp	r1, #2
    beq _oops
 800196e:	d0ff      	beq.n	8001970 <_oops>

08001970 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8001970:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8001972:	f002 fc86 	bl	8004282 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8001976:	bd01      	pop	{r0, pc}

08001978 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8001978:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 800197c:	9b00      	ldr	r3, [sp, #0]
 800197e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800198a:	9b02      	ldr	r3, [sp, #8]
 800198c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8001990:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001998:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 800199c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 80019a0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80019a2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 80019a4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 80019a6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	0800409b 	.word	0x0800409b

080019b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80019b0:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <z_check_thread_stack_fail+0x28>)
{
 80019b2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 80019b4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 80019b6:	b170      	cbz	r0, 80019d6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80019b8:	f113 0f16 	cmn.w	r3, #22
 80019bc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80019be:	d005      	beq.n	80019cc <z_check_thread_stack_fail+0x1c>
 80019c0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d805      	bhi.n	80019d4 <z_check_thread_stack_fail+0x24>
 80019c8:	4283      	cmp	r3, r0
 80019ca:	d203      	bcs.n	80019d4 <z_check_thread_stack_fail+0x24>
		return 0;
 80019cc:	4281      	cmp	r1, r0
 80019ce:	bf28      	it	cs
 80019d0:	2000      	movcs	r0, #0
 80019d2:	4770      	bx	lr
 80019d4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 80019d6:	4770      	bx	lr
 80019d8:	20000274 	.word	0x20000274

080019dc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80019dc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <arch_switch_to_main_thread+0x28>)
 80019e0:	6098      	str	r0, [r3, #8]
{
 80019e2:	460d      	mov	r5, r1
 80019e4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80019e6:	f000 fb3b 	bl	8002060 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80019ea:	4620      	mov	r0, r4
 80019ec:	f385 8809 	msr	PSP, r5
 80019f0:	2100      	movs	r1, #0
 80019f2:	b663      	cpsie	if
 80019f4:	f381 8811 	msr	BASEPRI, r1
 80019f8:	f3bf 8f6f 	isb	sy
 80019fc:	2200      	movs	r2, #0
 80019fe:	2300      	movs	r3, #0
 8001a00:	f002 fb4b 	bl	800409a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8001a04:	20000274 	.word	0x20000274

08001a08 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001a08:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001a0a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001a0e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001a12:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8001a16:	4904      	ldr	r1, [pc, #16]	; (8001a28 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001a18:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001a1a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001a1c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001a1e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001a22:	4902      	ldr	r1, [pc, #8]	; (8001a2c <_isr_wrapper+0x24>)
	bx r1
 8001a24:	4708      	bx	r1
 8001a26:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001a28:	08004b70 	.word	0x08004b70
	ldr r1, =z_arm_int_exit
 8001a2c:	08001a31 	.word	0x08001a31

08001a30 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001a32:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001a34:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8001a36:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001a38:	d003      	beq.n	8001a42 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001a3a:	4903      	ldr	r1, [pc, #12]	; (8001a48 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001a40:	600a      	str	r2, [r1, #0]

08001a42 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001a42:	4770      	bx	lr
	ldr r3, =_kernel
 8001a44:	20000274 	.word	0x20000274
	ldr r1, =_SCS_ICSR
 8001a48:	e000ed04 	.word	0xe000ed04

08001a4c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
 8001a50:	2400      	movs	r4, #0
 8001a52:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <bus_fault.constprop.0+0xf4>)
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	e9cd 4400 	strd	r4, r4, [sp]
 8001a5a:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8001a5c:	4607      	mov	r7, r0
 8001a5e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8001a60:	2201      	movs	r2, #1
 8001a62:	4938      	ldr	r1, [pc, #224]	; (8001b44 <bus_fault.constprop.0+0xf8>)
 8001a64:	4620      	mov	r0, r4
 8001a66:	f002 fc1b 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <bus_fault.constprop.0+0xfc>)
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	04db      	lsls	r3, r3, #19
 8001a70:	d509      	bpl.n	8001a86 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <bus_fault.constprop.0+0x100>)
 8001a74:	4933      	ldr	r1, [pc, #204]	; (8001b44 <bus_fault.constprop.0+0xf8>)
 8001a76:	9400      	str	r4, [sp, #0]
 8001a78:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4623      	mov	r3, r4
 8001a80:	4620      	mov	r0, r4
 8001a82:	f002 fc0d 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <bus_fault.constprop.0+0xfc>)
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	051d      	lsls	r5, r3, #20
 8001a8c:	d509      	bpl.n	8001aa2 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
 8001a8e:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <bus_fault.constprop.0+0x104>)
 8001a90:	9302      	str	r3, [sp, #8]
 8001a92:	2300      	movs	r3, #0
 8001a94:	e9cd 3300 	strd	r3, r3, [sp]
 8001a98:	492a      	ldr	r1, [pc, #168]	; (8001b44 <bus_fault.constprop.0+0xf8>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fbff 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001aa2:	4d29      	ldr	r5, [pc, #164]	; (8001b48 <bus_fault.constprop.0+0xfc>)
 8001aa4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001aa6:	059c      	lsls	r4, r3, #22
 8001aa8:	d51e      	bpl.n	8001ae8 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
 8001aaa:	2400      	movs	r4, #0
 8001aac:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <bus_fault.constprop.0+0x108>)
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	e9cd 4400 	strd	r4, r4, [sp]
 8001aba:	4922      	ldr	r1, [pc, #136]	; (8001b44 <bus_fault.constprop.0+0xf8>)
 8001abc:	f002 fbf0 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8001ac0:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8001ac2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001ac4:	0410      	lsls	r0, r2, #16
 8001ac6:	d50f      	bpl.n	8001ae8 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8001ac8:	9303      	str	r3, [sp, #12]
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <bus_fault.constprop.0+0x10c>)
 8001acc:	491d      	ldr	r1, [pc, #116]	; (8001b44 <bus_fault.constprop.0+0xf8>)
 8001ace:	9400      	str	r4, [sp, #0]
 8001ad0:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f002 fbe1 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
 8001ade:	b11f      	cbz	r7, 8001ae8 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8001ae0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ae2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ae6:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <bus_fault.constprop.0+0xfc>)
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	0559      	lsls	r1, r3, #21
 8001aee:	d509      	bpl.n	8001b04 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <bus_fault.constprop.0+0x110>)
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	2300      	movs	r3, #0
 8001af6:	e9cd 3300 	strd	r3, r3, [sp]
 8001afa:	4912      	ldr	r1, [pc, #72]	; (8001b44 <bus_fault.constprop.0+0xf8>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fbce 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8001b04:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <bus_fault.constprop.0+0xfc>)
 8001b06:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001b08:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001b0c:	d012      	beq.n	8001b34 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <bus_fault.constprop.0+0x114>)
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8001b14:	e9cd 3300 	strd	r3, r3, [sp]
 8001b18:	490a      	ldr	r1, [pc, #40]	; (8001b44 <bus_fault.constprop.0+0xf8>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 fbbf 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <bus_fault.constprop.0+0xfc>)
 8001b24:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8001b26:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001b28:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8001b2c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001b2e:	7030      	strb	r0, [r6, #0]

	return reason;
}
 8001b30:	b005      	add	sp, #20
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001b34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b36:	0492      	lsls	r2, r2, #18
 8001b38:	d5f3      	bpl.n	8001b22 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <bus_fault.constprop.0+0x118>)
 8001b3c:	9202      	str	r2, [sp, #8]
 8001b3e:	e7e9      	b.n	8001b14 <bus_fault.constprop.0+0xc8>
 8001b40:	08005307 	.word	0x08005307
 8001b44:	08004e68 	.word	0x08004e68
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	0800531d 	.word	0x0800531d
 8001b50:	0800532e 	.word	0x0800532e
 8001b54:	08005341 	.word	0x08005341
 8001b58:	0800535a 	.word	0x0800535a
 8001b5c:	0800536f 	.word	0x0800536f
 8001b60:	0800538a 	.word	0x0800538a
 8001b64:	080053a2 	.word	0x080053a2

08001b68 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8001b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8001b6a:	2400      	movs	r4, #0
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <usage_fault.constprop.0+0xd4>)
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	e9cd 4400 	strd	r4, r4, [sp]
 8001b74:	4623      	mov	r3, r4
 8001b76:	4932      	ldr	r1, [pc, #200]	; (8001c40 <usage_fault.constprop.0+0xd8>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f002 fb90 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <usage_fault.constprop.0+0xdc>)
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	d509      	bpl.n	8001b9c <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
 8001b88:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <usage_fault.constprop.0+0xe0>)
 8001b8a:	492d      	ldr	r1, [pc, #180]	; (8001c40 <usage_fault.constprop.0+0xd8>)
 8001b8c:	9400      	str	r4, [sp, #0]
 8001b8e:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4623      	mov	r3, r4
 8001b96:	4620      	mov	r0, r4
 8001b98:	f002 fb82 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <usage_fault.constprop.0+0xdc>)
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	01dc      	lsls	r4, r3, #7
 8001ba2:	d509      	bpl.n	8001bb8 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
 8001ba4:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <usage_fault.constprop.0+0xe4>)
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e9cd 3300 	strd	r3, r3, [sp]
 8001bae:	4924      	ldr	r1, [pc, #144]	; (8001c40 <usage_fault.constprop.0+0xd8>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fb74 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <usage_fault.constprop.0+0xdc>)
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	0318      	lsls	r0, r3, #12
 8001bbe:	d509      	bpl.n	8001bd4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <usage_fault.constprop.0+0xe8>)
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e9cd 3300 	strd	r3, r3, [sp]
 8001bca:	491d      	ldr	r1, [pc, #116]	; (8001c40 <usage_fault.constprop.0+0xd8>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fb66 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <usage_fault.constprop.0+0xdc>)
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	0359      	lsls	r1, r3, #13
 8001bda:	d509      	bpl.n	8001bf0 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <usage_fault.constprop.0+0xec>)
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2300      	movs	r3, #0
 8001be2:	e9cd 3300 	strd	r3, r3, [sp]
 8001be6:	4916      	ldr	r1, [pc, #88]	; (8001c40 <usage_fault.constprop.0+0xd8>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fb58 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <usage_fault.constprop.0+0xdc>)
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	039a      	lsls	r2, r3, #14
 8001bf6:	d509      	bpl.n	8001c0c <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <usage_fault.constprop.0+0xf0>)
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e9cd 3300 	strd	r3, r3, [sp]
 8001c02:	490f      	ldr	r1, [pc, #60]	; (8001c40 <usage_fault.constprop.0+0xd8>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fb4a 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <usage_fault.constprop.0+0xdc>)
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	03db      	lsls	r3, r3, #15
 8001c12:	d509      	bpl.n	8001c28 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <usage_fault.constprop.0+0xf4>)
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e9cd 3300 	strd	r3, r3, [sp]
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <usage_fault.constprop.0+0xd8>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f002 fb3c 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <usage_fault.constprop.0+0xdc>)
 8001c2a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001c2c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8001c30:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
 8001c34:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001c36:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001c38:	b004      	add	sp, #16
 8001c3a:	bd10      	pop	{r4, pc}
 8001c3c:	080053d1 	.word	0x080053d1
 8001c40:	08004e68 	.word	0x08004e68
 8001c44:	e000ed00 	.word	0xe000ed00
 8001c48:	080053e9 	.word	0x080053e9
 8001c4c:	080053fc 	.word	0x080053fc
 8001c50:	08005416 	.word	0x08005416
 8001c54:	08005434 	.word	0x08005434
 8001c58:	08005459 	.word	0x08005459
 8001c5c:	08005473 	.word	0x08005473

08001c60 <mem_manage_fault>:
{
 8001c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c64:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
 8001c66:	2400      	movs	r4, #0
 8001c68:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <mem_manage_fault+0x130>)
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	e9cd 4400 	strd	r4, r4, [sp]
 8001c70:	4623      	mov	r3, r4
{
 8001c72:	4680      	mov	r8, r0
 8001c74:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8001c76:	4620      	mov	r0, r4
 8001c78:	4946      	ldr	r1, [pc, #280]	; (8001d94 <mem_manage_fault+0x134>)
{
 8001c7a:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f002 fb0f 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001c82:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <mem_manage_fault+0x138>)
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	06d8      	lsls	r0, r3, #27
 8001c88:	d509      	bpl.n	8001c9e <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <mem_manage_fault+0x13c>)
 8001c8c:	4941      	ldr	r1, [pc, #260]	; (8001d94 <mem_manage_fault+0x134>)
 8001c8e:	9400      	str	r4, [sp, #0]
 8001c90:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	4623      	mov	r3, r4
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f002 fb01 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <mem_manage_fault+0x138>)
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	0719      	lsls	r1, r3, #28
 8001ca4:	d509      	bpl.n	8001cba <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <mem_manage_fault+0x140>)
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	2300      	movs	r3, #0
 8001cac:	e9cd 3300 	strd	r3, r3, [sp]
 8001cb0:	4938      	ldr	r1, [pc, #224]	; (8001d94 <mem_manage_fault+0x134>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 faf3 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001cba:	4d37      	ldr	r5, [pc, #220]	; (8001d98 <mem_manage_fault+0x138>)
 8001cbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001cbe:	079a      	lsls	r2, r3, #30
 8001cc0:	d436      	bmi.n	8001d30 <mem_manage_fault+0xd0>
	uint32_t mmfar = -EINVAL;
 8001cc2:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8001cc6:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <mem_manage_fault+0x138>)
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	07dd      	lsls	r5, r3, #31
 8001ccc:	d509      	bpl.n	8001ce2 <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
 8001cce:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <mem_manage_fault+0x144>)
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e9cd 3300 	strd	r3, r3, [sp]
 8001cd8:	492e      	ldr	r1, [pc, #184]	; (8001d94 <mem_manage_fault+0x134>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f002 fadf 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <mem_manage_fault+0x138>)
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	069c      	lsls	r4, r3, #26
 8001ce8:	d509      	bpl.n	8001cfe <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
 8001cea:	4b2f      	ldr	r3, [pc, #188]	; (8001da8 <mem_manage_fault+0x148>)
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e9cd 3300 	strd	r3, r3, [sp]
 8001cf4:	4927      	ldr	r1, [pc, #156]	; (8001d94 <mem_manage_fault+0x134>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fad1 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001cfe:	4c26      	ldr	r4, [pc, #152]	; (8001d98 <mem_manage_fault+0x138>)
 8001d00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d02:	06d8      	lsls	r0, r3, #27
 8001d04:	d436      	bmi.n	8001d74 <mem_manage_fault+0x114>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8001d06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001d08:	0799      	lsls	r1, r3, #30
 8001d0a:	d433      	bmi.n	8001d74 <mem_manage_fault+0x114>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8001d0c:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <mem_manage_fault+0x138>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001d12:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8001d14:	bf42      	ittt	mi
 8001d16:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
 8001d18:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
 8001d1c:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001d1e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001d20:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001d24:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001d26:	2300      	movs	r3, #0
 8001d28:	7033      	strb	r3, [r6, #0]
}
 8001d2a:	b005      	add	sp, #20
 8001d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
 8001d30:	2400      	movs	r4, #0
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <mem_manage_fault+0x14c>)
 8001d34:	9302      	str	r3, [sp, #8]
 8001d36:	e9cd 4400 	strd	r4, r4, [sp]
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	4915      	ldr	r1, [pc, #84]	; (8001d94 <mem_manage_fault+0x134>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4620      	mov	r0, r4
 8001d42:	f002 faad 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 8001d46:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8001d48:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d4a:	061b      	lsls	r3, r3, #24
 8001d4c:	d5b9      	bpl.n	8001cc2 <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <mem_manage_fault+0x150>)
 8001d50:	4910      	ldr	r1, [pc, #64]	; (8001d94 <mem_manage_fault+0x134>)
 8001d52:	9703      	str	r7, [sp, #12]
 8001d54:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001d58:	9400      	str	r4, [sp, #0]
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f002 fa9e 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
 8001d64:	f1b9 0f00 	cmp.w	r9, #0
 8001d68:	d0ad      	beq.n	8001cc6 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001d6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d70:	62ab      	str	r3, [r5, #40]	; 0x28
 8001d72:	e7a8      	b.n	8001cc6 <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001d74:	6863      	ldr	r3, [r4, #4]
 8001d76:	051a      	lsls	r2, r3, #20
 8001d78:	d5c8      	bpl.n	8001d0c <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8001d7a:	4641      	mov	r1, r8
 8001d7c:	4638      	mov	r0, r7
 8001d7e:	f7ff fe17 	bl	80019b0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d0c2      	beq.n	8001d0c <mem_manage_fault+0xac>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001d86:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	e7bf      	b.n	8001d0e <mem_manage_fault+0xae>
 8001d8e:	bf00      	nop
 8001d90:	0800549e 	.word	0x0800549e
 8001d94:	08004e68 	.word	0x08004e68
 8001d98:	e000ed00 	.word	0xe000ed00
 8001d9c:	080054b4 	.word	0x080054b4
 8001da0:	0800532e 	.word	0x0800532e
 8001da4:	08005515 	.word	0x08005515
 8001da8:	080053a2 	.word	0x080053a2
 8001dac:	080054e7 	.word	0x080054e7
 8001db0:	080054ff 	.word	0x080054ff

08001db4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001db8:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <z_arm_fault+0x1d0>)
 8001dba:	685f      	ldr	r7, [r3, #4]
{
 8001dbc:	b090      	sub	sp, #64	; 0x40
 8001dbe:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001dc0:	f3c7 0408 	ubfx	r4, r7, #0, #9
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001dce:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 8001dd2:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 8001dd6:	d10c      	bne.n	8001df2 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8001dd8:	f002 000c 	and.w	r0, r2, #12
 8001ddc:	2808      	cmp	r0, #8
 8001dde:	d119      	bne.n	8001e14 <z_arm_fault+0x60>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8001de0:	4a69      	ldr	r2, [pc, #420]	; (8001f88 <z_arm_fault+0x1d4>)
 8001de2:	496a      	ldr	r1, [pc, #424]	; (8001f8c <z_arm_fault+0x1d8>)
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	2201      	movs	r2, #1
 8001dee:	f002 fa57 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
 8001df2:	2600      	movs	r6, #0
		return NULL;
 8001df4:	4635      	mov	r5, r6
	*recoverable = false;
 8001df6:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
 8001dfa:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
 8001dfc:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	f200 80a6 	bhi.w	8001f52 <z_arm_fault+0x19e>
 8001e06:	e8df f003 	tbb	[pc, r3]
 8001e0a:	9a0b      	.short	0x9a0b
 8001e0c:	a4a4969e 	.word	0xa4a4969e
 8001e10:	a2a4a4a4 	.word	0xa2a4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001e14:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8001e16:	bf46      	itte	mi
 8001e18:	460d      	movmi	r5, r1
	*nested_exc = false;
 8001e1a:	461e      	movmi	r6, r3
			*nested_exc = true;
 8001e1c:	2601      	movpl	r6, #1
 8001e1e:	e7ea      	b.n	8001df6 <z_arm_fault+0x42>
	PR_FAULT_INFO("***** HARD FAULT *****");
 8001e20:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <z_arm_fault+0x1dc>)
 8001e22:	495a      	ldr	r1, [pc, #360]	; (8001f8c <z_arm_fault+0x1d8>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001e24:	4f57      	ldr	r7, [pc, #348]	; (8001f84 <z_arm_fault+0x1d0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
 8001e26:	f8cd 8000 	str.w	r8, [sp]
 8001e2a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2201      	movs	r2, #1
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 fa34 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
 8001e38:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001e3c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001e3e:	f014 0402 	ands.w	r4, r4, #2
 8001e42:	d005      	beq.n	8001e50 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
 8001e44:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <z_arm_fault+0x1e0>)
	PR_FAULT_INFO(
 8001e46:	f8cd 8000 	str.w	r8, [sp]
 8001e4a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8001e4e:	e006      	b.n	8001e5e <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da0b      	bge.n	8001e6e <z_arm_fault+0xba>
		PR_EXC("  Debug event");
 8001e56:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <z_arm_fault+0x1e4>)
 8001e58:	9400      	str	r4, [sp, #0]
 8001e5a:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
 8001e5e:	2300      	movs	r3, #0
 8001e60:	494a      	ldr	r1, [pc, #296]	; (8001f8c <z_arm_fault+0x1d8>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 fa1b 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	e03a      	b.n	8001ee4 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	d5fa      	bpl.n	8001e6a <z_arm_fault+0xb6>
		PR_EXC("  Fault escalation (see below)");
 8001e74:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <z_arm_fault+0x1e8>)
 8001e76:	4945      	ldr	r1, [pc, #276]	; (8001f8c <z_arm_fault+0x1d8>)
 8001e78:	9400      	str	r4, [sp, #0]
 8001e7a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4623      	mov	r3, r4
 8001e82:	4620      	mov	r0, r4
 8001e84:	f002 fa0c 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8001e88:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8001e8a:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e96:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001e9a:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8001e9c:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ea6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001eaa:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001eae:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d009      	beq.n	8001eca <z_arm_fault+0x116>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	b373      	cbz	r3, 8001f1a <z_arm_fault+0x166>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001ebc:	f10d 021f 	add.w	r2, sp, #31
 8001ec0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	f7ff fecc 	bl	8001c60 <mem_manage_fault>
 8001ec8:	e037      	b.n	8001f3a <z_arm_fault+0x186>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8001eca:	682b      	ldr	r3, [r5, #0]
 8001ecc:	9303      	str	r3, [sp, #12]
 8001ece:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <z_arm_fault+0x1ec>)
 8001ed0:	9400      	str	r4, [sp, #0]
 8001ed2:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4623      	mov	r3, r4
 8001eda:	492c      	ldr	r1, [pc, #176]	; (8001f8c <z_arm_fault+0x1d8>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	f002 f9df 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
 8001ee2:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8001ee4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001ee8:	b9a3      	cbnz	r3, 8001f14 <z_arm_fault+0x160>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8001eea:	2220      	movs	r2, #32
 8001eec:	4629      	mov	r1, r5
 8001eee:	eb0d 0002 	add.w	r0, sp, r2
 8001ef2:	f002 fa05 	bl	8004300 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8001ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ef8:	2e00      	cmp	r6, #0
 8001efa:	d03e      	beq.n	8001f7a <z_arm_fault+0x1c6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8001efc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f00:	b922      	cbnz	r2, 8001f0c <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8001f02:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001f06:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001f0a:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
 8001f0c:	a908      	add	r1, sp, #32
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff fc40 	bl	8001794 <z_arm_fatal_error>
}
 8001f14:	b010      	add	sp, #64	; 0x40
 8001f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001f20:	d005      	beq.n	8001f2e <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
 8001f22:	f10d 011f 	add.w	r1, sp, #31
 8001f26:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8001f28:	f7ff fd90 	bl	8001a4c <bus_fault.constprop.0>
 8001f2c:	e005      	b.n	8001f3a <z_arm_fault+0x186>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d399      	bcc.n	8001e6a <z_arm_fault+0xb6>
			reason = usage_fault(esf);
 8001f36:	f7ff fe17 	bl	8001b68 <usage_fault.constprop.0>
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	e7d2      	b.n	8001ee4 <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
 8001f3e:	f10d 021f 	add.w	r2, sp, #31
 8001f42:	2100      	movs	r1, #0
 8001f44:	e7bd      	b.n	8001ec2 <z_arm_fault+0x10e>
		reason = bus_fault(esf, 0, recoverable);
 8001f46:	f10d 011f 	add.w	r1, sp, #31
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	e7ec      	b.n	8001f28 <z_arm_fault+0x174>
	PR_FAULT_INFO(
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <z_arm_fault+0x1f0>)
 8001f50:	e779      	b.n	8001e46 <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
 8001f52:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <z_arm_fault+0x1f4>)
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <z_arm_fault+0x1f8>)
 8001f56:	490d      	ldr	r1, [pc, #52]	; (8001f8c <z_arm_fault+0x1d8>)
 8001f58:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
 8001f5c:	bf18      	it	ne
 8001f5e:	4613      	movne	r3, r2
 8001f60:	3c10      	subs	r4, #16
 8001f62:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <z_arm_fault+0x1fc>)
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e9cd 3300 	strd	r3, r3, [sp]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 f994 	bl	80042a0 <z_log_msg_runtime_create.constprop.0>
}
 8001f78:	e777      	b.n	8001e6a <z_arm_fault+0xb6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001f7a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	e7c2      	b.n	8001f0a <z_arm_fault+0x156>
 8001f84:	e000ed00 	.word	0xe000ed00
 8001f88:	08005562 	.word	0x08005562
 8001f8c:	08004e68 	.word	0x08004e68
 8001f90:	0800558d 	.word	0x0800558d
 8001f94:	080055a4 	.word	0x080055a4
 8001f98:	080055c5 	.word	0x080055c5
 8001f9c:	080055d3 	.word	0x080055d3
 8001fa0:	080055f2 	.word	0x080055f2
 8001fa4:	0800560e 	.word	0x0800560e
 8001fa8:	08005549 	.word	0x08005549
 8001fac:	08005534 	.word	0x08005534
 8001fb0:	08005632 	.word	0x08005632

08001fb4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001fb4:	4a02      	ldr	r2, [pc, #8]	; (8001fc0 <z_arm_fault_init+0xc>)
 8001fb6:	6953      	ldr	r3, [r2, #20]
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001fc4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001fc8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001fcc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001fce:	4672      	mov	r2, lr
	bl z_arm_fault
 8001fd0:	f7ff fef0 	bl	8001db4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8001fd4:	bd01      	pop	{r0, pc}
 8001fd6:	bf00      	nop

08001fd8 <z_arm_interrupt_init>:
 8001fd8:	4804      	ldr	r0, [pc, #16]	; (8001fec <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2110      	movs	r1, #16
 8001fde:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	2b53      	cmp	r3, #83	; 0x53
 8001fe4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001fe8:	d1f9      	bne.n	8001fde <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001ff0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001ff2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001ff8:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8001ffc:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001ffe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8002002:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8002006:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002008:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800200a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800200e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8002012:	f7ff fc39 	bl	8001888 <z_arm_prep_c>
 8002016:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002018:	200002c0 	.word	0x200002c0

0800201c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <z_impl_k_thread_abort+0x24>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4283      	cmp	r3, r0
 8002022:	d10b      	bne.n	800203c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002024:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002028:	b143      	cbz	r3, 800203c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <z_impl_k_thread_abort+0x28>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002032:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8002034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 800203c:	f001 be2a 	b.w	8003c94 <z_thread_abort>
 8002040:	20000274 	.word	0x20000274
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002048:	4b02      	ldr	r3, [pc, #8]	; (8002054 <z_arm_configure_static_mpu_regions+0xc>)
 800204a:	4a03      	ldr	r2, [pc, #12]	; (8002058 <z_arm_configure_static_mpu_regions+0x10>)
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <z_arm_configure_static_mpu_regions+0x14>)
 800204e:	2101      	movs	r1, #1
 8002050:	f000 b886 	b.w	8002160 <arm_core_mpu_configure_static_mpu_regions>
 8002054:	20010000 	.word	0x20010000
 8002058:	20000000 	.word	0x20000000
 800205c:	08004f00 	.word	0x08004f00

08002060 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002060:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8002064:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 8002066:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002070:	4618      	mov	r0, r3
 8002072:	2101      	movs	r1, #1
 8002074:	f000 b87e 	b.w	8002174 <arm_core_mpu_configure_dynamic_mpu_regions>
 8002078:	20000194 	.word	0x20000194
 800207c:	150b0000 	.word	0x150b0000

08002080 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8002082:	4e28      	ldr	r6, [pc, #160]	; (8002124 <mpu_configure_regions+0xa4>)
 8002084:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8002086:	2500      	movs	r5, #0
 8002088:	428d      	cmp	r5, r1
 800208a:	da15      	bge.n	80020b8 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
 800208c:	6844      	ldr	r4, [r0, #4]
 800208e:	2c00      	cmp	r4, #0
 8002090:	d045      	beq.n	800211e <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8002092:	b1d3      	cbz	r3, 80020ca <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8002094:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8002098:	ea14 0f0c 	tst.w	r4, ip
 800209c:	d00f      	beq.n	80020be <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <mpu_configure_regions+0xa8>)
 80020a0:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80020a2:	9302      	str	r3, [sp, #8]
 80020a4:	2300      	movs	r3, #0
 80020a6:	2201      	movs	r2, #1
 80020a8:	e9cd 3300 	strd	r3, r3, [sp]
 80020ac:	491f      	ldr	r1, [pc, #124]	; (800212c <mpu_configure_regions+0xac>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 f906 	bl	80042c0 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
 80020b4:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80020b8:	4610      	mov	r0, r2
 80020ba:	b005      	add	sp, #20
 80020bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
 80020be:	2c1f      	cmp	r4, #31
 80020c0:	d9ed      	bls.n	800209e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
 80020c2:	6807      	ldr	r7, [r0, #0]
		&&
 80020c4:	ea1c 0f07 	tst.w	ip, r7
 80020c8:	d1e9      	bne.n	800209e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80020ca:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80020cc:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80020ce:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80020d2:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
 80020d6:	d910      	bls.n	80020fa <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
 80020d8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80020dc:	d80f      	bhi.n	80020fe <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80020de:	3c01      	subs	r4, #1
 80020e0:	fab4 f484 	clz	r4, r4
 80020e4:	f1c4 041f 	rsb	r4, r4, #31
 80020e8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80020ea:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80020ee:	ea4c 0c04 	orr.w	ip, ip, r4
 80020f2:	d906      	bls.n	8002102 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <mpu_configure_regions+0xb0>)
 80020f6:	9203      	str	r2, [sp, #12]
 80020f8:	e7d3      	b.n	80020a2 <mpu_configure_regions+0x22>
		return REGION_32B;
 80020fa:	2408      	movs	r4, #8
 80020fc:	e7f5      	b.n	80020ea <mpu_configure_regions+0x6a>
		return REGION_4G;
 80020fe:	243e      	movs	r4, #62	; 0x3e
 8002100:	e7f3      	b.n	80020ea <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002102:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
 8002106:	4314      	orrs	r4, r2
 8002108:	f044 0410 	orr.w	r4, r4, #16
 800210c:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002110:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002114:	f04c 0401 	orr.w	r4, ip, #1
 8002118:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
 800211c:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
 800211e:	3501      	adds	r5, #1
 8002120:	300c      	adds	r0, #12
 8002122:	e7b1      	b.n	8002088 <mpu_configure_regions+0x8>
 8002124:	e000ed00 	.word	0xe000ed00
 8002128:	08005649 	.word	0x08005649
 800212c:	08004e60 	.word	0x08004e60
 8002130:	0800566c 	.word	0x0800566c

08002134 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <arm_core_mpu_enable+0x14>)
 8002136:	2205      	movs	r2, #5
 8002138:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 800213c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002140:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800214c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8002150:	4b02      	ldr	r3, [pc, #8]	; (800215c <arm_core_mpu_disable+0x10>)
 8002152:	2200      	movs	r2, #0
 8002154:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8002160:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8002162:	4c03      	ldr	r4, [pc, #12]	; (8002170 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8002164:	2301      	movs	r3, #1
 8002166:	7822      	ldrb	r2, [r4, #0]
 8002168:	f7ff ff8a 	bl	8002080 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800216c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 800216e:	bd10      	pop	{r4, pc}
 8002170:	200002ab 	.word	0x200002ab

08002174 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 8002174:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8002178:	2300      	movs	r3, #0
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	f7ff ff80 	bl	8002080 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002180:	f110 0f16 	cmn.w	r0, #22
 8002184:	d003      	beq.n	800218e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8002188:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800218a:	2807      	cmp	r0, #7
 800218c:	dd00      	ble.n	8002190 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 800218e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8002190:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 8002194:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8002198:	3001      	adds	r0, #1
 800219a:	e7f6      	b.n	800218a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 800219c:	200002ab 	.word	0x200002ab
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80021a4:	4914      	ldr	r1, [pc, #80]	; (80021f8 <z_arm_mpu_init+0x54>)
 80021a6:	6808      	ldr	r0, [r1, #0]
 80021a8:	2808      	cmp	r0, #8
{
 80021aa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80021ac:	d821      	bhi.n	80021f2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80021ae:	f7ff ffcd 	bl	800214c <arm_core_mpu_disable>
 80021b2:	4c12      	ldr	r4, [pc, #72]	; (80021fc <z_arm_mpu_init+0x58>)
 80021b4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80021b6:	2200      	movs	r2, #0
 80021b8:	4290      	cmp	r0, r2
 80021ba:	f101 010c 	add.w	r1, r1, #12
 80021be:	d105      	bne.n	80021cc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <z_arm_mpu_init+0x5c>)
 80021c2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80021c4:	f7ff ffb6 	bl	8002134 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80021c8:	2000      	movs	r0, #0
}
 80021ca:	bd10      	pop	{r4, pc}
 80021cc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80021d0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80021d4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80021d8:	4313      	orrs	r3, r2
 80021da:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80021de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80021e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80021ee:	3201      	adds	r2, #1
 80021f0:	e7e2      	b.n	80021b8 <z_arm_mpu_init+0x14>
		return -1;
 80021f2:	f04f 30ff 	mov.w	r0, #4294967295
 80021f6:	e7e8      	b.n	80021ca <z_arm_mpu_init+0x26>
 80021f8:	08004f0c 	.word	0x08004f0c
 80021fc:	e000ed00 	.word	0xe000ed00
 8002200:	200002ab 	.word	0x200002ab

08002204 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 8002204:	4b01      	ldr	r3, [pc, #4]	; (800220c <__stdout_hook_install+0x8>)
 8002206:	6018      	str	r0, [r3, #0]
}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000008 	.word	0x20000008

08002210 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8002210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002214:	4f0d      	ldr	r7, [pc, #52]	; (800224c <__stm32_exti_isr.isra.0+0x3c>)
 8002216:	4604      	mov	r4, r0
 8002218:	460e      	mov	r6, r1
 800221a:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800221c:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8002220:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8002224:	42b4      	cmp	r4, r6
 8002226:	db01      	blt.n	800222c <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8002228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800222c:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800222e:	fa08 f304 	lsl.w	r3, r8, r4
 8002232:	ea33 0202 	bics.w	r2, r3, r2
 8002236:	d107      	bne.n	8002248 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002238:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 800223a:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800223e:	b11b      	cbz	r3, 8002248 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8002240:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8002244:	4620      	mov	r0, r4
 8002246:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8002248:	3401      	adds	r4, #1
 800224a:	e7eb      	b.n	8002224 <__stm32_exti_isr.isra.0+0x14>
 800224c:	40010400 	.word	0x40010400

08002250 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8002252:	2301      	movs	r3, #1
 8002254:	6811      	ldr	r1, [r2, #0]
 8002256:	4083      	lsls	r3, r0
 8002258:	430b      	orrs	r3, r1
 800225a:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <stm32_exti_enable+0x18>)
 800225e:	5618      	ldrsb	r0, [r3, r0]
 8002260:	f7ff bae8 	b.w	8001834 <arch_irq_enable>
 8002264:	40010400 	.word	0x40010400
 8002268:	080056bf 	.word	0x080056bf

0800226c <stm32_exti_disable>:
	if (line < 32) {
 800226c:	281f      	cmp	r0, #31
 800226e:	dc06      	bgt.n	800227e <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002270:	4903      	ldr	r1, [pc, #12]	; (8002280 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8002272:	2201      	movs	r2, #1
 8002274:	680b      	ldr	r3, [r1, #0]
 8002276:	4082      	lsls	r2, r0
 8002278:	ea23 0302 	bic.w	r3, r3, r2
 800227c:	600b      	str	r3, [r1, #0]
}
 800227e:	4770      	bx	lr
 8002280:	40010400 	.word	0x40010400

08002284 <stm32_exti_trigger>:
	switch (trigger) {
 8002284:	2903      	cmp	r1, #3
 8002286:	d82a      	bhi.n	80022de <stm32_exti_trigger+0x5a>
 8002288:	e8df f001 	tbb	[pc, r1]
 800228c:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8002292:	2201      	movs	r2, #1
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	4082      	lsls	r2, r0
 8002298:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800229c:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800229e:	68d9      	ldr	r1, [r3, #12]
 80022a0:	ea21 0202 	bic.w	r2, r1, r2
 80022a4:	60da      	str	r2, [r3, #12]
}
 80022a6:	4770      	bx	lr
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80022aa:	2201      	movs	r2, #1
 80022ac:	6899      	ldr	r1, [r3, #8]
 80022ae:	4082      	lsls	r2, r0
 80022b0:	4311      	orrs	r1, r2
 80022b2:	e7f3      	b.n	800229c <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80022b6:	2201      	movs	r2, #1
 80022b8:	68d9      	ldr	r1, [r3, #12]
 80022ba:	4082      	lsls	r2, r0
 80022bc:	4311      	orrs	r1, r2
 80022be:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80022c0:	6899      	ldr	r1, [r3, #8]
 80022c2:	ea21 0202 	bic.w	r2, r1, r2
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80022ca:	2301      	movs	r3, #1
 80022cc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <stm32_exti_trigger+0x5c>)
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	4302      	orrs	r2, r0
 80022d6:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	4310      	orrs	r0, r2
 80022dc:	60d8      	str	r0, [r3, #12]
}
 80022de:	4770      	bx	lr
 80022e0:	40010400 	.word	0x40010400

080022e4 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 80022e4:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <stm32_exti_set_callback+0x20>)
{
 80022e8:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 80022ea:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80022ee:	b928      	cbnz	r0, 80022fc <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80022f0:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 80022f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80022f8:	605a      	str	r2, [r3, #4]

	return 0;
}
 80022fa:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80022fc:	f06f 000f 	mvn.w	r0, #15
 8002300:	e7fb      	b.n	80022fa <stm32_exti_set_callback+0x16>
 8002302:	bf00      	nop
 8002304:	200001a0 	.word	0x200001a0

08002308 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <stm32_exti_unset_callback+0x10>)
 800230a:	2200      	movs	r2, #0
 800230c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8002310:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002314:	605a      	str	r2, [r3, #4]
}
 8002316:	4770      	bx	lr
 8002318:	200001a0 	.word	0x200001a0

0800231c <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <LL_RCC_HSI_IsReady+0xc>)
 800231e:	6818      	ldr	r0, [r3, #0]
}
 8002320:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000

0800232c <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 800232c:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <stm32_clock_control_get_subsys_rate+0x7c>)
 8002330:	6818      	ldr	r0, [r3, #0]
	/* AHB3 bus exists, but w/o dedicated prescaler */
	uint32_t ahb3_clock = ahb_clock;
#endif

#if defined(STM32_SRC_PCLK)
	if (pclken->bus == STM32_SRC_PCLK) {
 8002332:	680b      	ldr	r3, [r1, #0]
 8002334:	2b07      	cmp	r3, #7
{
 8002336:	4614      	mov	r4, r2
	if (pclken->bus == STM32_SRC_PCLK) {
 8002338:	d015      	beq.n	8002366 <stm32_clock_control_get_subsys_rate+0x3a>
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800233a:	2b0a      	cmp	r3, #10
 800233c:	d80a      	bhi.n	8002354 <stm32_clock_control_get_subsys_rate+0x28>
 800233e:	b193      	cbz	r3, 8002366 <stm32_clock_control_get_subsys_rate+0x3a>
 8002340:	3b01      	subs	r3, #1
 8002342:	2b09      	cmp	r3, #9
 8002344:	d80f      	bhi.n	8002366 <stm32_clock_control_get_subsys_rate+0x3a>
 8002346:	e8df f003 	tbb	[pc, r3]
 800234a:	0e2d      	.short	0x0e2d
 800234c:	160e1515 	.word	0x160e1515
 8002350:	2721190e 	.word	0x2721190e
 8002354:	2b58      	cmp	r3, #88	; 0x58
 8002356:	d00e      	beq.n	8002376 <stm32_clock_control_get_subsys_rate+0x4a>
 8002358:	d808      	bhi.n	800236c <stm32_clock_control_get_subsys_rate+0x40>
 800235a:	2b4c      	cmp	r3, #76	; 0x4c
 800235c:	d00b      	beq.n	8002376 <stm32_clock_control_get_subsys_rate+0x4a>
 800235e:	2b50      	cmp	r3, #80	; 0x50
 8002360:	d009      	beq.n	8002376 <stm32_clock_control_get_subsys_rate+0x4a>
 8002362:	2b48      	cmp	r3, #72	; 0x48
 8002364:	d007      	beq.n	8002376 <stm32_clock_control_get_subsys_rate+0x4a>
 8002366:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800236a:	e006      	b.n	800237a <stm32_clock_control_get_subsys_rate+0x4e>
 800236c:	2b5c      	cmp	r3, #92	; 0x5c
 800236e:	d002      	beq.n	8002376 <stm32_clock_control_get_subsys_rate+0x4a>
 8002370:	2b60      	cmp	r3, #96	; 0x60
 8002372:	e7f7      	b.n	8002364 <stm32_clock_control_get_subsys_rate+0x38>
 8002374:	2000      	movs	r0, #0
	case STM32_CLOCK_BUS_AHB2:
#endif
#if defined(STM32_CLOCK_BUS_IOP)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8002376:	6020      	str	r0, [r4, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8002378:	2000      	movs	r0, #0
}
 800237a:	bd10      	pop	{r4, pc}
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 800237c:	f000 f8a2 	bl	80024c4 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 8002380:	2314      	movs	r3, #20
 8002382:	4358      	muls	r0, r3
 8002384:	2307      	movs	r3, #7
 8002386:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 800238a:	e7f4      	b.n	8002376 <stm32_clock_control_get_subsys_rate+0x4a>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 800238c:	f000 f89a 	bl	80024c4 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 8002390:	2314      	movs	r3, #20
 8002392:	4358      	muls	r0, r3
 8002394:	0840      	lsrs	r0, r0, #1
		break;
 8002396:	e7ee      	b.n	8002376 <stm32_clock_control_get_subsys_rate+0x4a>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8002398:	f000 f894 	bl	80024c4 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 800239c:	2314      	movs	r3, #20
 800239e:	4358      	muls	r0, r3
 80023a0:	0880      	lsrs	r0, r0, #2
		break;
 80023a2:	e7e8      	b.n	8002376 <stm32_clock_control_get_subsys_rate+0x4a>
		break;
 80023a4:	4801      	ldr	r0, [pc, #4]	; (80023ac <stm32_clock_control_get_subsys_rate+0x80>)
 80023a6:	e7e6      	b.n	8002376 <stm32_clock_control_get_subsys_rate+0x4a>
 80023a8:	20000030 	.word	0x20000030
 80023ac:	00f42400 	.word	0x00f42400

080023b0 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023b2:	4c3f      	ldr	r4, [pc, #252]	; (80024b0 <stm32_clock_control_init+0x100>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80023b4:	4e3f      	ldr	r6, [pc, #252]	; (80024b4 <stm32_clock_control_init+0x104>)
	config_enable_default_clocks();
 80023b6:	f000 f89b 	bl	80024f0 <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 80023ba:	f000 fdff 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 80023be:	68a3      	ldr	r3, [r4, #8]
 80023c0:	4a3d      	ldr	r2, [pc, #244]	; (80024b8 <stm32_clock_control_init+0x108>)
 80023c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023c6:	5cd3      	ldrb	r3, [r2, r3]
 80023c8:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 80023cc:	42b5      	cmp	r5, r6
 80023ce:	d802      	bhi.n	80023d6 <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 80023d0:	483a      	ldr	r0, [pc, #232]	; (80024bc <stm32_clock_control_init+0x10c>)
 80023d2:	f000 ffcb 	bl	800336c <LL_SetFlashLatency>
		if (LL_RCC_HSI_IsReady() != 1) {
 80023d6:	f7ff ffa1 	bl	800231c <LL_RCC_HSI_IsReady>
 80023da:	2801      	cmp	r0, #1
 80023dc:	d007      	beq.n	80023ee <stm32_clock_control_init+0x3e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e4:	6023      	str	r3, [r4, #0]
			while (LL_RCC_HSI_IsReady() != 1) {
 80023e6:	f7ff ff99 	bl	800231c <LL_RCC_HSI_IsReady>
 80023ea:	2801      	cmp	r0, #1
 80023ec:	d1fb      	bne.n	80023e6 <stm32_clock_control_init+0x36>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023ee:	68a3      	ldr	r3, [r4, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d11a      	bne.n	800242e <stm32_clock_control_init+0x7e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023f8:	68a3      	ldr	r3, [r4, #8]
 80023fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023fe:	60a3      	str	r3, [r4, #8]
	if (LL_RCC_HSI_IsReady() != 1) {
 8002400:	f7ff ff8c 	bl	800231c <LL_RCC_HSI_IsReady>
 8002404:	2801      	cmp	r0, #1
 8002406:	d007      	beq.n	8002418 <stm32_clock_control_init+0x68>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6023      	str	r3, [r4, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8002410:	f7ff ff84 	bl	800231c <LL_RCC_HSI_IsReady>
 8002414:	2801      	cmp	r0, #1
 8002416:	d1fb      	bne.n	8002410 <stm32_clock_control_init+0x60>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002418:	68a3      	ldr	r3, [r4, #8]
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002424:	68a3      	ldr	r3, [r4, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800242a:	2b04      	cmp	r3, #4
 800242c:	d1fa      	bne.n	8002424 <stm32_clock_control_init+0x74>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002434:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, pllp(STM32_PLL_P_DIVISOR));
 8002436:	68e3      	ldr	r3, [r4, #12]
 8002438:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800243c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002440:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002444:	60e3      	str	r3, [r4, #12]
	RCC_PLLP_ENABLE();
 8002446:	68e3      	ldr	r3, [r4, #12]
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	60e3      	str	r3, [r4, #12]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ, pllq(STM32_PLL_Q_DIVISOR));
 800244e:	68e3      	ldr	r3, [r4, #12]
 8002450:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002454:	60e3      	str	r3, [r4, #12]
	RCC_PLLQ_ENABLE();
 8002456:	68e3      	ldr	r3, [r4, #12]
 8002458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800245c:	60e3      	str	r3, [r4, #12]
	config_pll_sysclock();
 800245e:	f000 f835 	bl	80024cc <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002468:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	d5fc      	bpl.n	800246a <stm32_clock_control_init+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002470:	68a3      	ldr	r3, [r4, #8]
 8002472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002476:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002478:	68a3      	ldr	r3, [r4, #8]
 800247a:	f043 0303 	orr.w	r3, r3, #3
 800247e:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002480:	68a3      	ldr	r3, [r4, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d1fa      	bne.n	8002480 <stm32_clock_control_init+0xd0>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 800248a:	42b5      	cmp	r5, r6
 800248c:	d902      	bls.n	8002494 <stm32_clock_control_init+0xe4>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 800248e:	480b      	ldr	r0, [pc, #44]	; (80024bc <stm32_clock_control_init+0x10c>)
 8002490:	f000 ff6c 	bl	800336c <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <stm32_clock_control_init+0x110>)
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <stm32_clock_control_init+0x10c>)
 8002498:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800249a:	68a3      	ldr	r3, [r4, #8]
 800249c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024a0:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80024a2:	68a3      	ldr	r3, [r4, #8]
 80024a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80024a8:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80024aa:	2000      	movs	r0, #0
 80024ac:	bd70      	pop	{r4, r5, r6, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	04c4b3ff 	.word	0x04c4b3ff
 80024b8:	080058d8 	.word	0x080058d8
 80024bc:	04c4b400 	.word	0x04c4b400
 80024c0:	20000030 	.word	0x20000030

080024c4 <get_pllsrc_frequency>:
#endif
	}

	__ASSERT(0, "Invalid source");
	return 0;
}
 80024c4:	4800      	ldr	r0, [pc, #0]	; (80024c8 <get_pllsrc_frequency+0x4>)
 80024c6:	4770      	bx	lr
 80024c8:	00f42400 	.word	0x00f42400

080024cc <config_pll_sysclock>:
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <config_pll_sysclock+0x18>)
 80024ce:	4906      	ldr	r1, [pc, #24]	; (80024e8 <config_pll_sysclock+0x1c>)
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4011      	ands	r1, r2
 80024d4:	4a05      	ldr	r2, [pc, #20]	; (80024ec <config_pll_sysclock+0x20>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80024e0:	60da      	str	r2, [r3, #12]
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllr(STM32_PLL_R_DIVISOR));

	LL_RCC_PLL_EnableDomain_SYS();
}
 80024e2:	4770      	bx	lr
 80024e4:	40021000 	.word	0x40021000
 80024e8:	f9ff808c 	.word	0xf9ff808c
 80024ec:	02001402 	.word	0x02001402

080024f0 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <config_enable_default_clocks+0x1c>)
 80024f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024f8:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80024fc:	b082      	sub	sp, #8
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002504:	9b01      	ldr	r3, [sp, #4]
#endif
#if defined(CONFIG_SOC_SERIES_STM32WBX)
	/* HW semaphore Clock enable */
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_HSEM);
#endif
}
 8002506:	b002      	add	sp, #8
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000

08002510 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8002510:	b508      	push	{r3, lr}
 8002512:	4807      	ldr	r0, [pc, #28]	; (8002530 <uart_console_init+0x20>)
 8002514:	f002 f9cd 	bl	80048b2 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 8002518:	b138      	cbz	r0, 800252a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <uart_console_init+0x24>)
 800251c:	f7ff fe72 	bl	8002204 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8002520:	4804      	ldr	r0, [pc, #16]	; (8002534 <uart_console_init+0x24>)
 8002522:	f7fe fa0f 	bl	8000944 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8002526:	2000      	movs	r0, #0
}
 8002528:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800252a:	f06f 0012 	mvn.w	r0, #18
 800252e:	e7fb      	b.n	8002528 <uart_console_init+0x18>
 8002530:	08004b40 	.word	0x08004b40
 8002534:	08002539 	.word	0x08002539

08002538 <console_out>:
	if ('\n' == c) {
 8002538:	280a      	cmp	r0, #10
{
 800253a:	b538      	push	{r3, r4, r5, lr}
 800253c:	4d07      	ldr	r5, [pc, #28]	; (800255c <console_out+0x24>)
 800253e:	4604      	mov	r4, r0
	if ('\n' == c) {
 8002540:	d104      	bne.n	800254c <console_out+0x14>
 8002542:	68ab      	ldr	r3, [r5, #8]
 8002544:	210d      	movs	r1, #13
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4628      	mov	r0, r5
 800254a:	4798      	blx	r3
 800254c:	68ab      	ldr	r3, [r5, #8]
 800254e:	4803      	ldr	r0, [pc, #12]	; (800255c <console_out+0x24>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	b2e1      	uxtb	r1, r4
 8002554:	4798      	blx	r3
}
 8002556:	4620      	mov	r0, r4
 8002558:	bd38      	pop	{r3, r4, r5, pc}
 800255a:	bf00      	nop
 800255c:	08004b40 	.word	0x08004b40

08002560 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8002560:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8002562:	6903      	ldr	r3, [r0, #16]
{
 8002564:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8002566:	6058      	str	r0, [r3, #4]
 8002568:	4d08      	ldr	r5, [pc, #32]	; (800258c <gpio_stm32_init+0x2c>)
 800256a:	4628      	mov	r0, r5
 800256c:	f002 f9a1 	bl	80048b2 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8002570:	b140      	cbz	r0, 8002584 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 8002572:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8002574:	68ab      	ldr	r3, [r5, #8]
 8002576:	310c      	adds	r1, #12
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4628      	mov	r0, r5
 800257c:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 800257e:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8002582:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8002584:	f06f 0012 	mvn.w	r0, #18
 8002588:	e7fb      	b.n	8002582 <gpio_stm32_init+0x22>
 800258a:	bf00      	nop
 800258c:	08004ab0 	.word	0x08004ab0

08002590 <gpio_stm32_pin_interrupt_configure>:
{
 8002590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002592:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8002594:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 8002598:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800259a:	6902      	ldr	r2, [r0, #16]
{
 800259c:	460c      	mov	r4, r1
 800259e:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 80025a0:	d124      	bne.n	80025ec <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80025a2:	f001 0203 	and.w	r2, r1, #3
 80025a6:	3204      	adds	r2, #4
 80025a8:	0092      	lsls	r2, r2, #2
 80025aa:	230f      	movs	r3, #15
 80025ac:	4093      	lsls	r3, r2
 80025ae:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4933      	ldr	r1, [pc, #204]	; (8002684 <gpio_stm32_pin_interrupt_configure+0xf4>)
 80025b6:	3202      	adds	r2, #2
 80025b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80025bc:	0c19      	lsrs	r1, r3, #16
 80025be:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 80025c6:	fab2 f282 	clz	r2, r2
 80025ca:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80025cc:	68b2      	ldr	r2, [r6, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d109      	bne.n	80025e6 <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 80025d2:	4620      	mov	r0, r4
 80025d4:	f7ff fe4a 	bl	800226c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff fe95 	bl	8002308 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80025de:	2100      	movs	r1, #0
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff fe4f 	bl	8002284 <stm32_exti_trigger>
	int err = 0;
 80025e6:	2000      	movs	r0, #0
}
 80025e8:	b003      	add	sp, #12
 80025ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 80025ec:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 80025f0:	d041      	beq.n	8002676 <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80025f2:	4925      	ldr	r1, [pc, #148]	; (8002688 <gpio_stm32_pin_interrupt_configure+0xf8>)
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7ff fe75 	bl	80022e4 <stm32_exti_set_callback>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d13e      	bne.n	800267c <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 80025fe:	4a23      	ldr	r2, [pc, #140]	; (800268c <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8002600:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 8002602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002606:	466b      	mov	r3, sp
 8002608:	e883 0003 	stmia.w	r3, {r0, r1}
 800260c:	4820      	ldr	r0, [pc, #128]	; (8002690 <gpio_stm32_pin_interrupt_configure+0x100>)
 800260e:	6882      	ldr	r2, [r0, #8]
 8002610:	4619      	mov	r1, r3
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	4790      	blx	r2
	if (ret != 0) {
 8002616:	b9c0      	cbnz	r0, 800264a <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8002618:	f004 0303 	and.w	r3, r4, #3
 800261c:	3304      	adds	r3, #4
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	409a      	lsls	r2, r3
 8002624:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002628:	b2d3      	uxtb	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002630:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002634:	0c11      	lsrs	r1, r2, #16
 8002636:	6898      	ldr	r0, [r3, #8]
 8002638:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8002640:	fab2 f282 	clz	r2, r2
 8002644:	4096      	lsls	r6, r2
 8002646:	4306      	orrs	r6, r0
 8002648:	609e      	str	r6, [r3, #8]
	switch (trig) {
 800264a:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 800264e:	d00e      	beq.n	800266e <gpio_stm32_pin_interrupt_configure+0xde>
 8002650:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8002654:	d00d      	beq.n	8002672 <gpio_stm32_pin_interrupt_configure+0xe2>
 8002656:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 800265a:	4259      	negs	r1, r3
 800265c:	4159      	adcs	r1, r3
 800265e:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8002660:	4620      	mov	r0, r4
 8002662:	f7ff fe0f 	bl	8002284 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8002666:	4620      	mov	r0, r4
 8002668:	f7ff fdf2 	bl	8002250 <stm32_exti_enable>
 800266c:	e7bb      	b.n	80025e6 <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 800266e:	2101      	movs	r1, #1
 8002670:	e7f6      	b.n	8002660 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8002672:	2103      	movs	r1, #3
 8002674:	e7f4      	b.n	8002660 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 8002676:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800267a:	e7b5      	b.n	80025e8 <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 800267c:	f06f 000f 	mvn.w	r0, #15
	return err;
 8002680:	e7b2      	b.n	80025e8 <gpio_stm32_pin_interrupt_configure+0x58>
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000
 8002688:	08004647 	.word	0x08004647
 800268c:	08004e98 	.word	0x08004e98
 8002690:	08004ab0 	.word	0x08004ab0

08002694 <pwm_stm32_set_cycles>:
}

static int pwm_stm32_set_cycles(const struct device *dev, uint32_t channel,
				uint32_t period_cycles, uint32_t pulse_cycles,
				pwm_flags_t flags)
{
 8002694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct pwm_stm32_config *cfg = dev->config;

	uint32_t ll_channel;
	uint32_t current_ll_channel; /* complementary output if used */

	if (channel < 1u || channel > TIMER_MAX_CH) {
 8002698:	f101 3cff 	add.w	ip, r1, #4294967295
{
 800269c:	b08d      	sub	sp, #52	; 0x34
	if (channel < 1u || channel > TIMER_MAX_CH) {
 800269e:	f1bc 0f05 	cmp.w	ip, #5
{
 80026a2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
	const struct pwm_stm32_config *cfg = dev->config;
 80026a6:	6847      	ldr	r7, [r0, #4]
{
 80026a8:	4614      	mov	r4, r2
 80026aa:	4698      	mov	r8, r3
	if (channel < 1u || channel > TIMER_MAX_CH) {
 80026ac:	d90f      	bls.n	80026ce <pwm_stm32_set_cycles+0x3a>
		LOG_ERR("Invalid channel (%d)", channel);
 80026ae:	4b74      	ldr	r3, [pc, #464]	; (8002880 <pwm_stm32_set_cycles+0x1ec>)
 80026b0:	9103      	str	r1, [sp, #12]
	 * the channel param could be the complementary one
	 */
	if ((flags & PWM_STM32_COMPLEMENTARY_MASK) == PWM_STM32_COMPLEMENTARY) {
		if (channel > ARRAY_SIZE(ch2ll_n)) {
			/* setting a flag on a channel that has not this capability */
			LOG_ERR("Channel %d has NO complementary output", channel);
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	2300      	movs	r3, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	e9cd 3300 	strd	r3, r3, [sp]
 80026bc:	4971      	ldr	r1, [pc, #452]	; (8002884 <pwm_stm32_set_cycles+0x1f0>)
 80026be:	2201      	movs	r2, #1
 80026c0:	f002 f805 	bl	80046ce <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
 80026c4:	f06f 0015 	mvn.w	r0, #21
		set_timer_compare[channel - 1u](cfg->timer, pulse_cycles);
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
	}

	return 0;
}
 80026c8:	b00d      	add	sp, #52	; 0x34
 80026ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80026d4:	d003      	beq.n	80026de <pwm_stm32_set_cycles+0x4a>
 80026d6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80026da:	f200 80ce 	bhi.w	800287a <pwm_stm32_set_cycles+0x1e6>
	ll_channel = ch2ll[channel - 1u];
 80026de:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <pwm_stm32_set_cycles+0x1f4>)
	if ((flags & PWM_STM32_COMPLEMENTARY_MASK) == PWM_STM32_COMPLEMENTARY) {
 80026e0:	f415 7980 	ands.w	r9, r5, #256	; 0x100
	ll_channel = ch2ll[channel - 1u];
 80026e4:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
	if ((flags & PWM_STM32_COMPLEMENTARY_MASK) == PWM_STM32_COMPLEMENTARY) {
 80026e8:	d00e      	beq.n	8002708 <pwm_stm32_set_cycles+0x74>
		if (channel > ARRAY_SIZE(ch2ll_n)) {
 80026ea:	2903      	cmp	r1, #3
 80026ec:	d902      	bls.n	80026f4 <pwm_stm32_set_cycles+0x60>
			LOG_ERR("Channel %d has NO complementary output", channel);
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <pwm_stm32_set_cycles+0x1f8>)
 80026f0:	9103      	str	r1, [sp, #12]
 80026f2:	e7de      	b.n	80026b2 <pwm_stm32_set_cycles+0x1e>
		current_ll_channel = ch2ll_n[channel - 1u];
 80026f4:	4b66      	ldr	r3, [pc, #408]	; (8002890 <pwm_stm32_set_cycles+0x1fc>)
 80026f6:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
	if (period_cycles == 0u) {
 80026fa:	b93c      	cbnz	r4, 800270c <pwm_stm32_set_cycles+0x78>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  CLEAR_BIT(TIMx->CCER, Channels);
 80026fc:	6a13      	ldr	r3, [r2, #32]
 80026fe:	ea23 0300 	bic.w	r3, r3, r0
 8002702:	6213      	str	r3, [r2, #32]
		return 0;
 8002704:	2000      	movs	r0, #0
 8002706:	e7df      	b.n	80026c8 <pwm_stm32_set_cycles+0x34>
		current_ll_channel = ll_channel;
 8002708:	4630      	mov	r0, r6
 800270a:	e7f6      	b.n	80026fa <pwm_stm32_set_cycles+0x66>
	if (cfg->countermode == LL_TIM_COUNTERMODE_UP) {
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	bb63      	cbnz	r3, 800276a <pwm_stm32_set_cycles+0xd6>
		period_cycles -= 1U;
 8002710:	3c01      	subs	r4, #1
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8002712:	6a13      	ldr	r3, [r2, #32]
	if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 8002714:	f005 0501 	and.w	r5, r5, #1
 8002718:	ea30 0303 	bics.w	r3, r0, r3
 800271c:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8002720:	d141      	bne.n	80027a6 <pwm_stm32_set_cycles+0x112>
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002722:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002726:	f000 809e 	beq.w	8002866 <pwm_stm32_set_cycles+0x1d2>
 800272a:	d831      	bhi.n	8002790 <pwm_stm32_set_cycles+0xfc>
 800272c:	2810      	cmp	r0, #16
 800272e:	f000 809c 	beq.w	800286a <pwm_stm32_set_cycles+0x1d6>
 8002732:	d829      	bhi.n	8002788 <pwm_stm32_set_cycles+0xf4>
 8002734:	2801      	cmp	r0, #1
 8002736:	f000 809a 	beq.w	800286e <pwm_stm32_set_cycles+0x1da>
 800273a:	2804      	cmp	r0, #4
 800273c:	bf08      	it	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	bf18      	it	ne
 8002742:	2308      	movne	r3, #8
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8002744:	4853      	ldr	r0, [pc, #332]	; (8002894 <pwm_stm32_set_cycles+0x200>)
 8002746:	6a11      	ldr	r1, [r2, #32]
 8002748:	5cc0      	ldrb	r0, [r0, r3]
 800274a:	2302      	movs	r3, #2
 800274c:	4083      	lsls	r3, r0
 800274e:	ea21 0303 	bic.w	r3, r1, r3
 8002752:	4085      	lsls	r5, r0
 8002754:	431d      	orrs	r5, r3
		set_timer_compare[channel - 1u](cfg->timer, pulse_cycles);
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <pwm_stm32_set_cycles+0x204>)
 8002758:	6215      	str	r5, [r2, #32]
 800275a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800275e:	6838      	ldr	r0, [r7, #0]
 8002760:	4641      	mov	r1, r8
 8002762:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
 8002764:	683b      	ldr	r3, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002766:	62dc      	str	r4, [r3, #44]	; 0x2c
}
 8002768:	e7cc      	b.n	8002704 <pwm_stm32_set_cycles+0x70>
	} else if (cfg->countermode == LL_TIM_COUNTERMODE_DOWN) {
 800276a:	2b10      	cmp	r3, #16
 800276c:	d102      	bne.n	8002774 <pwm_stm32_set_cycles+0xe0>
		pulse_cycles -= 1U;
 800276e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002772:	e7cd      	b.n	8002710 <pwm_stm32_set_cycles+0x7c>
		(ll_countermode == LL_TIM_COUNTERMODE_CENTER_UP) ||
 8002774:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002778:	2920      	cmp	r1, #32
 800277a:	d001      	beq.n	8002780 <pwm_stm32_set_cycles+0xec>
	return ((ll_countermode == LL_TIM_COUNTERMODE_CENTER_DOWN) ||
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d17c      	bne.n	800287a <pwm_stm32_set_cycles+0x1e6>
		pulse_cycles /= 2U;
 8002780:	ea4f 0858 	mov.w	r8, r8, lsr #1
		period_cycles /= 2U;
 8002784:	0864      	lsrs	r4, r4, #1
 8002786:	e7c4      	b.n	8002712 <pwm_stm32_set_cycles+0x7e>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002788:	2840      	cmp	r0, #64	; 0x40
 800278a:	bf08      	it	eq
 800278c:	2303      	moveq	r3, #3
 800278e:	e7d7      	b.n	8002740 <pwm_stm32_set_cycles+0xac>
 8002790:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8002794:	d06d      	beq.n	8002872 <pwm_stm32_set_cycles+0x1de>
 8002796:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800279a:	d06c      	beq.n	8002876 <pwm_stm32_set_cycles+0x1e2>
 800279c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80027a0:	bf08      	it	eq
 80027a2:	2305      	moveq	r3, #5
 80027a4:	e7cc      	b.n	8002740 <pwm_stm32_set_cycles+0xac>
		LL_TIM_OC_StructInit(&oc_init);
 80027a6:	a804      	add	r0, sp, #16
 80027a8:	f002 f878 	bl	800489c <LL_TIM_OC_StructInit>
		oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 80027ac:	2360      	movs	r3, #96	; 0x60
 80027ae:	9304      	str	r3, [sp, #16]
		if ((flags & PWM_STM32_COMPLEMENTARY_MASK) == PWM_STM32_COMPLEMENTARY) {
 80027b0:	2301      	movs	r3, #1
 80027b2:	f1b9 0f00 	cmp.w	r9, #0
 80027b6:	d016      	beq.n	80027e6 <pwm_stm32_set_cycles+0x152>
			oc_init.OCNState = LL_TIM_OCSTATE_ENABLE;
 80027b8:	9306      	str	r3, [sp, #24]
			oc_init.OCNPolarity = get_polarity(flags);
 80027ba:	9509      	str	r5, [sp, #36]	; 0x24
		oc_init.CompareValue = pulse_cycles;
 80027bc:	f8cd 801c 	str.w	r8, [sp, #28]
		if (LL_TIM_OC_Init(cfg->timer, ll_channel, &oc_init) != SUCCESS) {
 80027c0:	6838      	ldr	r0, [r7, #0]
 80027c2:	aa04      	add	r2, sp, #16
 80027c4:	4631      	mov	r1, r6
 80027c6:	f000 fc7f 	bl	80030c8 <LL_TIM_OC_Init>
 80027ca:	b178      	cbz	r0, 80027ec <pwm_stm32_set_cycles+0x158>
			LOG_ERR("Could not initialize timer channel output");
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <pwm_stm32_set_cycles+0x208>)
 80027ce:	9302      	str	r3, [sp, #8]
 80027d0:	2300      	movs	r3, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	e9cd 3300 	strd	r3, r3, [sp]
 80027d8:	492a      	ldr	r1, [pc, #168]	; (8002884 <pwm_stm32_set_cycles+0x1f0>)
 80027da:	2201      	movs	r2, #1
 80027dc:	f001 ff77 	bl	80046ce <z_log_msg_runtime_create.constprop.0>
			return -EIO;
 80027e0:	f06f 0004 	mvn.w	r0, #4
 80027e4:	e770      	b.n	80026c8 <pwm_stm32_set_cycles+0x34>
			oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 80027e6:	9305      	str	r3, [sp, #20]
			oc_init.OCPolarity = get_polarity(flags);
 80027e8:	9508      	str	r5, [sp, #32]
 80027ea:	e7e7      	b.n	80027bc <pwm_stm32_set_cycles+0x128>
		LL_TIM_EnableARRPreload(cfg->timer);
 80027ec:	683a      	ldr	r2, [r7, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	6013      	str	r3, [r2, #0]
		LL_TIM_OC_EnablePreload(cfg->timer, ll_channel);
 80027f6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80027fa:	683a      	ldr	r2, [r7, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80027fc:	d02b      	beq.n	8002856 <pwm_stm32_set_cycles+0x1c2>
 80027fe:	d81f      	bhi.n	8002840 <pwm_stm32_set_cycles+0x1ac>
 8002800:	2e10      	cmp	r6, #16
 8002802:	d02a      	beq.n	800285a <pwm_stm32_set_cycles+0x1c6>
 8002804:	d818      	bhi.n	8002838 <pwm_stm32_set_cycles+0x1a4>
 8002806:	2e01      	cmp	r6, #1
 8002808:	d004      	beq.n	8002814 <pwm_stm32_set_cycles+0x180>
 800280a:	2e04      	cmp	r6, #4
 800280c:	bf08      	it	eq
 800280e:	2001      	moveq	r0, #1
 8002810:	bf18      	it	ne
 8002812:	2008      	movne	r0, #8
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <pwm_stm32_set_cycles+0x20c>)
 8002816:	5c19      	ldrb	r1, [r3, r0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002818:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <pwm_stm32_set_cycles+0x210>)
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800281a:	3218      	adds	r2, #24
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800281c:	5c18      	ldrb	r0, [r3, r0]
 800281e:	5855      	ldr	r5, [r2, r1]
 8002820:	2308      	movs	r3, #8
 8002822:	4083      	lsls	r3, r0
 8002824:	432b      	orrs	r3, r5
 8002826:	5053      	str	r3, [r2, r1]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles);
 8002828:	683b      	ldr	r3, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800282a:	62dc      	str	r4, [r3, #44]	; 0x2c
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
 800282c:	683a      	ldr	r2, [r7, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800282e:	6953      	ldr	r3, [r2, #20]
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6153      	str	r3, [r2, #20]
 8002836:	e765      	b.n	8002704 <pwm_stm32_set_cycles+0x70>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002838:	2e40      	cmp	r6, #64	; 0x40
 800283a:	bf08      	it	eq
 800283c:	2003      	moveq	r0, #3
 800283e:	e7e7      	b.n	8002810 <pwm_stm32_set_cycles+0x17c>
 8002840:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8002844:	d00b      	beq.n	800285e <pwm_stm32_set_cycles+0x1ca>
 8002846:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 800284a:	d00a      	beq.n	8002862 <pwm_stm32_set_cycles+0x1ce>
 800284c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002850:	bf08      	it	eq
 8002852:	2005      	moveq	r0, #5
 8002854:	e7dc      	b.n	8002810 <pwm_stm32_set_cycles+0x17c>
		LL_TIM_OC_EnablePreload(cfg->timer, ll_channel);
 8002856:	2004      	movs	r0, #4
 8002858:	e7dc      	b.n	8002814 <pwm_stm32_set_cycles+0x180>
 800285a:	2002      	movs	r0, #2
 800285c:	e7da      	b.n	8002814 <pwm_stm32_set_cycles+0x180>
 800285e:	2006      	movs	r0, #6
 8002860:	e7d8      	b.n	8002814 <pwm_stm32_set_cycles+0x180>
 8002862:	2007      	movs	r0, #7
 8002864:	e7d6      	b.n	8002814 <pwm_stm32_set_cycles+0x180>
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8002866:	2304      	movs	r3, #4
 8002868:	e76c      	b.n	8002744 <pwm_stm32_set_cycles+0xb0>
 800286a:	2302      	movs	r3, #2
 800286c:	e76a      	b.n	8002744 <pwm_stm32_set_cycles+0xb0>
 800286e:	2300      	movs	r3, #0
 8002870:	e768      	b.n	8002744 <pwm_stm32_set_cycles+0xb0>
 8002872:	2306      	movs	r3, #6
 8002874:	e766      	b.n	8002744 <pwm_stm32_set_cycles+0xb0>
 8002876:	2307      	movs	r3, #7
 8002878:	e764      	b.n	8002744 <pwm_stm32_set_cycles+0xb0>
		return -ENOTSUP;
 800287a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800287e:	e723      	b.n	80026c8 <pwm_stm32_set_cycles+0x34>
 8002880:	08005714 	.word	0x08005714
 8002884:	08004e70 	.word	0x08004e70
 8002888:	08004ffc 	.word	0x08004ffc
 800288c:	08005729 	.word	0x08005729
 8002890:	08004ff0 	.word	0x08004ff0
 8002894:	08005822 	.word	0x08005822
 8002898:	08004fd8 	.word	0x08004fd8
 800289c:	08005750 	.word	0x08005750
 80028a0:	08005834 	.word	0x08005834
 80028a4:	0800582b 	.word	0x0800582b

080028a8 <pwm_stm32_init>:
	.disable_capture = pwm_stm32_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 80028a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct pwm_stm32_data *data = dev->data;
 80028ac:	6907      	ldr	r7, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 80028ae:	6845      	ldr	r5, [r0, #4]
{
 80028b0:	b08b      	sub	sp, #44	; 0x2c
 80028b2:	4e40      	ldr	r6, [pc, #256]	; (80029b4 <pwm_stm32_init+0x10c>)
 80028b4:	4630      	mov	r0, r6
 80028b6:	f001 fffc 	bl	80048b2 <z_device_is_ready>
 80028ba:	4603      	mov	r3, r0
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	if (!device_is_ready(clk)) {
 80028bc:	b968      	cbnz	r0, 80028da <pwm_stm32_init+0x32>
		LOG_ERR("clock control device not ready");
 80028be:	4a3e      	ldr	r2, [pc, #248]	; (80029b8 <pwm_stm32_init+0x110>)
 80028c0:	493e      	ldr	r1, [pc, #248]	; (80029bc <pwm_stm32_init+0x114>)
 80028c2:	9000      	str	r0, [sp, #0]
 80028c4:	e9cd 0201 	strd	r0, r2, [sp, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f001 ff00 	bl	80046ce <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
 80028ce:	f06f 0412 	mvn.w	r4, #18
#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
}
 80028d2:	4620      	mov	r0, r4
 80028d4:	b00b      	add	sp, #44	; 0x2c
 80028d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	const struct clock_control_driver_api *api =
 80028da:	f8d6 9008 	ldr.w	r9, [r6, #8]
	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 80028de:	f105 080c 	add.w	r8, r5, #12
	return api->on(dev, sys);
 80028e2:	f8d9 3000 	ldr.w	r3, [r9]
 80028e6:	4641      	mov	r1, r8
 80028e8:	4630      	mov	r0, r6
 80028ea:	4798      	blx	r3
	if (r < 0) {
 80028ec:	1e04      	subs	r4, r0, #0
 80028ee:	da0b      	bge.n	8002908 <pwm_stm32_init+0x60>
		LOG_ERR("Could not initialize clock (%d)", r);
 80028f0:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <pwm_stm32_init+0x118>)
 80028f2:	9403      	str	r4, [sp, #12]
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	2300      	movs	r3, #0
 80028f8:	e9cd 3300 	strd	r3, r3, [sp]
 80028fc:	492f      	ldr	r1, [pc, #188]	; (80029bc <pwm_stm32_init+0x114>)
 80028fe:	2201      	movs	r2, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fee4 	bl	80046ce <z_log_msg_runtime_create.constprop.0>
		return r;
 8002906:	e7e4      	b.n	80028d2 <pwm_stm32_init+0x2a>
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8002908:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800290c:	b18b      	cbz	r3, 8002932 <pwm_stm32_init+0x8a>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 800290e:	aa05      	add	r2, sp, #20
 8002910:	4641      	mov	r1, r8
 8002912:	4630      	mov	r0, r6
 8002914:	4798      	blx	r3
	if (r < 0) {
 8002916:	1e04      	subs	r4, r0, #0
 8002918:	db0d      	blt.n	8002936 <pwm_stm32_init+0x8e>
		*tim_clk = bus_clk;
 800291a:	9b05      	ldr	r3, [sp, #20]
 800291c:	603b      	str	r3, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800291e:	6968      	ldr	r0, [r5, #20]
 8002920:	aa05      	add	r2, sp, #20
 8002922:	2100      	movs	r1, #0
 8002924:	f001 ff9b 	bl	800485e <pinctrl_lookup_state>
	if (ret < 0) {
 8002928:	1e04      	subs	r4, r0, #0
 800292a:	da07      	bge.n	800293c <pwm_stm32_init+0x94>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <pwm_stm32_init+0x11c>)
 800292e:	9403      	str	r4, [sp, #12]
 8002930:	e7e0      	b.n	80028f4 <pwm_stm32_init+0x4c>
 8002932:	f06f 0457 	mvn.w	r4, #87	; 0x57
		LOG_ERR("Could not obtain timer clock (%d)", r);
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <pwm_stm32_init+0x120>)
 8002938:	9403      	str	r4, [sp, #12]
 800293a:	e7db      	b.n	80028f4 <pwm_stm32_init+0x4c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800293c:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800293e:	2200      	movs	r2, #0
 8002940:	7919      	ldrb	r1, [r3, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	f000 faf4 	bl	8002f30 <pinctrl_configure_pins>
	if (r < 0) {
 8002948:	1e04      	subs	r4, r0, #0
 800294a:	dbef      	blt.n	800292c <pwm_stm32_init+0x84>
	LL_TIM_StructInit(&init);
 800294c:	a805      	add	r0, sp, #20
 800294e:	f001 ff9c 	bl	800488a <LL_TIM_StructInit>
	init.Prescaler = cfg->prescaler;
 8002952:	686b      	ldr	r3, [r5, #4]
 8002954:	f8ad 3014 	strh.w	r3, [sp, #20]
	init.Autoreload = 0u;
 8002958:	2400      	movs	r4, #0
	init.CounterMode = cfg->countermode;
 800295a:	68ab      	ldr	r3, [r5, #8]
 800295c:	9306      	str	r3, [sp, #24]
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800295e:	e9cd 4407 	strd	r4, r4, [sp, #28]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8002962:	a905      	add	r1, sp, #20
 8002964:	6828      	ldr	r0, [r5, #0]
 8002966:	f000 fb77 	bl	8003058 <LL_TIM_Init>
 800296a:	b160      	cbz	r0, 8002986 <pwm_stm32_init+0xde>
		LOG_ERR("Could not initialize timer");
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <pwm_stm32_init+0x124>)
 800296e:	9400      	str	r4, [sp, #0]
 8002970:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002974:	4620      	mov	r0, r4
 8002976:	4623      	mov	r3, r4
 8002978:	4910      	ldr	r1, [pc, #64]	; (80029bc <pwm_stm32_init+0x114>)
 800297a:	2201      	movs	r2, #1
 800297c:	f001 fea7 	bl	80046ce <z_log_msg_runtime_create.constprop.0>
		return -EIO;
 8002980:	f06f 0404 	mvn.w	r4, #4
 8002984:	e7a5      	b.n	80028d2 <pwm_stm32_init+0x2a>
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8002986:	682b      	ldr	r3, [r5, #0]
 8002988:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <pwm_stm32_init+0x128>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <pwm_stm32_init+0xf6>
 800298e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002992:	4293      	cmp	r3, r2
 8002994:	d003      	beq.n	800299e <pwm_stm32_init+0xf6>
 8002996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800299a:	4293      	cmp	r3, r2
 800299c:	d103      	bne.n	80029a6 <pwm_stm32_init+0xfe>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800299e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
	LL_TIM_EnableCounter(cfg->timer);
 80029a6:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6013      	str	r3, [r2, #0]
	return 0;
 80029b0:	2400      	movs	r4, #0
 80029b2:	e78e      	b.n	80028d2 <pwm_stm32_init+0x2a>
 80029b4:	08004ab0 	.word	0x08004ab0
 80029b8:	0800577a 	.word	0x0800577a
 80029bc:	08004e70 	.word	0x08004e70
 80029c0:	08005799 	.word	0x08005799
 80029c4:	080057db 	.word	0x080057db
 80029c8:	080057b9 	.word	0x080057b9
 80029cc:	080057f9 	.word	0x080057f9
 80029d0:	40012c00 	.word	0x40012c00

080029d4 <uart_stm32_set_baudrate>:
	}
}
#endif /* CONFIG_PM */

static inline void uart_stm32_set_baudrate(const struct device *dev, uint32_t baud_rate)
{
 80029d4:	b530      	push	{r4, r5, lr}
					   &clock_rate) < 0) {
			LOG_ERR("Failed call clock_control_get_rate(pclken[1])");
			return;
		}
	} else {
		if (clock_control_get_rate(data->clock,
 80029d6:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 80029d8:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 80029da:	6858      	ldr	r0, [r3, #4]
	if (api->get_rate == NULL) {
 80029dc:	6883      	ldr	r3, [r0, #8]
 80029de:	68db      	ldr	r3, [r3, #12]
{
 80029e0:	460c      	mov	r4, r1
 80029e2:	b087      	sub	sp, #28
					   (clock_control_subsys_t)&config->pclken[0],
 80029e4:	6869      	ldr	r1, [r5, #4]
 80029e6:	b95b      	cbnz	r3, 8002a00 <uart_stm32_set_baudrate+0x2c>
					   &clock_rate) < 0) {
			LOG_ERR("Failed call clock_control_get_rate(pclken[0])");
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <uart_stm32_set_baudrate+0x50>)
 80029ea:	9302      	str	r3, [sp, #8]
 80029ec:	2300      	movs	r3, #0
 80029ee:	e9cd 3300 	strd	r3, r3, [sp]
 80029f2:	490d      	ldr	r1, [pc, #52]	; (8002a28 <uart_stm32_set_baudrate+0x54>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 fea3 	bl	8004742 <z_log_msg_runtime_create.constprop.0>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 80029fc:	b007      	add	sp, #28
 80029fe:	bd30      	pop	{r4, r5, pc}
	return api->get_rate(dev, sys, rate);
 8002a00:	aa05      	add	r2, sp, #20
 8002a02:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8002a04:	2800      	cmp	r0, #0
 8002a06:	dbef      	blt.n	80029e8 <uart_stm32_set_baudrate+0x14>
		LL_USART_SetOverSampling(config->usart,
 8002a08:	682a      	ldr	r2, [r5, #0]
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8002a0a:	6813      	ldr	r3, [r2, #0]
 8002a0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a10:	6013      	str	r3, [r2, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002a12:	9b05      	ldr	r3, [sp, #20]
		LL_USART_SetBaudRate(config->usart,
 8002a14:	682a      	ldr	r2, [r5, #0]
 8002a16:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8002a1a:	fbb3 f3f4 	udiv	r3, r3, r4
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	60d3      	str	r3, [r2, #12]
 8002a22:	e7eb      	b.n	80029fc <uart_stm32_set_baudrate+0x28>
 8002a24:	0800583d 	.word	0x0800583d
 8002a28:	08004e80 	.word	0x08004e80

08002a2c <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8002a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
 8002a30:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8002a34:	6844      	ldr	r4, [r0, #4]
{
 8002a36:	4607      	mov	r7, r0
	data->clock = clk;
 8002a38:	4854      	ldr	r0, [pc, #336]	; (8002b8c <uart_stm32_init+0x160>)
 8002a3a:	f8c8 0004 	str.w	r0, [r8, #4]
{
 8002a3e:	b086      	sub	sp, #24
 8002a40:	f001 ff37 	bl	80048b2 <z_device_is_ready>
 8002a44:	4603      	mov	r3, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8002a46:	b968      	cbnz	r0, 8002a64 <uart_stm32_init+0x38>
		LOG_ERR("clock control device not ready");
 8002a48:	4a51      	ldr	r2, [pc, #324]	; (8002b90 <uart_stm32_init+0x164>)
 8002a4a:	4952      	ldr	r1, [pc, #328]	; (8002b94 <uart_stm32_init+0x168>)
 8002a4c:	9000      	str	r0, [sp, #0]
 8002a4e:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f001 fe75 	bl	8004742 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
 8002a58:	f06f 0612 	mvn.w	r6, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	b006      	add	sp, #24
 8002a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8002a64:	f8d8 0004 	ldr.w	r0, [r8, #4]
	return api->on(dev, sys);
 8002a68:	6861      	ldr	r1, [r4, #4]
 8002a6a:	6883      	ldr	r3, [r0, #8]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4798      	blx	r3
	if (err != 0) {
 8002a70:	4606      	mov	r6, r0
 8002a72:	b150      	cbz	r0, 8002a8a <uart_stm32_init+0x5e>
		LOG_ERR("Could not enable (LP)UART clock");
 8002a74:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <uart_stm32_init+0x16c>)
 8002a76:	9302      	str	r3, [sp, #8]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e9cd 3300 	strd	r3, r3, [sp]
 8002a7e:	4945      	ldr	r1, [pc, #276]	; (8002b94 <uart_stm32_init+0x168>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 fe5d 	bl	8004742 <z_log_msg_runtime_create.constprop.0>
		return err;
 8002a88:	e7e8      	b.n	8002a5c <uart_stm32_init+0x30>
	ret = pinctrl_lookup_state(config, id, &state);
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	aa05      	add	r2, sp, #20
 8002a8e:	69a0      	ldr	r0, [r4, #24]
 8002a90:	f001 fee5 	bl	800485e <pinctrl_lookup_state>
	if (ret < 0) {
 8002a94:	2800      	cmp	r0, #0
 8002a96:	da01      	bge.n	8002a9c <uart_stm32_init+0x70>
 8002a98:	4606      	mov	r6, r0
 8002a9a:	e7df      	b.n	8002a5c <uart_stm32_init+0x30>
	return pinctrl_apply_state_direct(config, state);
 8002a9c:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002a9e:	4632      	mov	r2, r6
 8002aa0:	7919      	ldrb	r1, [r3, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	f000 fa44 	bl	8002f30 <pinctrl_configure_pins>
	if (err < 0) {
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	dbf5      	blt.n	8002a98 <uart_stm32_init+0x6c>
	LL_USART_Disable(config->usart);
 8002aac:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002aae:	6813      	ldr	r3, [r2, #0]
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6013      	str	r3, [r2, #0]
	LL_USART_SetTransferDirection(config->usart,
 8002ab6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8002abc:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	e842 3500 	strex	r5, r3, [r2]
 8002ac4:	2d00      	cmp	r5, #0
 8002ac6:	d1f7      	bne.n	8002ab8 <uart_stm32_init+0x8c>
	if (config->parity == 2) {
 8002ac8:	6923      	ldr	r3, [r4, #16]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d053      	beq.n	8002b76 <uart_stm32_init+0x14a>
	} else if (config->parity == 1) {
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d056      	beq.n	8002b80 <uart_stm32_init+0x154>
		if (config->parity != 0) {
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d143      	bne.n	8002b5e <uart_stm32_init+0x132>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8002ad6:	2200      	movs	r2, #0
	LL_USART_ConfigCharacter(config->usart,
 8002ad8:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8002ada:	680b      	ldr	r3, [r1, #0]
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ae4:	432a      	orrs	r2, r5
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002aea:	684b      	ldr	r3, [r1, #4]
 8002aec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002af0:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 8002af2:	7b23      	ldrb	r3, [r4, #12]
 8002af4:	b12b      	cbz	r3, 8002b02 <uart_stm32_init+0xd6>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002afa:	6893      	ldr	r3, [r2, #8]
 8002afc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b00:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8002b02:	f8d8 1000 	ldr.w	r1, [r8]
 8002b06:	4638      	mov	r0, r7
 8002b08:	f7ff ff64 	bl	80029d4 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8002b0c:	7d23      	ldrb	r3, [r4, #20]
 8002b0e:	b123      	cbz	r3, 8002b1a <uart_stm32_init+0xee>
		LL_USART_EnableHalfDuplex(config->usart);
 8002b10:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8002b12:	6893      	ldr	r3, [r2, #8]
 8002b14:	f043 0308 	orr.w	r3, r3, #8
 8002b18:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 8002b1a:	7d63      	ldrb	r3, [r4, #21]
 8002b1c:	b123      	cbz	r3, 8002b28 <uart_stm32_init+0xfc>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 8002b1e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8002b20:	6853      	ldr	r3, [r2, #4]
 8002b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b26:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 8002b28:	7da3      	ldrb	r3, [r4, #22]
 8002b2a:	b123      	cbz	r3, 8002b36 <uart_stm32_init+0x10a>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 8002b2c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 8002b2e:	6853      	ldr	r3, [r2, #4]
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 8002b36:	7de3      	ldrb	r3, [r4, #23]
 8002b38:	b123      	cbz	r3, 8002b44 <uart_stm32_init+0x118>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 8002b3a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8002b3c:	6853      	ldr	r3, [r2, #4]
 8002b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b42:	6053      	str	r3, [r2, #4]
	LL_USART_Enable(config->usart);
 8002b44:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 8002b4e:	6823      	ldr	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	0291      	lsls	r1, r2, #10
 8002b54:	d5fc      	bpl.n	8002b50 <uart_stm32_init+0x124>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	0252      	lsls	r2, r2, #9
 8002b5a:	d5fc      	bpl.n	8002b56 <uart_stm32_init+0x12a>
 8002b5c:	e77e      	b.n	8002a5c <uart_stm32_init+0x30>
			LOG_WRN("Invalid parity setting '%d'."
 8002b5e:	9303      	str	r3, [sp, #12]
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <uart_stm32_init+0x170>)
 8002b62:	490c      	ldr	r1, [pc, #48]	; (8002b94 <uart_stm32_init+0x168>)
 8002b64:	9500      	str	r5, [sp, #0]
 8002b66:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	462b      	mov	r3, r5
 8002b6e:	4628      	mov	r0, r5
 8002b70:	f001 fde7 	bl	8004742 <z_log_msg_runtime_create.constprop.0>
 8002b74:	e7af      	b.n	8002ad6 <uart_stm32_init+0xaa>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8002b7a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002b7e:	e7ab      	b.n	8002ad8 <uart_stm32_init+0xac>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8002b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8002b84:	f44f 65c0 	mov.w	r5, #1536	; 0x600
 8002b88:	e7a6      	b.n	8002ad8 <uart_stm32_init+0xac>
 8002b8a:	bf00      	nop
 8002b8c:	08004ab0 	.word	0x08004ab0
 8002b90:	0800577a 	.word	0x0800577a
 8002b94:	08004e80 	.word	0x08004e80
 8002b98:	0800586b 	.word	0x0800586b
 8002b9c:	0800588b 	.word	0x0800588b

08002ba0 <uart_stm32_configure>:
{
 8002ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8002ba4:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 8002ba6:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8002ba8:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8002baa:	2b01      	cmp	r3, #1
{
 8002bac:	460c      	mov	r4, r1
	switch (parity) {
 8002bae:	f000 8085 	beq.w	8002cbc <uart_stm32_configure+0x11c>
 8002bb2:	1e9a      	subs	r2, r3, #2
 8002bb4:	4251      	negs	r1, r2
 8002bb6:	4151      	adcs	r1, r2
 8002bb8:	0289      	lsls	r1, r1, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8002bba:	f894 c005 	ldrb.w	ip, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8002bbe:	f894 8006 	ldrb.w	r8, [r4, #6]
 8002bc2:	f1bc 0f02 	cmp.w	ip, #2
 8002bc6:	bf96      	itet	ls
 8002bc8:	4a62      	ldrls	r2, [pc, #392]	; (8002d54 <uart_stm32_configure+0x1b4>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8002bca:	f44f 5700 	movhi.w	r7, #8192	; 0x2000
 8002bce:	f832 701c 	ldrhls.w	r7, [r2, ip, lsl #1]
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8002bd2:	79e2      	ldrb	r2, [r4, #7]
	switch (db) {
 8002bd4:	f1b8 0f02 	cmp.w	r8, #2
 8002bd8:	d073      	beq.n	8002cc2 <uart_stm32_configure+0x122>
 8002bda:	f1b8 0f04 	cmp.w	r8, #4
 8002bde:	f000 8099 	beq.w	8002d14 <uart_stm32_configure+0x174>
		if (p == UART_CFG_PARITY_NONE) {
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d17a      	bne.n	8002cdc <uart_stm32_configure+0x13c>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002be6:	2a01      	cmp	r2, #1
 8002be8:	f02c 0c02 	bic.w	ip, ip, #2
 8002bec:	f040 80a3 	bne.w	8002d36 <uart_stm32_configure+0x196>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002bf0:	f1bc 0f00 	cmp.w	ip, #0
 8002bf4:	f000 808e 	beq.w	8002d14 <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8002bf8:	f1b8 0f01 	cmp.w	r8, #1
 8002bfc:	f240 808a 	bls.w	8002d14 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8002c00:	f44f 7e40 	mov.w	lr, #768	; 0x300
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8002c04:	f8d5 c000 	ldr.w	ip, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8002c08:	b16a      	cbz	r2, 8002c26 <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8002c0a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8002d58 <uart_stm32_configure+0x1b8>
 8002c0e:	45c4      	cmp	ip, r8
 8002c10:	d007      	beq.n	8002c22 <uart_stm32_configure+0x82>
 8002c12:	f5a8 4874 	sub.w	r8, r8, #62464	; 0xf400
 8002c16:	45c4      	cmp	ip, r8
 8002c18:	d003      	beq.n	8002c22 <uart_stm32_configure+0x82>
 8002c1a:	f508 5870 	add.w	r8, r8, #15360	; 0x3c00
 8002c1e:	45c4      	cmp	ip, r8
 8002c20:	d178      	bne.n	8002d14 <uart_stm32_configure+0x174>
 8002c22:	2a01      	cmp	r2, #1
 8002c24:	d176      	bne.n	8002d14 <uart_stm32_configure+0x174>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002c26:	f8dc 2000 	ldr.w	r2, [ip]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	f8cc 2000 	str.w	r2, [ip]
	return LL_USART_GetParity(config->usart);
 8002c32:	6842      	ldr	r2, [r0, #4]
 8002c34:	f8d2 c000 	ldr.w	ip, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002c38:	f8dc 2000 	ldr.w	r2, [ip]
 8002c3c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8002c40:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8002c42:	bf1f      	itttt	ne
 8002c44:	f8dc 2000 	ldrne.w	r2, [ip]
 8002c48:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8002c4c:	430a      	orrne	r2, r1
 8002c4e:	f8cc 2000 	strne.w	r2, [ip]
	return LL_USART_GetStopBitsLength(config->usart);
 8002c52:	6842      	ldr	r2, [r0, #4]
 8002c54:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002c56:	684a      	ldr	r2, [r1, #4]
 8002c58:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8002c5c:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c5e:	bf1f      	itttt	ne
 8002c60:	684a      	ldrne	r2, [r1, #4]
 8002c62:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 8002c66:	433a      	orrne	r2, r7
 8002c68:	604a      	strne	r2, [r1, #4]
	return LL_USART_GetDataWidth(config->usart);
 8002c6a:	6842      	ldr	r2, [r0, #4]
 8002c6c:	6811      	ldr	r1, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8002c6e:	680a      	ldr	r2, [r1, #0]
 8002c70:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8002c74:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8002c76:	bf1f      	itttt	ne
 8002c78:	680a      	ldrne	r2, [r1, #0]
 8002c7a:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 8002c7e:	4313      	orrne	r3, r2
 8002c80:	600b      	strne	r3, [r1, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8002c82:	6843      	ldr	r3, [r0, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002c86:	6893      	ldr	r3, [r2, #8]
 8002c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8002c8c:	459e      	cmp	lr, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c8e:	bf1f      	itttt	ne
 8002c90:	6893      	ldrne	r3, [r2, #8]
 8002c92:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8002c96:	ea43 030e 	orrne.w	r3, r3, lr
 8002c9a:	6093      	strne	r3, [r2, #8]
	if (cfg->baudrate != data->baud_rate) {
 8002c9c:	6821      	ldr	r1, [r4, #0]
 8002c9e:	6833      	ldr	r3, [r6, #0]
 8002ca0:	4299      	cmp	r1, r3
 8002ca2:	d003      	beq.n	8002cac <uart_stm32_configure+0x10c>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8002ca4:	f7ff fe96 	bl	80029d4 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8002cac:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002cae:	6813      	ldr	r3, [r2, #0]
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6013      	str	r3, [r2, #0]
	return 0;
 8002cb6:	2000      	movs	r0, #0
};
 8002cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8002cbc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002cc0:	e77b      	b.n	8002bba <uart_stm32_configure+0x1a>
		if (p == UART_CFG_PARITY_NONE) {
 8002cc2:	bb0b      	cbnz	r3, 8002d08 <uart_stm32_configure+0x168>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002cc4:	2a01      	cmp	r2, #1
 8002cc6:	f02c 0c02 	bic.w	ip, ip, #2
 8002cca:	d12f      	bne.n	8002d2c <uart_stm32_configure+0x18c>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002ccc:	f1bc 0f00 	cmp.w	ip, #0
 8002cd0:	d020      	beq.n	8002d14 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8002cd2:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_7B;
 8002cd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002cda:	e793      	b.n	8002c04 <uart_stm32_configure+0x64>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002ce0:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002ce2:	d10c      	bne.n	8002cfe <uart_stm32_configure+0x15e>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d915      	bls.n	8002d14 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8002ce8:	f44f 7e40 	mov.w	lr, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002cec:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8002cf0:	d010      	beq.n	8002d14 <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8002cf2:	f1b8 0f01 	cmp.w	r8, #1
 8002cf6:	d90d      	bls.n	8002d14 <uart_stm32_configure+0x174>
 8002cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfc:	e782      	b.n	8002c04 <uart_stm32_configure+0x64>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d908      	bls.n	8002d14 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8002d02:	f04f 0e00 	mov.w	lr, #0
 8002d06:	e7f1      	b.n	8002cec <uart_stm32_configure+0x14c>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	2a01      	cmp	r2, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002d0c:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8002d0e:	d004      	beq.n	8002d1a <uart_stm32_configure+0x17a>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d819      	bhi.n	8002d48 <uart_stm32_configure+0x1a8>
		return -ENOTSUP;
 8002d14:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002d18:	e7ce      	b.n	8002cb8 <uart_stm32_configure+0x118>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d9fa      	bls.n	8002d14 <uart_stm32_configure+0x174>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002d1e:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8002d22:	d0f7      	beq.n	8002d14 <uart_stm32_configure+0x174>
		return LL_USART_HWCONTROL_RTS_CTS;
 8002d24:	f44f 7e40 	mov.w	lr, #768	; 0x300
			return LL_USART_DATAWIDTH_8B;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e76b      	b.n	8002c04 <uart_stm32_configure+0x64>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002d2c:	f1bc 0f00 	cmp.w	ip, #0
 8002d30:	d0f0      	beq.n	8002d14 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8002d32:	469e      	mov	lr, r3
 8002d34:	e7cf      	b.n	8002cd6 <uart_stm32_configure+0x136>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002d36:	f1bc 0f00 	cmp.w	ip, #0
 8002d3a:	d0eb      	beq.n	8002d14 <uart_stm32_configure+0x174>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8002d3c:	f1b8 0f01 	cmp.w	r8, #1
 8002d40:	d9e8      	bls.n	8002d14 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8002d42:	469e      	mov	lr, r3
			return LL_USART_DATAWIDTH_8B;
 8002d44:	4673      	mov	r3, lr
 8002d46:	e75d      	b.n	8002c04 <uart_stm32_configure+0x64>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8002d48:	f01c 0ffd 	tst.w	ip, #253	; 0xfd
 8002d4c:	d0e2      	beq.n	8002d14 <uart_stm32_configure+0x174>
	return LL_USART_HWCONTROL_NONE;
 8002d4e:	f04f 0e00 	mov.w	lr, #0
 8002d52:	e7f7      	b.n	8002d44 <uart_stm32_configure+0x1a4>
 8002d54:	080050f4 	.word	0x080050f4
 8002d58:	40013800 	.word	0x40013800

08002d5c <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 8002d5c:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8002d5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d62:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8002d64:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8002d66:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <elapsed+0x34>)
 8002d6a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8002d6e:	4909      	ldr	r1, [pc, #36]	; (8002d94 <elapsed+0x38>)
 8002d70:	d101      	bne.n	8002d76 <elapsed+0x1a>
	    || (val1 < val2)) {
 8002d72:	4282      	cmp	r2, r0
 8002d74:	d206      	bcs.n	8002d84 <elapsed+0x28>
		overflow_cyc += last_load;
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	680c      	ldr	r4, [r1, #0]
 8002d7a:	4422      	add	r2, r4
 8002d7c:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8002d7e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002d82:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	680a      	ldr	r2, [r1, #0]
 8002d88:	4413      	add	r3, r2
}
 8002d8a:	1a18      	subs	r0, r3, r0
 8002d8c:	bd10      	pop	{r4, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000264 	.word	0x20000264
 8002d94:	20000270 	.word	0x20000270

08002d98 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <sys_clock_driver_init+0x28>)
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <sys_clock_driver_init+0x2c>)
 8002da2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002da6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <sys_clock_driver_init+0x30>)
 8002daa:	2000      	movs	r0, #0
 8002dac:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8002dae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002db2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002db4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	f042 0207 	orr.w	r2, r2, #7
 8002dbc:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	20000270 	.word	0x20000270
 8002dc8:	20000264 	.word	0x20000264

08002dcc <sys_clock_isr>:
{
 8002dcc:	b508      	push	{r3, lr}
	elapsed();
 8002dce:	f7ff ffc5 	bl	8002d5c <elapsed>
	cycle_count += overflow_cyc;
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <sys_clock_isr+0x38>)
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <sys_clock_isr+0x3c>)
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	6811      	ldr	r1, [r2, #0]
 8002dda:	4408      	add	r0, r1
 8002ddc:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <sys_clock_isr+0x40>)
 8002de4:	6813      	ldr	r3, [r2, #0]
 8002de6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002dea:	1ac0      	subs	r0, r0, r3
 8002dec:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8002df0:	fb01 3300 	mla	r3, r1, r0, r3
 8002df4:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8002df6:	f001 f893 	bl	8003f20 <sys_clock_announce>
}
 8002dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002dfe:	f7fe be17 	b.w	8001a30 <z_arm_exc_exit>
 8002e02:	bf00      	nop
 8002e04:	20000264 	.word	0x20000264
 8002e08:	2000026c 	.word	0x2000026c
 8002e0c:	20000268 	.word	0x20000268

08002e10 <sys_clock_set_timeout>:
{
 8002e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e14:	4e32      	ldr	r6, [pc, #200]	; (8002ee0 <sys_clock_set_timeout+0xd0>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8002e16:	2900      	cmp	r1, #0
 8002e18:	d053      	beq.n	8002ec2 <sys_clock_set_timeout+0xb2>
 8002e1a:	1c42      	adds	r2, r0, #1
 8002e1c:	d10a      	bne.n	8002e34 <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8002e1e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002e22:	6913      	ldr	r3, [r2, #16]
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8002e2a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002e2e:	6033      	str	r3, [r6, #0]
}
 8002e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 8002e34:	6834      	ldr	r4, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002e36:	2801      	cmp	r0, #1
 8002e38:	dd49      	ble.n	8002ece <sys_clock_set_timeout+0xbe>
 8002e3a:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8002e3e:	dc49      	bgt.n	8002ed4 <sys_clock_set_timeout+0xc4>
 8002e40:	f100 38ff 	add.w	r8, r0, #4294967295
	__asm__ volatile(
 8002e44:	f04f 0310 	mov.w	r3, #16
 8002e48:	f3ef 8511 	mrs	r5, BASEPRI
 8002e4c:	f383 8812 	msr	BASEPRI_MAX, r3
 8002e50:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8002e54:	f7ff ff82 	bl	8002d5c <elapsed>
	val1 = SysTick->VAL;
 8002e58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
 8002e5c:	4921      	ldr	r1, [pc, #132]	; (8002ee4 <sys_clock_set_timeout+0xd4>)
	val1 = SysTick->VAL;
 8002e5e:	699f      	ldr	r7, [r3, #24]
	cycle_count += pending;
 8002e60:	680b      	ldr	r3, [r1, #0]
 8002e62:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <sys_clock_set_timeout+0xd8>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <sys_clock_set_timeout+0xdc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8002e6e:	1ac2      	subs	r2, r0, r3
 8002e70:	d433      	bmi.n	8002eda <sys_clock_set_timeout+0xca>
		delay = ticks * CYC_PER_TICK;
 8002e72:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40
		delay += unannounced;
 8002e76:	fb0c 2208 	mla	r2, ip, r8, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8002e7a:	f502 52f9 	add.w	r2, r2, #7968	; 0x1f20
		delay -= unannounced;
 8002e7e:	1a1b      	subs	r3, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8002e80:	321f      	adds	r2, #31
 8002e82:	fbb2 f2fc 	udiv	r2, r2, ip
		delay -= unannounced;
 8002e86:	fb0c 3302 	mla	r3, ip, r2, r3
		delay = MAX(delay, MIN_DELAY);
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d924      	bls.n	8002eda <sys_clock_set_timeout+0xca>
		if (delay > MAX_CYCLES) {
 8002e90:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <sys_clock_set_timeout+0xe0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	bf28      	it	cs
 8002e96:	4613      	movcs	r3, r2
	val2 = SysTick->VAL;
 8002e98:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 8002e9c:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 8002e9e:	6996      	ldr	r6, [r2, #24]
	if (val1 < val2) {
 8002ea0:	42b7      	cmp	r7, r6
 8002ea2:	eba7 0706 	sub.w	r7, r7, r6
	SysTick->LOAD = last_load - 1;
 8002ea6:	f103 33ff 	add.w	r3, r3, #4294967295
		cycle_count += (val1 + (last_load_ - val2));
 8002eaa:	bf38      	it	cc
 8002eac:	193f      	addcc	r7, r7, r4
	SysTick->LOAD = last_load - 1;
 8002eae:	6153      	str	r3, [r2, #20]
		cycle_count += (val1 - val2);
 8002eb0:	4438      	add	r0, r7
	SysTick->VAL = 0; /* resets timer to last_load */
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	6193      	str	r3, [r2, #24]
		cycle_count += (val1 - val2);
 8002eb6:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8002eb8:	f385 8811 	msr	BASEPRI, r5
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	e7b6      	b.n	8002e30 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002ec2:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8002ec4:	6834      	ldr	r4, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002ec6:	d1b6      	bne.n	8002e36 <sys_clock_set_timeout+0x26>
 8002ec8:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8002ecc:	e7b8      	b.n	8002e40 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002ece:	f04f 0800 	mov.w	r8, #0
 8002ed2:	e7b7      	b.n	8002e44 <sys_clock_set_timeout+0x34>
 8002ed4:	f44f 6803 	mov.w	r8, #2096	; 0x830
 8002ed8:	e7b4      	b.n	8002e44 <sys_clock_set_timeout+0x34>
 8002eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ede:	e7db      	b.n	8002e98 <sys_clock_set_timeout+0x88>
 8002ee0:	20000270 	.word	0x20000270
 8002ee4:	2000026c 	.word	0x2000026c
 8002ee8:	20000264 	.word	0x20000264
 8002eec:	20000268 	.word	0x20000268
 8002ef0:	00ffdc00 	.word	0x00ffdc00

08002ef4 <sys_clock_elapsed>:
{
 8002ef4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002ef6:	f04f 0310 	mov.w	r3, #16
 8002efa:	f3ef 8411 	mrs	r4, BASEPRI
 8002efe:	f383 8812 	msr	BASEPRI_MAX, r3
 8002f02:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8002f06:	f7ff ff29 	bl	8002d5c <elapsed>
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <sys_clock_elapsed+0x34>)
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <sys_clock_elapsed+0x38>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	4403      	add	r3, r0
	__asm__ volatile(
 8002f16:	f384 8811 	msr	BASEPRI, r4
 8002f1a:	f3bf 8f6f 	isb	sy
}
 8002f1e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002f22:	fbb3 f0f0 	udiv	r0, r3, r0
 8002f26:	bd10      	pop	{r4, pc}
 8002f28:	2000026c 	.word	0x2000026c
 8002f2c:	20000268 	.word	0x20000268

08002f30 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8002f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8002f34:	4f20      	ldr	r7, [pc, #128]	; (8002fb8 <pinctrl_configure_pins+0x88>)
 8002f36:	4604      	mov	r4, r0
 8002f38:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8002f3c:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8002f3e:	42b4      	cmp	r4, r6
 8002f40:	d101      	bne.n	8002f46 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8002f42:	2000      	movs	r0, #0
 8002f44:	e014      	b.n	8002f70 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8002f46:	6822      	ldr	r2, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8002f48:	06d1      	lsls	r1, r2, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8002f4a:	f002 091f 	and.w	r9, r2, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8002f4e:	d411      	bmi.n	8002f74 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8002f50:	6865      	ldr	r5, [r4, #4]
 8002f52:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8002f56:	f3c2 1a47 	ubfx	sl, r2, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8002f5a:	f3c2 2243 	ubfx	r2, r2, #9, #4
 8002f5e:	2a0a      	cmp	r2, #10
 8002f60:	d827      	bhi.n	8002fb2 <pinctrl_configure_pins+0x82>
	port_device = gpio_ports[STM32_PORT(pin)];
 8002f62:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8002f66:	f1b8 0f00 	cmp.w	r8, #0
 8002f6a:	d111      	bne.n	8002f90 <pinctrl_configure_pins+0x60>
		return -ENODEV;
 8002f6c:	f06f 0012 	mvn.w	r0, #18
}
 8002f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8002f74:	f1b9 0f10 	cmp.w	r9, #16
 8002f78:	d008      	beq.n	8002f8c <pinctrl_configure_pins+0x5c>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8002f7a:	f1b9 0f11 	cmp.w	r9, #17
 8002f7e:	d1ea      	bne.n	8002f56 <pinctrl_configure_pins+0x26>
			uint32_t gpio_out = pins[i].pincfg &
 8002f80:	6865      	ldr	r5, [r4, #4]
			if (gpio_out != 0) {
 8002f82:	052b      	lsls	r3, r5, #20
 8002f84:	d5e7      	bpl.n	8002f56 <pinctrl_configure_pins+0x26>
				pin_cgf = pins[i].pincfg | STM32_MODER_OUTPUT_MODE;
 8002f86:	f045 0510 	orr.w	r5, r5, #16
 8002f8a:	e7e4      	b.n	8002f56 <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8002f8c:	2530      	movs	r5, #48	; 0x30
 8002f8e:	e7e2      	b.n	8002f56 <pinctrl_configure_pins+0x26>
 8002f90:	4640      	mov	r0, r8
 8002f92:	f001 fc8e 	bl	80048b2 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d0e8      	beq.n	8002f6c <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	462a      	mov	r2, r5
 8002f9e:	f00a 010f 	and.w	r1, sl, #15
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	f001 fb66 	bl	8004674 <gpio_stm32_configure>
		if (ret < 0) {
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	f104 0408 	add.w	r4, r4, #8
 8002fae:	dac6      	bge.n	8002f3e <pinctrl_configure_pins+0xe>
 8002fb0:	e7de      	b.n	8002f70 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8002fb2:	f06f 0015 	mvn.w	r0, #21
 8002fb6:	e7db      	b.n	8002f70 <pinctrl_configure_pins+0x40>
 8002fb8:	0800506c 	.word	0x0800506c

08002fbc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fbc:	4b22      	ldr	r3, [pc, #136]	; (8003048 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002fbe:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc0:	68d9      	ldr	r1, [r3, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fc2:	f012 020c 	ands.w	r2, r2, #12
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x18>
 8002fc8:	2a0c      	cmp	r2, #12
 8002fca:	d115      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fcc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fd0:	2901      	cmp	r1, #1
 8002fd2:	d118      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fd4:	6819      	ldr	r1, [r3, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fd6:	481d      	ldr	r0, [pc, #116]	; (800304c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fd8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fda:	bf55      	itete	pl
 8002fdc:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fe6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002fea:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fee:	b112      	cbz	r2, 8002ff6 <HAL_RCC_GetSysClockFreq+0x3a>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ff0:	2a0c      	cmp	r2, #12
 8002ff2:	d009      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x4c>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ff4:	2000      	movs	r0, #0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
}
 8002ff6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ff8:	2a04      	cmp	r2, #4
 8002ffa:	d022      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x86>
    sysclockfreq = HSE_VALUE;
 8002ffc:	2a08      	cmp	r2, #8
 8002ffe:	4814      	ldr	r0, [pc, #80]	; (8003050 <HAL_RCC_GetSysClockFreq+0x94>)
 8003000:	bf18      	it	ne
 8003002:	2000      	movne	r0, #0
 8003004:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003006:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800300e:	2a02      	cmp	r2, #2
 8003010:	d015      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x82>
 8003012:	490f      	ldr	r1, [pc, #60]	; (8003050 <HAL_RCC_GetSysClockFreq+0x94>)
 8003014:	2a03      	cmp	r2, #3
 8003016:	bf08      	it	eq
 8003018:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800301a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003022:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003024:	68d8      	ldr	r0, [r3, #12]
 8003026:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800302a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800302e:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003030:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003032:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003034:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003038:	fbb2 f0f0 	udiv	r0, r2, r0
 800303c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800303e:	4805      	ldr	r0, [pc, #20]	; (8003054 <HAL_RCC_GetSysClockFreq+0x98>)
 8003040:	e7eb      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003042:	4804      	ldr	r0, [pc, #16]	; (8003054 <HAL_RCC_GetSysClockFreq+0x98>)
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	08005098 	.word	0x08005098
 8003050:	007a1200 	.word	0x007a1200
 8003054:	00f42400 	.word	0x00f42400

08003058 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <LL_TIM_Init+0x68>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800305a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800305c:	4290      	cmp	r0, r2
 800305e:	d002      	beq.n	8003066 <LL_TIM_Init+0xe>
 8003060:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003064:	d11a      	bne.n	800309c <LL_TIM_Init+0x44>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003066:	684a      	ldr	r2, [r1, #4]
 8003068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800306e:	68ca      	ldr	r2, [r1, #12]
 8003070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003074:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003076:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003078:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800307a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800307c:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800307e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <LL_TIM_Init+0x68>)
 8003082:	4298      	cmp	r0, r3
 8003084:	d007      	beq.n	8003096 <LL_TIM_Init+0x3e>
 8003086:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800308a:	4298      	cmp	r0, r3
 800308c:	d003      	beq.n	8003096 <LL_TIM_Init+0x3e>
 800308e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003092:	4298      	cmp	r0, r3
 8003094:	d10e      	bne.n	80030b4 <LL_TIM_Init+0x5c>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003096:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003098:	6303      	str	r3, [r0, #48]	; 0x30
}
 800309a:	e00b      	b.n	80030b4 <LL_TIM_Init+0x5c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309c:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <LL_TIM_Init+0x6c>)
 800309e:	4290      	cmp	r0, r2
 80030a0:	d0e5      	beq.n	800306e <LL_TIM_Init+0x16>
 80030a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030a6:	4290      	cmp	r0, r2
 80030a8:	d0e1      	beq.n	800306e <LL_TIM_Init+0x16>
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80030aa:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80030ac:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 80030ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80030b0:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80030b2:	6283      	str	r3, [r0, #40]	; 0x28
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80030b4:	6943      	ldr	r3, [r0, #20]
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80030bc:	2000      	movs	r0, #0
 80030be:	4770      	bx	lr
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40014000 	.word	0x40014000

080030c8 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80030c8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 80030cc:	b530      	push	{r4, r5, lr}
  switch (Channel)
 80030ce:	f000 80f0 	beq.w	80032b2 <LL_TIM_OC_Init+0x1ea>
 80030d2:	d809      	bhi.n	80030e8 <LL_TIM_OC_Init+0x20>
 80030d4:	2910      	cmp	r1, #16
 80030d6:	d075      	beq.n	80031c4 <LL_TIM_OC_Init+0xfc>
 80030d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80030dc:	f000 80ae 	beq.w	800323c <LL_TIM_OC_Init+0x174>
 80030e0:	2901      	cmp	r1, #1
 80030e2:	d035      	beq.n	8003150 <LL_TIM_OC_Init+0x88>
 80030e4:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 80030e6:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 80030e8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80030ec:	f000 810e 	beq.w	800330c <LL_TIM_OC_Init+0x244>
 80030f0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80030f4:	d1f6      	bne.n	80030e4 <LL_TIM_OC_Init+0x1c>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80030f6:	6a03      	ldr	r3, [r0, #32]
 80030f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80030fe:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003100:	6d41      	ldr	r1, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003102:	6814      	ldr	r4, [r2, #0]
 8003104:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003108:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800310c:	ea41 2404 	orr.w	r4, r1, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003110:	6911      	ldr	r1, [r2, #16]
 8003112:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003116:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800311a:	6851      	ldr	r1, [r2, #4]
 800311c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003120:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003124:	4990      	ldr	r1, [pc, #576]	; (8003368 <LL_TIM_OC_Init+0x2a0>)
 8003126:	4288      	cmp	r0, r1
 8003128:	d007      	beq.n	800313a <LL_TIM_OC_Init+0x72>
 800312a:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 800312e:	4288      	cmp	r0, r1
 8003130:	d003      	beq.n	800313a <LL_TIM_OC_Init+0x72>
 8003132:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003136:	4288      	cmp	r0, r1
 8003138:	d106      	bne.n	8003148 <LL_TIM_OC_Init+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800313a:	6841      	ldr	r1, [r0, #4]
 800313c:	6995      	ldr	r5, [r2, #24]
 800313e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003142:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8003146:	6041      	str	r1, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003148:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800314a:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800314c:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800314e:	e036      	b.n	80031be <LL_TIM_OC_Init+0xf6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003150:	6a03      	ldr	r3, [r0, #32]
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003158:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800315a:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800315c:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800315e:	6815      	ldr	r5, [r2, #0]
 8003160:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003164:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8003168:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800316a:	6915      	ldr	r5, [r2, #16]
 800316c:	f023 0302 	bic.w	r3, r3, #2
 8003170:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003172:	6855      	ldr	r5, [r2, #4]
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317a:	4d7b      	ldr	r5, [pc, #492]	; (8003368 <LL_TIM_OC_Init+0x2a0>)
 800317c:	42a8      	cmp	r0, r5
 800317e:	d007      	beq.n	8003190 <LL_TIM_OC_Init+0xc8>
 8003180:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003184:	42a8      	cmp	r0, r5
 8003186:	d003      	beq.n	8003190 <LL_TIM_OC_Init+0xc8>
 8003188:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800318c:	42a8      	cmp	r0, r5
 800318e:	d112      	bne.n	80031b6 <LL_TIM_OC_Init+0xee>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003190:	6955      	ldr	r5, [r2, #20]
 8003192:	f023 0308 	bic.w	r3, r3, #8
 8003196:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800319a:	6895      	ldr	r5, [r2, #8]
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80031a4:	6995      	ldr	r5, [r2, #24]
 80031a6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80031aa:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80031ac:	69d5      	ldr	r5, [r2, #28]
 80031ae:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80031b2:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031b6:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80031b8:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80031ba:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80031bc:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80031be:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80031c0:	2000      	movs	r0, #0
 80031c2:	e790      	b.n	80030e6 <LL_TIM_OC_Init+0x1e>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80031c4:	6a03      	ldr	r3, [r0, #32]
 80031c6:	f023 0310 	bic.w	r3, r3, #16
 80031ca:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80031cc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80031ce:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80031d0:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80031d2:	6815      	ldr	r5, [r2, #0]
 80031d4:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80031d8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80031dc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80031e0:	6915      	ldr	r5, [r2, #16]
 80031e2:	f023 0320 	bic.w	r3, r3, #32
 80031e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80031ea:	6855      	ldr	r5, [r2, #4]
 80031ec:	f023 0310 	bic.w	r3, r3, #16
 80031f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f4:	4d5c      	ldr	r5, [pc, #368]	; (8003368 <LL_TIM_OC_Init+0x2a0>)
 80031f6:	42a8      	cmp	r0, r5
 80031f8:	d007      	beq.n	800320a <LL_TIM_OC_Init+0x142>
 80031fa:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80031fe:	42a8      	cmp	r0, r5
 8003200:	d003      	beq.n	800320a <LL_TIM_OC_Init+0x142>
 8003202:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003206:	42a8      	cmp	r0, r5
 8003208:	d113      	bne.n	8003232 <LL_TIM_OC_Init+0x16a>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800320a:	6955      	ldr	r5, [r2, #20]
 800320c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003210:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003214:	6895      	ldr	r5, [r2, #8]
 8003216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800321a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800321e:	6995      	ldr	r5, [r2, #24]
 8003220:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003224:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003228:	69d5      	ldr	r5, [r2, #28]
 800322a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800322e:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003232:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003234:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003236:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003238:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800323a:	e7c0      	b.n	80031be <LL_TIM_OC_Init+0xf6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800323c:	6a03      	ldr	r3, [r0, #32]
 800323e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003242:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003244:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003246:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003248:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800324a:	6815      	ldr	r5, [r2, #0]
 800324c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003250:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8003254:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003256:	6915      	ldr	r5, [r2, #16]
 8003258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800325c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003260:	6855      	ldr	r5, [r2, #4]
 8003262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003266:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326a:	4d3f      	ldr	r5, [pc, #252]	; (8003368 <LL_TIM_OC_Init+0x2a0>)
 800326c:	42a8      	cmp	r0, r5
 800326e:	d007      	beq.n	8003280 <LL_TIM_OC_Init+0x1b8>
 8003270:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003274:	42a8      	cmp	r0, r5
 8003276:	d003      	beq.n	8003280 <LL_TIM_OC_Init+0x1b8>
 8003278:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800327c:	42a8      	cmp	r0, r5
 800327e:	d113      	bne.n	80032a8 <LL_TIM_OC_Init+0x1e0>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003280:	6955      	ldr	r5, [r2, #20]
 8003282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003286:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800328a:	6895      	ldr	r5, [r2, #8]
 800328c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003290:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003294:	6995      	ldr	r5, [r2, #24]
 8003296:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800329a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800329e:	69d5      	ldr	r5, [r2, #28]
 80032a0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80032a4:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80032a8:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80032aa:	61c4      	str	r4, [r0, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80032ac:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80032ae:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032b0:	e785      	b.n	80031be <LL_TIM_OC_Init+0xf6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80032b2:	6a03      	ldr	r3, [r0, #32]
 80032b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032b8:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80032ba:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80032bc:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80032be:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80032c0:	6815      	ldr	r5, [r2, #0]
 80032c2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80032c6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80032ca:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80032ce:	6915      	ldr	r5, [r2, #16]
 80032d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80032d8:	6855      	ldr	r5, [r2, #4]
 80032da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032de:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e2:	4d21      	ldr	r5, [pc, #132]	; (8003368 <LL_TIM_OC_Init+0x2a0>)
 80032e4:	42a8      	cmp	r0, r5
 80032e6:	d007      	beq.n	80032f8 <LL_TIM_OC_Init+0x230>
 80032e8:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80032ec:	42a8      	cmp	r0, r5
 80032ee:	d003      	beq.n	80032f8 <LL_TIM_OC_Init+0x230>
 80032f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032f4:	42a8      	cmp	r0, r5
 80032f6:	d104      	bne.n	8003302 <LL_TIM_OC_Init+0x23a>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80032f8:	6995      	ldr	r5, [r2, #24]
 80032fa:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80032fe:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003302:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003304:	61c1      	str	r1, [r0, #28]
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003306:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003308:	6402      	str	r2, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800330a:	e758      	b.n	80031be <LL_TIM_OC_Init+0xf6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800330c:	6a03      	ldr	r3, [r0, #32]
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003314:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003316:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003318:	6814      	ldr	r4, [r2, #0]
 800331a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800331e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003322:	430c      	orrs	r4, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003324:	6911      	ldr	r1, [r2, #16]
 8003326:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800332a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800332e:	6851      	ldr	r1, [r2, #4]
 8003330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003338:	490b      	ldr	r1, [pc, #44]	; (8003368 <LL_TIM_OC_Init+0x2a0>)
 800333a:	4288      	cmp	r0, r1
 800333c:	d007      	beq.n	800334e <LL_TIM_OC_Init+0x286>
 800333e:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8003342:	4288      	cmp	r0, r1
 8003344:	d003      	beq.n	800334e <LL_TIM_OC_Init+0x286>
 8003346:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800334a:	4288      	cmp	r0, r1
 800334c:	d106      	bne.n	800335c <LL_TIM_OC_Init+0x294>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800334e:	6841      	ldr	r1, [r0, #4]
 8003350:	6995      	ldr	r5, [r2, #24]
 8003352:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003356:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800335a:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800335c:	6544      	str	r4, [r0, #84]	; 0x54
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800335e:	68d2      	ldr	r2, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003360:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003362:	6582      	str	r2, [r0, #88]	; 0x58
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003364:	e72b      	b.n	80031be <LL_TIM_OC_Init+0xf6>
 8003366:	bf00      	nop
 8003368:	40012c00 	.word	0x40012c00

0800336c <LL_SetFlashLatency>:
  ErrorStatus status = SUCCESS;

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */

  /* Frequency cannot be equal to 0 or greater than max clock */
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <LL_SetFlashLatency+0x80>)
 800336e:	1e42      	subs	r2, r0, #1
 8003370:	429a      	cmp	r2, r3
 8003372:	d901      	bls.n	8003378 <LL_SetFlashLatency+0xc>
  {
    status = ERROR;
 8003374:	2001      	movs	r0, #1
 8003376:	4770      	bx	lr
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <LL_SetFlashLatency+0x84>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d10f      	bne.n	80033a6 <LL_SetFlashLatency+0x3a>
          latency = LL_FLASH_LATENCY_1;
        }
        /* else HCLKFrequency <= 10MHz default LL_FLASH_LATENCY_0 0WS */
      }
#else
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <LL_SetFlashLatency+0x88>)
 8003388:	4298      	cmp	r0, r3
 800338a:	d81a      	bhi.n	80033c2 <LL_SetFlashLatency+0x56>
      {
        /* 64 < HCLK <= 80 => 4WS (5 CPU cycles) */
        latency = LL_FLASH_LATENCY_4;
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <LL_SetFlashLatency+0x8c>)
 800338e:	4298      	cmp	r0, r3
 8003390:	d827      	bhi.n	80033e2 <LL_SetFlashLatency+0x76>
      {
        /* 48 < HCLK <= 64 => 3WS (4 CPU cycles) */
        latency = LL_FLASH_LATENCY_3;
      }
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <LL_SetFlashLatency+0x90>)
 8003394:	4298      	cmp	r0, r3
 8003396:	d826      	bhi.n	80033e6 <LL_SetFlashLatency+0x7a>
        /* 32 < HCLK <= 48 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <LL_SetFlashLatency+0x94>)
        /* 12 < HCLK <= 18 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800339a:	4298      	cmp	r0, r3
 800339c:	bf94      	ite	ls
 800339e:	2300      	movls	r3, #0
 80033a0:	2301      	movhi	r3, #1
  ErrorStatus status = SUCCESS;
 80033a2:	2000      	movs	r0, #0
 80033a4:	e011      	b.n	80033ca <LL_SetFlashLatency+0x5e>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <LL_SetFlashLatency+0x98>)
 80033a8:	4298      	cmp	r0, r3
 80033aa:	d80c      	bhi.n	80033c6 <LL_SetFlashLatency+0x5a>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 80033ac:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 80033b0:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 80033b4:	4298      	cmp	r0, r3
 80033b6:	d814      	bhi.n	80033e2 <LL_SetFlashLatency+0x76>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <LL_SetFlashLatency+0x9c>)
 80033ba:	4298      	cmp	r0, r3
 80033bc:	d813      	bhi.n	80033e6 <LL_SetFlashLatency+0x7a>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <LL_SetFlashLatency+0xa0>)
 80033c0:	e7eb      	b.n	800339a <LL_SetFlashLatency+0x2e>
        latency = LL_FLASH_LATENCY_4;
 80033c2:	2304      	movs	r3, #4
 80033c4:	e7ed      	b.n	80033a2 <LL_SetFlashLatency+0x36>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80033c6:	2300      	movs	r3, #0
        status = ERROR;
 80033c8:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80033ca:	4911      	ldr	r1, [pc, #68]	; (8003410 <LL_SetFlashLatency+0xa4>)
 80033cc:	680a      	ldr	r2, [r1, #0]
 80033ce:	f022 0207 	bic.w	r2, r2, #7
 80033d2:	431a      	orrs	r2, r3
 80033d4:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80033d6:	680a      	ldr	r2, [r1, #0]
 80033d8:	f002 0207 	and.w	r2, r2, #7

    LL_FLASH_SetLatency(latency);

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(LL_FLASH_GetLatency() != latency)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d1c9      	bne.n	8003374 <LL_SetFlashLatency+0x8>
    {
      status = ERROR;
    }
  }
  return status;
}
 80033e0:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e7dd      	b.n	80033a2 <LL_SetFlashLatency+0x36>
        latency = LL_FLASH_LATENCY_2;
 80033e6:	2302      	movs	r3, #2
 80033e8:	e7db      	b.n	80033a2 <LL_SetFlashLatency+0x36>
 80033ea:	bf00      	nop
 80033ec:	04c4b3ff 	.word	0x04c4b3ff
 80033f0:	40007000 	.word	0x40007000
 80033f4:	03d09000 	.word	0x03d09000
 80033f8:	02dc6c00 	.word	0x02dc6c00
 80033fc:	01e84800 	.word	0x01e84800
 8003400:	00f42400 	.word	0x00f42400
 8003404:	018cba80 	.word	0x018cba80
 8003408:	00b71b00 	.word	0x00b71b00
 800340c:	005b8d80 	.word	0x005b8d80
 8003410:	40022000 	.word	0x40022000

08003414 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <z_sys_init_run_level+0x40>)
{
 8003416:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8003418:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800341c:	3001      	adds	r0, #1
 800341e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8003422:	42a6      	cmp	r6, r4
 8003424:	d800      	bhi.n	8003428 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8003426:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8003428:	e9d4 3500 	ldrd	r3, r5, [r4]
 800342c:	4628      	mov	r0, r5
 800342e:	4798      	blx	r3
		if (dev != NULL) {
 8003430:	b16d      	cbz	r5, 800344e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 8003432:	b138      	cbz	r0, 8003444 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8003434:	2800      	cmp	r0, #0
 8003436:	bfb8      	it	lt
 8003438:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 800343a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 800343c:	28ff      	cmp	r0, #255	; 0xff
 800343e:	bfa8      	it	ge
 8003440:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 8003442:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8003444:	68ea      	ldr	r2, [r5, #12]
 8003446:	7853      	ldrb	r3, [r2, #1]
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800344e:	3408      	adds	r4, #8
 8003450:	e7e7      	b.n	8003422 <z_sys_init_run_level+0xe>
 8003452:	bf00      	nop
 8003454:	080050c8 	.word	0x080050c8

08003458 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8003458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800345a:	4604      	mov	r4, r0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
 800345c:	f7fd fecc 	bl	80011f8 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <k_sys_fatal_error_handler+0x24>)
 8003462:	9302      	str	r3, [sp, #8]
 8003464:	2300      	movs	r3, #0
 8003466:	4618      	mov	r0, r3
 8003468:	e9cd 3300 	strd	r3, r3, [sp]
 800346c:	4904      	ldr	r1, [pc, #16]	; (8003480 <k_sys_fatal_error_handler+0x28>)
 800346e:	2201      	movs	r2, #1
 8003470:	f001 fa29 	bl	80048c6 <z_log_msg_runtime_create.constprop.0>
	arch_system_halt(reason);
 8003474:	4620      	mov	r0, r4
 8003476:	f001 fa36 	bl	80048e6 <arch_system_halt>
 800347a:	bf00      	nop
 800347c:	080058e8 	.word	0x080058e8
 8003480:	08004e68 	.word	0x08004e68

08003484 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003488:	4606      	mov	r6, r0
 800348a:	b086      	sub	sp, #24
 800348c:	460f      	mov	r7, r1
	__asm__ volatile(
 800348e:	f04f 0310 	mov.w	r3, #16
 8003492:	f3ef 8811 	mrs	r8, BASEPRI
 8003496:	f383 8812 	msr	BASEPRI_MAX, r3
 800349a:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
 800349e:	f000 fbf3 	bl	8003c88 <z_impl_z_current_get>
 80034a2:	2e04      	cmp	r6, #4
 80034a4:	bf96      	itet	ls
 80034a6:	4b22      	ldrls	r3, [pc, #136]	; (8003530 <z_fatal_error+0xac>)
 80034a8:	4b22      	ldrhi	r3, [pc, #136]	; (8003534 <z_fatal_error+0xb0>)
 80034aa:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 80034ae:	4922      	ldr	r1, [pc, #136]	; (8003538 <z_fatal_error+0xb4>)
 80034b0:	9603      	str	r6, [sp, #12]
 80034b2:	2400      	movs	r4, #0
 80034b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80034b8:	4b20      	ldr	r3, [pc, #128]	; (800353c <z_fatal_error+0xb8>)
 80034ba:	9400      	str	r4, [sp, #0]
 80034bc:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80034c0:	4605      	mov	r5, r0
 80034c2:	4623      	mov	r3, r4
 80034c4:	2201      	movs	r2, #1
 80034c6:	4620      	mov	r0, r4
 80034c8:	f001 f9fd 	bl	80048c6 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 80034cc:	b16f      	cbz	r7, 80034ea <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	b14b      	cbz	r3, 80034ea <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <z_fatal_error+0xbc>)
 80034d8:	4917      	ldr	r1, [pc, #92]	; (8003538 <z_fatal_error+0xb4>)
 80034da:	9400      	str	r4, [sp, #0]
 80034dc:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	4623      	mov	r3, r4
 80034e4:	4620      	mov	r0, r4
 80034e6:	f001 f9ee 	bl	80048c6 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 80034ea:	b12d      	cbz	r5, 80034f8 <z_fatal_error+0x74>
 80034ec:	4628      	mov	r0, r5
 80034ee:	f001 fa07 	bl	8004900 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 80034f2:	b108      	cbz	r0, 80034f8 <z_fatal_error+0x74>
 80034f4:	7803      	ldrb	r3, [r0, #0]
 80034f6:	b903      	cbnz	r3, 80034fa <z_fatal_error+0x76>
		thread_name = "unknown";
 80034f8:	4812      	ldr	r0, [pc, #72]	; (8003544 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <z_fatal_error+0xc4>)
 80034fc:	9302      	str	r3, [sp, #8]
 80034fe:	2300      	movs	r3, #0
 8003500:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8003504:	e9cd 3300 	strd	r3, r3, [sp]
 8003508:	4618      	mov	r0, r3
 800350a:	2201      	movs	r2, #1
 800350c:	490a      	ldr	r1, [pc, #40]	; (8003538 <z_fatal_error+0xb4>)
 800350e:	f001 f9da 	bl	80048c6 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8003512:	4639      	mov	r1, r7
 8003514:	4630      	mov	r0, r6
 8003516:	f7ff ff9f 	bl	8003458 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800351a:	f388 8811 	msr	BASEPRI, r8
 800351e:	f3bf 8f6f 	isb	sy
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
 8003522:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8003524:	b006      	add	sp, #24
 8003526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800352a:	f7fe bd77 	b.w	800201c <z_impl_k_thread_abort>
 800352e:	bf00      	nop
 8003530:	080050e0 	.word	0x080050e0
 8003534:	080058f7 	.word	0x080058f7
 8003538:	08004e68 	.word	0x08004e68
 800353c:	0800590d 	.word	0x0800590d
 8003540:	08005935 	.word	0x08005935
 8003544:	08005905 	.word	0x08005905
 8003548:	08005956 	.word	0x08005956

0800354c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800354c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <bg_thread_main+0x2c>)
 8003550:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8003552:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8003554:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8003556:	f7ff ff5d 	bl	8003414 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 800355a:	f000 fd55 	bl	8004008 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800355e:	2003      	movs	r0, #3
 8003560:	f7ff ff58 	bl	8003414 <z_sys_init_run_level>

	z_init_static_threads();
 8003564:	f000 f8ec 	bl	8003740 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 8003568:	f7fc ffcc 	bl	8000504 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800356c:	4a03      	ldr	r2, [pc, #12]	; (800357c <bg_thread_main+0x30>)
 800356e:	7b13      	ldrb	r3, [r2, #12]
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8003576:	bd08      	pop	{r3, pc}
 8003578:	200002ac 	.word	0x200002ac
 800357c:	200000e0 	.word	0x200000e0

08003580 <z_bss_zero>:
{
 8003580:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8003582:	4803      	ldr	r0, [pc, #12]	; (8003590 <z_bss_zero+0x10>)
 8003584:	4a03      	ldr	r2, [pc, #12]	; (8003594 <z_bss_zero+0x14>)
 8003586:	2100      	movs	r1, #0
 8003588:	1a12      	subs	r2, r2, r0
 800358a:	f001 f9b5 	bl	80048f8 <z_early_memset>
}
 800358e:	bd08      	pop	{r3, pc}
 8003590:	20000060 	.word	0x20000060
 8003594:	200002b0 	.word	0x200002b0

08003598 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8003598:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 800359a:	2300      	movs	r3, #0
{
 800359c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 800359e:	2201      	movs	r2, #1
 80035a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 80035a4:	4e13      	ldr	r6, [pc, #76]	; (80035f4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80035a6:	4d14      	ldr	r5, [pc, #80]	; (80035f8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	220f      	movs	r2, #15
 80035ac:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80035b0:	4912      	ldr	r1, [pc, #72]	; (80035fc <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80035b2:	2318      	movs	r3, #24
 80035b4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 80035b8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 80035bc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 80035be:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80035c2:	fb00 1104 	mla	r1, r0, r4, r1
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <z_init_cpu+0x68>)
 80035c8:	9500      	str	r5, [sp, #0]
 80035ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80035ce:	4630      	mov	r0, r6
 80035d0:	f000 f884 	bl	80036dc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80035d4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 80035d8:	60ee      	str	r6, [r5, #12]
 80035da:	f023 0304 	bic.w	r3, r3, #4
 80035de:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 80035e0:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80035e4:	fb04 3303 	mla	r3, r4, r3, r3
 80035e8:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 80035ea:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
 80035ec:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 80035ee:	b006      	add	sp, #24
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
 80035f2:	bf00      	nop
 80035f4:	20000060 	.word	0x20000060
 80035f8:	20000274 	.word	0x20000274
 80035fc:	20000b00 	.word	0x20000b00
 8003600:	08004905 	.word	0x08004905
 8003604:	200002c0 	.word	0x200002c0

08003608 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8003608:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800360a:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <z_cstart+0xb8>)
 800360c:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800360e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8003612:	4d2c      	ldr	r5, [pc, #176]	; (80036c4 <z_cstart+0xbc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8003614:	4e2c      	ldr	r6, [pc, #176]	; (80036c8 <z_cstart+0xc0>)
 8003616:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003618:	4f2c      	ldr	r7, [pc, #176]	; (80036cc <z_cstart+0xc4>)
 800361a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800361e:	2400      	movs	r4, #0
 8003620:	616b      	str	r3, [r5, #20]
 8003622:	23f0      	movs	r3, #240	; 0xf0
 8003624:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8003628:	77ec      	strb	r4, [r5, #31]
 800362a:	762c      	strb	r4, [r5, #24]
 800362c:	766c      	strb	r4, [r5, #25]
 800362e:	76ac      	strb	r4, [r5, #26]
 8003630:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8003634:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003636:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800363a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800363c:	f7fe fcba 	bl	8001fb4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8003640:	f7fe f894 	bl	800176c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
 8003648:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800364a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800364c:	f7fe fdaa 	bl	80021a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8003650:	f7fe fcfa 	bl	8002048 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 8003654:	f7fd fdbc 	bl	80011d0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 8003658:	f240 1301 	movw	r3, #257	; 0x101
 800365c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8003660:	ab06      	add	r3, sp, #24
 8003662:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 8003664:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 8003668:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800366a:	f001 f921 	bl	80048b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800366e:	4620      	mov	r0, r4
 8003670:	f7ff fed0 	bl	8003414 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8003674:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 8003676:	4d16      	ldr	r5, [pc, #88]	; (80036d0 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8003678:	f7ff fecc 	bl	8003414 <z_sys_init_run_level>
	z_sched_init();
 800367c:	f000 fa5e 	bl	8003b3c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
 8003682:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8003684:	9305      	str	r3, [sp, #20]
 8003686:	2301      	movs	r3, #1
 8003688:	4913      	ldr	r1, [pc, #76]	; (80036d8 <z_cstart+0xd0>)
 800368a:	9400      	str	r4, [sp, #0]
 800368c:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003694:	463b      	mov	r3, r7
 8003696:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800369a:	4628      	mov	r0, r5
 800369c:	f000 f81e 	bl	80036dc <z_setup_new_thread>
 80036a0:	7b6a      	ldrb	r2, [r5, #13]
 80036a2:	4606      	mov	r6, r0
 80036a4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 80036a8:	4628      	mov	r0, r5
 80036aa:	736a      	strb	r2, [r5, #13]
 80036ac:	f001 f96a 	bl	8004984 <z_ready_thread>
	z_init_cpu(0);
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff ff71 	bl	8003598 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80036b6:	463a      	mov	r2, r7
 80036b8:	4631      	mov	r1, r6
 80036ba:	4628      	mov	r0, r5
 80036bc:	f7fe f98e 	bl	80019dc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80036c0:	20000b00 	.word	0x20000b00
 80036c4:	e000ed00 	.word	0xe000ed00
 80036c8:	20000274 	.word	0x20000274
 80036cc:	0800354d 	.word	0x0800354d
 80036d0:	200000e0 	.word	0x200000e0
 80036d4:	080059b8 	.word	0x080059b8
 80036d8:	20000c80 	.word	0x20000c80

080036dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 80036dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 80036e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80036e2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 80036e4:	2604      	movs	r6, #4
 80036e6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 80036e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80036ea:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 80036ec:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 80036f0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80036f2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 80036f4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80036f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 80036fa:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 80036fc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8003700:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8003702:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8003706:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 800370a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 800370c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800370e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8003710:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003714:	9202      	str	r2, [sp, #8]
 8003716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003718:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800371a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800371c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800371e:	9200      	str	r2, [sp, #0]
 8003720:	4642      	mov	r2, r8
{
 8003722:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8003724:	f7fe f928 	bl	8001978 <arch_new_thread>
	if (!_current) {
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 800372a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	b103      	cbz	r3, 8003732 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 8003732:	6723      	str	r3, [r4, #112]	; 0x70
}
 8003734:	4640      	mov	r0, r8
 8003736:	b004      	add	sp, #16
 8003738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800373c:	20000274 	.word	0x20000274

08003740 <z_init_static_threads>:
{
 8003740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003742:	4c22      	ldr	r4, [pc, #136]	; (80037cc <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 8003744:	4d22      	ldr	r5, [pc, #136]	; (80037d0 <z_init_static_threads+0x90>)
{
 8003746:	b087      	sub	sp, #28
 8003748:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800374a:	42ae      	cmp	r6, r5
 800374c:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8003750:	d30b      	bcc.n	800376a <z_init_static_threads+0x2a>
	k_sched_lock();
 8003752:	f000 f9c3 	bl	8003adc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8003756:	4c1d      	ldr	r4, [pc, #116]	; (80037cc <z_init_static_threads+0x8c>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8003758:	4f1e      	ldr	r7, [pc, #120]	; (80037d4 <z_init_static_threads+0x94>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800375a:	260a      	movs	r6, #10
 800375c:	42ac      	cmp	r4, r5
 800375e:	d320      	bcc.n	80037a2 <z_init_static_threads+0x62>
}
 8003760:	b007      	add	sp, #28
 8003762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8003766:	f000 b9cd 	b.w	8003b04 <k_sched_unlock>
		z_setup_new_thread(
 800376a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800376e:	9305      	str	r3, [sp, #20]
 8003770:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8003774:	9304      	str	r3, [sp, #16]
 8003776:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800377a:	9303      	str	r3, [sp, #12]
 800377c:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8003780:	9302      	str	r3, [sp, #8]
 8003782:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8003792:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8003796:	f7ff ffa1 	bl	80036dc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800379a:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800379e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80037a0:	e7d2      	b.n	8003748 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80037a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037a4:	1c53      	adds	r3, r2, #1
 80037a6:	d009      	beq.n	80037bc <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 80037a8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80037ac:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80037b0:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 80037b4:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80037b6:	d103      	bne.n	80037c0 <z_init_static_threads+0x80>
	z_sched_start(thread);
 80037b8:	f000 f940 	bl	8003a3c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80037bc:	3430      	adds	r4, #48	; 0x30
 80037be:	e7cd      	b.n	800375c <z_init_static_threads+0x1c>
 80037c0:	4639      	mov	r1, r7
 80037c2:	3018      	adds	r0, #24
 80037c4:	f000 fb2e 	bl	8003e24 <z_add_timeout>
 80037c8:	e7f8      	b.n	80037bc <z_init_static_threads+0x7c>
 80037ca:	bf00      	nop
 80037cc:	2000005c 	.word	0x2000005c
 80037d0:	2000005c 	.word	0x2000005c
 80037d4:	08004941 	.word	0x08004941

080037d8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 80037d8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 80037da:	4d07      	ldr	r5, [pc, #28]	; (80037f8 <z_reset_time_slice+0x20>)
 80037dc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 80037de:	b154      	cbz	r4, 80037f6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 80037e0:	f7ff fb88 	bl	8002ef4 <sys_clock_elapsed>
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <z_reset_time_slice+0x24>)
 80037e6:	4404      	add	r4, r0
 80037e8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 80037ea:	6828      	ldr	r0, [r5, #0]
 80037ec:	2100      	movs	r1, #0
	}
}
 80037ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 80037f2:	f001 b903 	b.w	80049fc <z_set_timeout_expiry>
}
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	200002a0 	.word	0x200002a0
 80037fc:	20000274 	.word	0x20000274

08003800 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8003800:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8003802:	4d0d      	ldr	r5, [pc, #52]	; (8003838 <update_cache+0x38>)
 8003804:	462b      	mov	r3, r5
 8003806:	f853 4f1c 	ldr.w	r4, [r3, #28]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800380a:	429c      	cmp	r4, r3
 800380c:	d000      	beq.n	8003810 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800380e:	b904      	cbnz	r4, 8003812 <update_cache+0x12>
 8003810:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8003812:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8003814:	b938      	cbnz	r0, 8003826 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 8003816:	7b5a      	ldrb	r2, [r3, #13]
 8003818:	06d2      	lsls	r2, r2, #27
 800381a:	d104      	bne.n	8003826 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800381c:	69a2      	ldr	r2, [r4, #24]
 800381e:	b912      	cbnz	r2, 8003826 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 8003820:	89da      	ldrh	r2, [r3, #14]
 8003822:	2a7f      	cmp	r2, #127	; 0x7f
 8003824:	d805      	bhi.n	8003832 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 8003826:	429c      	cmp	r4, r3
 8003828:	d002      	beq.n	8003830 <update_cache+0x30>
			z_reset_time_slice(thread);
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff ffd4 	bl	80037d8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 8003830:	4623      	mov	r3, r4
 8003832:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8003834:	bd38      	pop	{r3, r4, r5, pc}
 8003836:	bf00      	nop
 8003838:	20000274 	.word	0x20000274

0800383c <move_thread_to_end_of_prio_q>:
{
 800383c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800383e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8003842:	7b43      	ldrb	r3, [r0, #13]
 8003844:	2a00      	cmp	r2, #0
{
 8003846:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8003848:	da04      	bge.n	8003854 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800384a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8003850:	f001 f864 	bl	800491c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8003854:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8003856:	4a15      	ldr	r2, [pc, #84]	; (80038ac <move_thread_to_end_of_prio_q+0x70>)
 8003858:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800385c:	4610      	mov	r0, r2
 800385e:	734b      	strb	r3, [r1, #13]
 8003860:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8003864:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003866:	4283      	cmp	r3, r0
 8003868:	bf08      	it	eq
 800386a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800386c:	b923      	cbnz	r3, 8003878 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 800386e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 8003872:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8003874:	6211      	str	r1, [r2, #32]
}
 8003876:	e00c      	b.n	8003892 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 8003878:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 800387c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8003880:	42b5      	cmp	r5, r6
 8003882:	d00e      	beq.n	80038a2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003884:	42ae      	cmp	r6, r5
 8003886:	dd0c      	ble.n	80038a2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8003888:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 800388a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 800388e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8003890:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8003892:	6890      	ldr	r0, [r2, #8]
 8003894:	1a43      	subs	r3, r0, r1
 8003896:	4258      	negs	r0, r3
}
 8003898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 800389c:	4158      	adcs	r0, r3
 800389e:	f7ff bfaf 	b.w	8003800 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80038a2:	429c      	cmp	r4, r3
 80038a4:	d0e3      	beq.n	800386e <move_thread_to_end_of_prio_q+0x32>
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	e7e0      	b.n	800386c <move_thread_to_end_of_prio_q+0x30>
 80038aa:	bf00      	nop
 80038ac:	20000274 	.word	0x20000274

080038b0 <ready_thread>:
{
 80038b0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 80038b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80038b6:	7b42      	ldrb	r2, [r0, #13]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db29      	blt.n	8003910 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80038bc:	06d3      	lsls	r3, r2, #27
 80038be:	d127      	bne.n	8003910 <ready_thread+0x60>
	return node->next != NULL;
 80038c0:	6983      	ldr	r3, [r0, #24]
 80038c2:	bb2b      	cbnz	r3, 8003910 <ready_thread+0x60>
	return list->head == list;
 80038c4:	4913      	ldr	r1, [pc, #76]	; (8003914 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 80038c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038ca:	7342      	strb	r2, [r0, #13]
 80038cc:	460a      	mov	r2, r1
 80038ce:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80038d2:	4294      	cmp	r4, r2
 80038d4:	bf18      	it	ne
 80038d6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 80038d8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80038da:	b923      	cbnz	r3, 80038e6 <ready_thread+0x36>
	node->prev = tail;
 80038dc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 80038e0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80038e2:	6208      	str	r0, [r1, #32]
}
 80038e4:	e00c      	b.n	8003900 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 80038e6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80038ea:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 80038ee:	42b5      	cmp	r5, r6
 80038f0:	d00a      	beq.n	8003908 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80038f2:	42ae      	cmp	r6, r5
 80038f4:	dd08      	ble.n	8003908 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 80038f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80038f8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80038fc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80038fe:	6058      	str	r0, [r3, #4]
}
 8003900:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8003902:	2000      	movs	r0, #0
 8003904:	f7ff bf7c 	b.w	8003800 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8003908:	42a3      	cmp	r3, r4
 800390a:	d0e7      	beq.n	80038dc <ready_thread+0x2c>
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e7e4      	b.n	80038da <ready_thread+0x2a>
}
 8003910:	bc70      	pop	{r4, r5, r6}
 8003912:	4770      	bx	lr
 8003914:	20000274 	.word	0x20000274

08003918 <unready_thread>:
{
 8003918:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800391a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800391e:	7b43      	ldrb	r3, [r0, #13]
 8003920:	2a00      	cmp	r2, #0
{
 8003922:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8003924:	da04      	bge.n	8003930 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800392a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800392c:	f000 fff6 	bl	800491c <sys_dlist_remove>
	update_cache(thread == _current);
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <unready_thread+0x2c>)
 8003932:	6898      	ldr	r0, [r3, #8]
 8003934:	1a43      	subs	r3, r0, r1
 8003936:	4258      	negs	r0, r3
 8003938:	4158      	adcs	r0, r3
}
 800393a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800393e:	f7ff bf5f 	b.w	8003800 <update_cache>
 8003942:	bf00      	nop
 8003944:	20000274 	.word	0x20000274

08003948 <k_sched_time_slice_set>:
{
 8003948:	b510      	push	{r4, lr}
	__asm__ volatile(
 800394a:	f04f 0310 	mov.w	r3, #16
 800394e:	f3ef 8411 	mrs	r4, BASEPRI
 8003952:	f383 8812 	msr	BASEPRI_MAX, r3
 8003956:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 800395a:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800395c:	2800      	cmp	r0, #0
 800395e:	fb00 f303 	mul.w	r3, r0, r3
 8003962:	dd02      	ble.n	800396a <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 8003964:	2b02      	cmp	r3, #2
 8003966:	bfb8      	it	lt
 8003968:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 800396a:	4a07      	ldr	r2, [pc, #28]	; (8003988 <k_sched_time_slice_set+0x40>)
 800396c:	2000      	movs	r0, #0
 800396e:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 8003970:	4806      	ldr	r0, [pc, #24]	; (800398c <k_sched_time_slice_set+0x44>)
 8003972:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 8003976:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 8003978:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 800397a:	f7ff ff2d 	bl	80037d8 <z_reset_time_slice>
	__asm__ volatile(
 800397e:	f384 8811 	msr	BASEPRI, r4
 8003982:	f3bf 8f6f 	isb	sy
}
 8003986:	bd10      	pop	{r4, pc}
 8003988:	20000274 	.word	0x20000274
 800398c:	200002a0 	.word	0x200002a0
 8003990:	2000029c 	.word	0x2000029c

08003994 <z_time_slice>:
{
 8003994:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8003996:	f04f 0310 	mov.w	r3, #16
 800399a:	f3ef 8511 	mrs	r5, BASEPRI
 800399e:	f383 8812 	msr	BASEPRI_MAX, r3
 80039a2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80039a6:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <z_time_slice+0x70>)
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <z_time_slice+0x74>)
 80039aa:	689c      	ldr	r4, [r3, #8]
 80039ac:	6811      	ldr	r1, [r2, #0]
 80039ae:	428c      	cmp	r4, r1
 80039b0:	d107      	bne.n	80039c2 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 80039b2:	4620      	mov	r0, r4
 80039b4:	f7ff ff10 	bl	80037d8 <z_reset_time_slice>
	__asm__ volatile(
 80039b8:	f385 8811 	msr	BASEPRI, r5
 80039bc:	f3bf 8f6f 	isb	sy
}
 80039c0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 80039c2:	2100      	movs	r1, #0
 80039c4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 80039c6:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	b1c2      	cbz	r2, 80039fe <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80039cc:	89e2      	ldrh	r2, [r4, #14]
 80039ce:	2a7f      	cmp	r2, #127	; 0x7f
 80039d0:	d815      	bhi.n	80039fe <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 80039d2:	7b62      	ldrb	r2, [r4, #13]
 80039d4:	06d2      	lsls	r2, r2, #27
 80039d6:	d112      	bne.n	80039fe <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <z_time_slice+0x7c>)
 80039da:	f994 100e 	ldrsb.w	r1, [r4, #14]
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	4291      	cmp	r1, r2
 80039e2:	db0c      	blt.n	80039fe <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80039e4:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <z_time_slice+0x80>)
 80039e6:	4294      	cmp	r4, r2
 80039e8:	d009      	beq.n	80039fe <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	4282      	cmp	r2, r0
 80039ee:	dc03      	bgt.n	80039f8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7ff ff23 	bl	800383c <move_thread_to_end_of_prio_q>
 80039f6:	e7dc      	b.n	80039b2 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 80039f8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 80039fa:	611a      	str	r2, [r3, #16]
 80039fc:	e7dc      	b.n	80039b8 <z_time_slice+0x24>
 80039fe:	2200      	movs	r2, #0
 8003a00:	e7fb      	b.n	80039fa <z_time_slice+0x66>
 8003a02:	bf00      	nop
 8003a04:	20000274 	.word	0x20000274
 8003a08:	20000298 	.word	0x20000298
 8003a0c:	200002a0 	.word	0x200002a0
 8003a10:	2000029c 	.word	0x2000029c
 8003a14:	20000060 	.word	0x20000060

08003a18 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003a18:	b949      	cbnz	r1, 8003a2e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a1a:	f3ef 8005 	mrs	r0, IPSR
 8003a1e:	b930      	cbnz	r0, 8003a2e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d001      	beq.n	8003a2e <z_reschedule+0x16>
	ret = arch_swap(key);
 8003a2a:	f7fd bf51 	b.w	80018d0 <arch_swap>
 8003a2e:	f381 8811 	msr	BASEPRI, r1
 8003a32:	f3bf 8f6f 	isb	sy
}
 8003a36:	4770      	bx	lr
 8003a38:	20000274 	.word	0x20000274

08003a3c <z_sched_start>:
{
 8003a3c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003a3e:	f04f 0210 	mov.w	r2, #16
 8003a42:	f3ef 8411 	mrs	r4, BASEPRI
 8003a46:	f382 8812 	msr	BASEPRI_MAX, r2
 8003a4a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8003a4e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8003a50:	0751      	lsls	r1, r2, #29
 8003a52:	d404      	bmi.n	8003a5e <z_sched_start+0x22>
	__asm__ volatile(
 8003a54:	f384 8811 	msr	BASEPRI, r4
 8003a58:	f3bf 8f6f 	isb	sy
}
 8003a5c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003a5e:	f022 0204 	bic.w	r2, r2, #4
 8003a62:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8003a64:	f7ff ff24 	bl	80038b0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4802      	ldr	r0, [pc, #8]	; (8003a74 <z_sched_start+0x38>)
}
 8003a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8003a70:	f7ff bfd2 	b.w	8003a18 <z_reschedule>
 8003a74:	200002ad 	.word	0x200002ad

08003a78 <z_impl_k_thread_suspend>:
{
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8003a7c:	3018      	adds	r0, #24
 8003a7e:	f000 ffa7 	bl	80049d0 <z_abort_timeout>
	__asm__ volatile(
 8003a82:	f04f 0310 	mov.w	r3, #16
 8003a86:	f3ef 8611 	mrs	r6, BASEPRI
 8003a8a:	f383 8812 	msr	BASEPRI_MAX, r3
 8003a8e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8003a92:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8003a96:	7b63      	ldrb	r3, [r4, #13]
 8003a98:	2a00      	cmp	r2, #0
 8003a9a:	da05      	bge.n	8003aa8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f000 ff3a 	bl	800491c <sys_dlist_remove>
		update_cache(thread == _current);
 8003aa8:	4d0b      	ldr	r5, [pc, #44]	; (8003ad8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8003aaa:	7b63      	ldrb	r3, [r4, #13]
 8003aac:	68a8      	ldr	r0, [r5, #8]
 8003aae:	f043 0310 	orr.w	r3, r3, #16
 8003ab2:	7363      	strb	r3, [r4, #13]
 8003ab4:	1b03      	subs	r3, r0, r4
 8003ab6:	4258      	negs	r0, r3
 8003ab8:	4158      	adcs	r0, r3
 8003aba:	f7ff fea1 	bl	8003800 <update_cache>
	__asm__ volatile(
 8003abe:	f386 8811 	msr	BASEPRI, r6
 8003ac2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8003ac6:	68ab      	ldr	r3, [r5, #8]
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	d103      	bne.n	8003ad4 <z_impl_k_thread_suspend+0x5c>
}
 8003acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8003ad0:	f000 bf74 	b.w	80049bc <z_reschedule_unlocked>
}
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000274 	.word	0x20000274

08003adc <k_sched_lock>:
	__asm__ volatile(
 8003adc:	f04f 0310 	mov.w	r3, #16
 8003ae0:	f3ef 8111 	mrs	r1, BASEPRI
 8003ae4:	f383 8812 	msr	BASEPRI_MAX, r3
 8003ae8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <k_sched_lock+0x24>)
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	7bd3      	ldrb	r3, [r2, #15]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8003af6:	f381 8811 	msr	BASEPRI, r1
 8003afa:	f3bf 8f6f 	isb	sy
}
 8003afe:	4770      	bx	lr
 8003b00:	20000274 	.word	0x20000274

08003b04 <k_sched_unlock>:
{
 8003b04:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003b06:	f04f 0310 	mov.w	r3, #16
 8003b0a:	f3ef 8411 	mrs	r4, BASEPRI
 8003b0e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003b12:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <k_sched_unlock+0x34>)
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	7bd3      	ldrb	r3, [r2, #15]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7ff fe6d 	bl	8003800 <update_cache>
	__asm__ volatile(
 8003b26:	f384 8811 	msr	BASEPRI, r4
 8003b2a:	f3bf 8f6f 	isb	sy
}
 8003b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8003b32:	f000 bf43 	b.w	80049bc <z_reschedule_unlocked>
 8003b36:	bf00      	nop
 8003b38:	20000274 	.word	0x20000274

08003b3c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8003b44:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8003b48:	4608      	mov	r0, r1
 8003b4a:	f7ff befd 	b.w	8003948 <k_sched_time_slice_set>
 8003b4e:	bf00      	nop
 8003b50:	20000274 	.word	0x20000274

08003b54 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8003b56:	f04f 0310 	mov.w	r3, #16
 8003b5a:	f3ef 8511 	mrs	r5, BASEPRI
 8003b5e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003b62:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 8003b66:	4919      	ldr	r1, [pc, #100]	; (8003bcc <z_impl_k_yield+0x78>)
 8003b68:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003b6a:	7b43      	ldrb	r3, [r0, #13]
 8003b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b70:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003b72:	f000 fed3 	bl	800491c <sys_dlist_remove>
	}
	queue_thread(_current);
 8003b76:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8003b78:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b80:	735a      	strb	r2, [r3, #13]
 8003b82:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
 8003b86:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003b88:	4282      	cmp	r2, r0
 8003b8a:	bf08      	it	eq
 8003b8c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003b8e:	b922      	cbnz	r2, 8003b9a <z_impl_k_yield+0x46>
	node->prev = tail;
 8003b90:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 8003b94:	6023      	str	r3, [r4, #0]
	list->tail = node;
 8003b96:	620b      	str	r3, [r1, #32]
}
 8003b98:	e00c      	b.n	8003bb4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 8003b9a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8003b9e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 8003ba2:	42be      	cmp	r6, r7
 8003ba4:	d00e      	beq.n	8003bc4 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8003ba6:	42b7      	cmp	r7, r6
 8003ba8:	dd0c      	ble.n	8003bc4 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 8003baa:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8003bac:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8003bb0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8003bb2:	6053      	str	r3, [r2, #4]
	update_cache(1);
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	f7ff fe23 	bl	8003800 <update_cache>
 8003bba:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8003bbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bc0:	f7fd be86 	b.w	80018d0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 8003bc4:	42a2      	cmp	r2, r4
 8003bc6:	d0e3      	beq.n	8003b90 <z_impl_k_yield+0x3c>
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	e7e0      	b.n	8003b8e <z_impl_k_yield+0x3a>
 8003bcc:	20000274 	.word	0x20000274

08003bd0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8003bd0:	ea50 0301 	orrs.w	r3, r0, r1
{
 8003bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd8:	4605      	mov	r5, r0
 8003bda:	460e      	mov	r6, r1
	if (ticks == 0) {
 8003bdc:	d103      	bne.n	8003be6 <z_tick_sleep+0x16>
	z_impl_k_yield();
 8003bde:	f7ff ffb9 	bl	8003b54 <z_impl_k_yield>
		k_yield();
		return 0;
 8003be2:	2000      	movs	r0, #0
 8003be4:	e02c      	b.n	8003c40 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 8003be6:	1c83      	adds	r3, r0, #2
 8003be8:	f171 33ff 	sbcs.w	r3, r1, #4294967295
 8003bec:	db2a      	blt.n	8003c44 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8003bee:	f000 ff21 	bl	8004a34 <sys_clock_tick_get_32>
 8003bf2:	1944      	adds	r4, r0, r5
 8003bf4:	f04f 0310 	mov.w	r3, #16
 8003bf8:	f3ef 8811 	mrs	r8, BASEPRI
 8003bfc:	f383 8812 	msr	BASEPRI_MAX, r3
 8003c00:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8003c04:	4f11      	ldr	r7, [pc, #68]	; (8003c4c <z_tick_sleep+0x7c>)
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <z_tick_sleep+0x80>)
 8003c08:	68b8      	ldr	r0, [r7, #8]
 8003c0a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8003c0c:	f7ff fe84 	bl	8003918 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8003c10:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8003c12:	4910      	ldr	r1, [pc, #64]	; (8003c54 <z_tick_sleep+0x84>)
 8003c14:	462a      	mov	r2, r5
 8003c16:	4633      	mov	r3, r6
 8003c18:	3018      	adds	r0, #24
 8003c1a:	f000 f903 	bl	8003e24 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8003c1e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8003c20:	7b53      	ldrb	r3, [r2, #13]
 8003c22:	f043 0310 	orr.w	r3, r3, #16
 8003c26:	7353      	strb	r3, [r2, #13]
 8003c28:	4640      	mov	r0, r8
 8003c2a:	f7fd fe51 	bl	80018d0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8003c2e:	f000 ff01 	bl	8004a34 <sys_clock_tick_get_32>
 8003c32:	1a20      	subs	r0, r4, r0
 8003c34:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8003c38:	2801      	cmp	r0, #1
 8003c3a:	f173 0300 	sbcs.w	r3, r3, #0
 8003c3e:	dbd0      	blt.n	8003be2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 8003c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8003c44:	f06f 0401 	mvn.w	r4, #1
 8003c48:	1a24      	subs	r4, r4, r0
 8003c4a:	e7d3      	b.n	8003bf4 <z_tick_sleep+0x24>
 8003c4c:	20000274 	.word	0x20000274
 8003c50:	20000298 	.word	0x20000298
 8003c54:	08004941 	.word	0x08004941

08003c58 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003c58:	f1b1 3fff 	cmp.w	r1, #4294967295
 8003c5c:	bf08      	it	eq
 8003c5e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 8003c62:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003c64:	d106      	bne.n	8003c74 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <z_impl_k_sleep+0x2c>)
 8003c68:	6898      	ldr	r0, [r3, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 8003c6a:	f7ff ff05 	bl	8003a78 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8003c6e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8003c72:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8003c74:	f7ff ffac 	bl	8003bd0 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8003c78:	220a      	movs	r2, #10
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	17c1      	asrs	r1, r0, #31
 8003c7e:	f7fc fa87 	bl	8000190 <__aeabi_uldivmod>
	return ret;
 8003c82:	e7f6      	b.n	8003c72 <z_impl_k_sleep+0x1a>
 8003c84:	20000274 	.word	0x20000274

08003c88 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8003c88:	4b01      	ldr	r3, [pc, #4]	; (8003c90 <z_impl_z_current_get+0x8>)
 8003c8a:	6898      	ldr	r0, [r3, #8]
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20000274 	.word	0x20000274

08003c94 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8003c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c98:	4604      	mov	r4, r0
 8003c9a:	f04f 0310 	mov.w	r3, #16
 8003c9e:	f3ef 8611 	mrs	r6, BASEPRI
 8003ca2:	f383 8812 	msr	BASEPRI_MAX, r3
 8003ca6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8003caa:	7b03      	ldrb	r3, [r0, #12]
 8003cac:	07d9      	lsls	r1, r3, #31
 8003cae:	d50b      	bpl.n	8003cc8 <z_thread_abort+0x34>
	__asm__ volatile(
 8003cb0:	f386 8811 	msr	BASEPRI, r6
 8003cb4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8003cb8:	4040      	eors	r0, r0
 8003cba:	f380 8811 	msr	BASEPRI, r0
 8003cbe:	f04f 0004 	mov.w	r0, #4
 8003cc2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8003cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8003cc8:	7b43      	ldrb	r3, [r0, #13]
 8003cca:	071a      	lsls	r2, r3, #28
 8003ccc:	d504      	bpl.n	8003cd8 <z_thread_abort+0x44>
 8003cce:	f386 8811 	msr	BASEPRI, r6
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	e7f5      	b.n	8003cc4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8003cd8:	f023 0220 	bic.w	r2, r3, #32
 8003cdc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8003ce0:	09d2      	lsrs	r2, r2, #7
 8003ce2:	d120      	bne.n	8003d26 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8003ce4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8003ce6:	68a3      	ldr	r3, [r4, #8]
 8003ce8:	b113      	cbz	r3, 8003cf0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8003cea:	4620      	mov	r0, r4
 8003cec:	f000 fe1e 	bl	800492c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8003cf0:	f104 0018 	add.w	r0, r4, #24
 8003cf4:	f000 fe6c 	bl	80049d0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8003cf8:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8003cfc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8003d00:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003d02:	42bd      	cmp	r5, r7
 8003d04:	d000      	beq.n	8003d08 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8003d06:	b9b5      	cbnz	r5, 8003d36 <z_thread_abort+0xa2>
		update_cache(1);
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f7ff fd79 	bl	8003800 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <z_thread_abort+0xbc>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	42a3      	cmp	r3, r4
 8003d14:	d1db      	bne.n	8003cce <z_thread_abort+0x3a>
 8003d16:	f3ef 8305 	mrs	r3, IPSR
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1d7      	bne.n	8003cce <z_thread_abort+0x3a>
 8003d1e:	4630      	mov	r0, r6
 8003d20:	f7fd fdd6 	bl	80018d0 <arch_swap>
	return ret;
 8003d24:	e7d3      	b.n	8003cce <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8003d26:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8003d2a:	f043 0308 	orr.w	r3, r3, #8
 8003d2e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003d30:	f000 fdf4 	bl	800491c <sys_dlist_remove>
}
 8003d34:	e7d7      	b.n	8003ce6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 fdf8 	bl	800492c <unpend_thread_no_timeout>
 8003d3c:	f105 0018 	add.w	r0, r5, #24
 8003d40:	f000 fe46 	bl	80049d0 <z_abort_timeout>
 8003d44:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f7ff fdb1 	bl	80038b0 <ready_thread>
 8003d4e:	e7d7      	b.n	8003d00 <z_thread_abort+0x6c>
 8003d50:	20000274 	.word	0x20000274

08003d54 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8003d54:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8003d56:	4806      	ldr	r0, [pc, #24]	; (8003d70 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8003d58:	4a06      	ldr	r2, [pc, #24]	; (8003d74 <z_data_copy+0x20>)
 8003d5a:	4907      	ldr	r1, [pc, #28]	; (8003d78 <z_data_copy+0x24>)
 8003d5c:	1a12      	subs	r2, r2, r0
 8003d5e:	f000 fdcd 	bl	80048fc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8003d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8003d66:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <z_data_copy+0x28>)
 8003d68:	4905      	ldr	r1, [pc, #20]	; (8003d80 <z_data_copy+0x2c>)
 8003d6a:	4806      	ldr	r0, [pc, #24]	; (8003d84 <z_data_copy+0x30>)
 8003d6c:	f000 bdc6 	b.w	80048fc <z_early_memcpy>
 8003d70:	20000000 	.word	0x20000000
 8003d74:	2000005c 	.word	0x2000005c
 8003d78:	08005a08 	.word	0x08005a08
 8003d7c:	00000000 	.word	0x00000000
 8003d80:	08005a08 	.word	0x08005a08
 8003d84:	20000000 	.word	0x20000000

08003d88 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <elapsed+0x10>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b90b      	cbnz	r3, 8003d92 <elapsed+0xa>
 8003d8e:	f7ff b8b1 	b.w	8002ef4 <sys_clock_elapsed>
}
 8003d92:	2000      	movs	r0, #0
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	200002a4 	.word	0x200002a4

08003d9c <next_timeout>:

static int32_t next_timeout(void)
{
 8003d9c:	b510      	push	{r4, lr}
	return list->head == list;
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <next_timeout+0x48>)
 8003da0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003da2:	429c      	cmp	r4, r3
 8003da4:	d10a      	bne.n	8003dbc <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8003da6:	f7ff ffef 	bl	8003d88 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 8003daa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <next_timeout+0x4c>)
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	b113      	cbz	r3, 8003dba <next_timeout+0x1e>
 8003db4:	4298      	cmp	r0, r3
 8003db6:	bfa8      	it	ge
 8003db8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8003dba:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 8003dbc:	f7ff ffe4 	bl	8003d88 <elapsed>
	if ((to == NULL) ||
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d0f2      	beq.n	8003daa <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8003dc4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003dc8:	1a1b      	subs	r3, r3, r0
 8003dca:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 8003dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd2:	f172 0100 	sbcs.w	r1, r2, #0
 8003dd6:	dae8      	bge.n	8003daa <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8003dd8:	2a00      	cmp	r2, #0
 8003dda:	bfac      	ite	ge
 8003ddc:	4618      	movge	r0, r3
 8003dde:	2000      	movlt	r0, #0
 8003de0:	e7e5      	b.n	8003dae <next_timeout+0x12>
 8003de2:	bf00      	nop
 8003de4:	20000034 	.word	0x20000034
 8003de8:	20000274 	.word	0x20000274

08003dec <remove_timeout>:
{
 8003dec:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8003dee:	b170      	cbz	r0, 8003e0e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <remove_timeout+0x34>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4298      	cmp	r0, r3
 8003df6:	d00a      	beq.n	8003e0e <remove_timeout+0x22>
 8003df8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 8003dfa:	b143      	cbz	r3, 8003e0e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8003dfc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8003e00:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8003e04:	1912      	adds	r2, r2, r4
 8003e06:	eb41 0105 	adc.w	r1, r1, r5
 8003e0a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8003e0e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 8003e12:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8003e14:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8003e16:	2300      	movs	r3, #0
	node->prev = NULL;
 8003e18:	e9c0 3300 	strd	r3, r3, [r0]
}
 8003e1c:	bd30      	pop	{r4, r5, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000034 	.word	0x20000034

08003e24 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	bf08      	it	eq
 8003e2a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8003e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e30:	4604      	mov	r4, r0
 8003e32:	461d      	mov	r5, r3
 8003e34:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8003e36:	d061      	beq.n	8003efc <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8003e38:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8003e3a:	f04f 0310 	mov.w	r3, #16
 8003e3e:	f3ef 8711 	mrs	r7, BASEPRI
 8003e42:	f383 8812 	msr	BASEPRI_MAX, r3
 8003e46:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8003e4a:	3201      	adds	r2, #1
 8003e4c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 8003e50:	da24      	bge.n	8003e9c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8003e52:	4930      	ldr	r1, [pc, #192]	; (8003f14 <z_add_timeout+0xf0>)
 8003e54:	e9d1 2000 	ldrd	r2, r0, [r1]
 8003e58:	f06f 0301 	mvn.w	r3, #1
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	eb62 0000 	sbc.w	r0, r2, r0
 8003e66:	1b9e      	subs	r6, r3, r6
 8003e68:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8003e6c:	2e01      	cmp	r6, #1
 8003e6e:	f170 0300 	sbcs.w	r3, r0, #0
 8003e72:	da01      	bge.n	8003e78 <z_add_timeout+0x54>
 8003e74:	2601      	movs	r6, #1
 8003e76:	2000      	movs	r0, #0
 8003e78:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 8003e7c:	4e26      	ldr	r6, [pc, #152]	; (8003f18 <z_add_timeout+0xf4>)
 8003e7e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 8003e82:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003e84:	45b4      	cmp	ip, r6
 8003e86:	bf08      	it	eq
 8003e88:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 8003e8c:	f1bc 0f00 	cmp.w	ip, #0
 8003e90:	d10d      	bne.n	8003eae <z_add_timeout+0x8a>
	node->prev = tail;
 8003e92:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 8003e96:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8003e98:	6074      	str	r4, [r6, #4]
}
 8003e9a:	e01c      	b.n	8003ed6 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 8003e9c:	f7ff ff74 	bl	8003d88 <elapsed>
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	f145 0500 	adc.w	r5, r5, #0
 8003ea6:	1836      	adds	r6, r6, r0
 8003ea8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8003eac:	e7e4      	b.n	8003e78 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 8003eae:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 8003eb2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	eb71 0e00 	sbcs.w	lr, r1, r0
 8003ebc:	da1f      	bge.n	8003efe <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 8003ebe:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 8003ec0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003ec4:	eb60 0001 	sbc.w	r0, r0, r1
 8003ec8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 8003ecc:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 8003ed0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8003ed2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 8003ed6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003ed8:	42b3      	cmp	r3, r6
 8003eda:	d00b      	beq.n	8003ef4 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8003edc:	429c      	cmp	r4, r3
 8003ede:	d109      	bne.n	8003ef4 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8003ee0:	f7ff ff5c 	bl	8003d9c <next_timeout>

			if (next_time == 0 ||
 8003ee4:	b118      	cbz	r0, 8003eee <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4283      	cmp	r3, r0
 8003eec:	d002      	beq.n	8003ef4 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 8003eee:	2100      	movs	r1, #0
 8003ef0:	f7fe ff8e 	bl	8002e10 <sys_clock_set_timeout>
	__asm__ volatile(
 8003ef4:	f387 8811 	msr	BASEPRI, r7
 8003ef8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8003efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8003f04:	45ac      	cmp	ip, r5
 8003f06:	e9c4 3104 	strd	r3, r1, [r4, #16]
 8003f0a:	d0c2      	beq.n	8003e92 <z_add_timeout+0x6e>
 8003f0c:	f8dc c000 	ldr.w	ip, [ip]
 8003f10:	e7bc      	b.n	8003e8c <z_add_timeout+0x68>
 8003f12:	bf00      	nop
 8003f14:	20000160 	.word	0x20000160
 8003f18:	20000034 	.word	0x20000034
 8003f1c:	20000274 	.word	0x20000274

08003f20 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8003f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f24:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8003f26:	f7ff fd35 	bl	8003994 <z_time_slice>
	__asm__ volatile(
 8003f2a:	f04f 0310 	mov.w	r3, #16
 8003f2e:	f3ef 8611 	mrs	r6, BASEPRI
 8003f32:	f383 8812 	msr	BASEPRI_MAX, r3
 8003f36:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8003f3a:	4f23      	ldr	r7, [pc, #140]	; (8003fc8 <sys_clock_announce+0xa8>)
	return list->head == list;
 8003f3c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8003fcc <sys_clock_announce+0xac>
 8003f40:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8003f44:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
 8003f46:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003f48:	4540      	cmp	r0, r8
		curr_tick += dt;
 8003f4a:	e9d2 3e00 	ldrd	r3, lr, [r2]
 8003f4e:	ea4f 71e4 	mov.w	r1, r4, asr #31
 8003f52:	d00b      	beq.n	8003f6c <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8003f54:	b150      	cbz	r0, 8003f6c <sys_clock_announce+0x4c>
 8003f56:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
 8003f5a:	42ac      	cmp	r4, r5
 8003f5c:	eb71 090c 	sbcs.w	r9, r1, ip
 8003f60:	da16      	bge.n	8003f90 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8003f62:	1b2d      	subs	r5, r5, r4
 8003f64:	eb6c 0c01 	sbc.w	ip, ip, r1
 8003f68:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8003f6c:	18e3      	adds	r3, r4, r3
 8003f6e:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
 8003f72:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8003f74:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
 8003f78:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8003f7a:	f7ff ff0f 	bl	8003d9c <next_timeout>
 8003f7e:	4621      	mov	r1, r4
 8003f80:	f7fe ff46 	bl	8002e10 <sys_clock_set_timeout>
	__asm__ volatile(
 8003f84:	f386 8811 	msr	BASEPRI, r6
 8003f88:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8003f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8003f90:	18eb      	adds	r3, r5, r3
 8003f92:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
 8003f96:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
 8003fa2:	f7ff ff23 	bl	8003dec <remove_timeout>
 8003fa6:	f386 8811 	msr	BASEPRI, r6
 8003faa:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8003fae:	6883      	ldr	r3, [r0, #8]
 8003fb0:	4798      	blx	r3
	__asm__ volatile(
 8003fb2:	f04f 0310 	mov.w	r3, #16
 8003fb6:	f3ef 8611 	mrs	r6, BASEPRI
 8003fba:	f383 8812 	msr	BASEPRI_MAX, r3
 8003fbe:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8003fc2:	683c      	ldr	r4, [r7, #0]
 8003fc4:	1b64      	subs	r4, r4, r5
 8003fc6:	e7bb      	b.n	8003f40 <sys_clock_announce+0x20>
 8003fc8:	200002a4 	.word	0x200002a4
 8003fcc:	20000034 	.word	0x20000034
 8003fd0:	20000160 	.word	0x20000160

08003fd4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	f04f 0310 	mov.w	r3, #16
 8003fda:	f3ef 8411 	mrs	r4, BASEPRI
 8003fde:	f383 8812 	msr	BASEPRI_MAX, r3
 8003fe2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8003fe6:	f7ff fecf 	bl	8003d88 <elapsed>
 8003fea:	4a06      	ldr	r2, [pc, #24]	; (8004004 <sys_clock_tick_get+0x30>)
 8003fec:	4603      	mov	r3, r0
 8003fee:	e9d2 0100 	ldrd	r0, r1, [r2]
 8003ff2:	1818      	adds	r0, r3, r0
 8003ff4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 8003ff8:	f384 8811 	msr	BASEPRI, r4
 8003ffc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8004000:	bd10      	pop	{r4, pc}
 8004002:	bf00      	nop
 8004004:	20000160 	.word	0x20000160

08004008 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8004008:	4a02      	ldr	r2, [pc, #8]	; (8004014 <boot_banner+0xc>)
 800400a:	4903      	ldr	r1, [pc, #12]	; (8004018 <boot_banner+0x10>)
 800400c:	4803      	ldr	r0, [pc, #12]	; (800401c <boot_banner+0x14>)
 800400e:	f000 b837 	b.w	8004080 <printk>
 8004012:	bf00      	nop
 8004014:	080051e2 	.word	0x080051e2
 8004018:	080059c0 	.word	0x080059c0
 800401c:	080059e1 	.word	0x080059e1

08004020 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8004020:	4770      	bx	lr

08004022 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
 8004022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004026:	4607      	mov	r7, r0
 8004028:	460e      	mov	r6, r1
 800402a:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
 800402c:	461d      	mov	r5, r3
 800402e:	b30b      	cbz	r3, 8004074 <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = hdr->hdr.desc.len * sizeof(int);
	s_nbr     = hdr->hdr.desc.str_cnt;
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
 8004030:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
 8004032:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = hdr->hdr.desc.str_cnt;
 8004034:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	4414      	add	r4, r2
 800403c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004040:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 8004042:	f04f 0900 	mov.w	r9, #0
 8004046:	45d1      	cmp	r9, sl
 8004048:	d308      	bcc.n	800405c <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
 800404a:	686a      	ldr	r2, [r5, #4]
 800404c:	f105 0308 	add.w	r3, r5, #8
 8004050:	4641      	mov	r1, r8
 8004052:	4638      	mov	r0, r7
 8004054:	46b4      	mov	ip, r6
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
 8004056:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 800405a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 800405c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
 8004060:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
 8004064:	4620      	mov	r0, r4
 8004066:	f000 f93b 	bl	80042e0 <strlen>
 800406a:	3001      	adds	r0, #1
 800406c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 800406e:	f109 0901 	add.w	r9, r9, #1
 8004072:	e7e8      	b.n	8004046 <cbpprintf_external+0x24>
}
 8004074:	f06f 0015 	mvn.w	r0, #21
 8004078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800407c <arch_printk_char_out>:
}
 800407c:	2000      	movs	r0, #0
 800407e:	4770      	bx	lr

08004080 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8004080:	b40f      	push	{r0, r1, r2, r3}
 8004082:	b507      	push	{r0, r1, r2, lr}
 8004084:	a904      	add	r1, sp, #16
 8004086:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 800408a:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
 800408c:	f000 f880 	bl	8004190 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
 8004090:	b003      	add	sp, #12
 8004092:	f85d eb04 	ldr.w	lr, [sp], #4
 8004096:	b004      	add	sp, #16
 8004098:	4770      	bx	lr

0800409a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800409a:	4604      	mov	r4, r0
 800409c:	b508      	push	{r3, lr}
 800409e:	4608      	mov	r0, r1
 80040a0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80040a2:	461a      	mov	r2, r3
 80040a4:	47a0      	blx	r4
	return z_impl_z_current_get();
 80040a6:	f7ff fdef 	bl	8003c88 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80040aa:	f7fd ffb7 	bl	800201c <z_impl_k_thread_abort>

080040ae <encode_uint>:
{
 80040ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80040b4:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 80040b6:	2b6f      	cmp	r3, #111	; 0x6f
{
 80040b8:	4680      	mov	r8, r0
 80040ba:	460f      	mov	r7, r1
 80040bc:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80040be:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 80040c2:	d029      	beq.n	8004118 <encode_uint+0x6a>
 80040c4:	d824      	bhi.n	8004110 <encode_uint+0x62>
		return 10;
 80040c6:	2b58      	cmp	r3, #88	; 0x58
 80040c8:	bf0c      	ite	eq
 80040ca:	2610      	moveq	r6, #16
 80040cc:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 80040ce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 80040d2:	4632      	mov	r2, r6
 80040d4:	2300      	movs	r3, #0
 80040d6:	4640      	mov	r0, r8
 80040d8:	4639      	mov	r1, r7
 80040da:	f7fc f859 	bl	8000190 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80040de:	2a09      	cmp	r2, #9
 80040e0:	b2d4      	uxtb	r4, r2
 80040e2:	d81e      	bhi.n	8004122 <encode_uint+0x74>
 80040e4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80040e6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80040e8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80040ea:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80040ee:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80040f2:	d301      	bcc.n	80040f8 <encode_uint+0x4a>
 80040f4:	45d1      	cmp	r9, sl
 80040f6:	d811      	bhi.n	800411c <encode_uint+0x6e>
	if (conv->flag_hash) {
 80040f8:	782b      	ldrb	r3, [r5, #0]
 80040fa:	069b      	lsls	r3, r3, #26
 80040fc:	d505      	bpl.n	800410a <encode_uint+0x5c>
		if (radix == 8) {
 80040fe:	2e08      	cmp	r6, #8
 8004100:	d115      	bne.n	800412e <encode_uint+0x80>
			conv->altform_0 = true;
 8004102:	78ab      	ldrb	r3, [r5, #2]
 8004104:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8004108:	70ab      	strb	r3, [r5, #2]
}
 800410a:	4648      	mov	r0, r9
 800410c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8004110:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 8004114:	2b70      	cmp	r3, #112	; 0x70
 8004116:	e7d7      	b.n	80040c8 <encode_uint+0x1a>
	switch (specifier) {
 8004118:	2608      	movs	r6, #8
 800411a:	e7d8      	b.n	80040ce <encode_uint+0x20>
		value /= radix;
 800411c:	4680      	mov	r8, r0
 800411e:	460f      	mov	r7, r1
 8004120:	e7d7      	b.n	80040d2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004122:	f1bb 0f19 	cmp.w	fp, #25
 8004126:	bf94      	ite	ls
 8004128:	3437      	addls	r4, #55	; 0x37
 800412a:	3457      	addhi	r4, #87	; 0x57
 800412c:	e7db      	b.n	80040e6 <encode_uint+0x38>
		} else if (radix == 16) {
 800412e:	2e10      	cmp	r6, #16
 8004130:	d1eb      	bne.n	800410a <encode_uint+0x5c>
			conv->altform_0c = true;
 8004132:	78ab      	ldrb	r3, [r5, #2]
 8004134:	f043 0310 	orr.w	r3, r3, #16
 8004138:	e7e6      	b.n	8004108 <encode_uint+0x5a>

0800413a <outs>:
{
 800413a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413e:	4607      	mov	r7, r0
 8004140:	4688      	mov	r8, r1
 8004142:	4615      	mov	r5, r2
 8004144:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8004146:	4614      	mov	r4, r2
 8004148:	42b4      	cmp	r4, r6
 800414a:	d305      	bcc.n	8004158 <outs+0x1e>
 800414c:	b10e      	cbz	r6, 8004152 <outs+0x18>
	return (int)count;
 800414e:	1b60      	subs	r0, r4, r5
 8004150:	e008      	b.n	8004164 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8004152:	7823      	ldrb	r3, [r4, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0fa      	beq.n	800414e <outs+0x14>
		int rc = out((int)*sp++, ctx);
 8004158:	f814 0b01 	ldrb.w	r0, [r4], #1
 800415c:	4641      	mov	r1, r8
 800415e:	47b8      	blx	r7
		if (rc < 0) {
 8004160:	2800      	cmp	r0, #0
 8004162:	daf1      	bge.n	8004148 <outs+0xe>
}
 8004164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004168 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8004168:	4770      	bx	lr

0800416a <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800416a:	2000      	movs	r0, #0
 800416c:	4770      	bx	lr

0800416e <dummy_timestamp>:
}
 800416e:	2000      	movs	r0, #0
 8004170:	4770      	bx	lr

08004172 <default_lf_get_timestamp>:
{
 8004172:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
 8004174:	f000 fc62 	bl	8004a3c <z_impl_k_uptime_ticks>
 8004178:	220a      	movs	r2, #10
 800417a:	2300      	movs	r3, #0
 800417c:	f7fc f808 	bl	8000190 <__aeabi_uldivmod>
}
 8004180:	bd08      	pop	{r3, pc}

08004182 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8004182:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
 8004184:	2100      	movs	r1, #0
 8004186:	4608      	mov	r0, r1
 8004188:	f7fc ffaa 	bl	80010e0 <z_log_init.isra.0>
	}

	return 0;
}
 800418c:	2000      	movs	r0, #0
 800418e:	bd08      	pop	{r3, pc}

08004190 <z_log_vprintk>:
{
 8004190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8004192:	2300      	movs	r3, #0
 8004194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004198:	e9cd 3300 	strd	r3, r3, [sp]
 800419c:	461a      	mov	r2, r3
 800419e:	4619      	mov	r1, r3
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd f8a7 	bl	80012f4 <z_impl_z_log_msg_runtime_vcreate>
}
 80041a6:	b005      	add	sp, #20
 80041a8:	f85d fb04 	ldr.w	pc, [sp], #4

080041ac <z_log_notify_backend_enabled>:
}
 80041ac:	4770      	bx	lr

080041ae <z_log_get_tag>:
}
 80041ae:	2000      	movs	r0, #0
 80041b0:	4770      	bx	lr

080041b2 <z_log_msg_finalize>:
{
 80041b2:	b570      	push	{r4, r5, r6, lr}
 80041b4:	460e      	mov	r6, r1
 80041b6:	4615      	mov	r5, r2
 80041b8:	4619      	mov	r1, r3
	if (!msg) {
 80041ba:	4604      	mov	r4, r0
 80041bc:	b918      	cbnz	r0, 80041c6 <z_log_msg_finalize+0x14>
}
 80041be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 80041c2:	f7fd b83b 	b.w	800123c <z_log_dropped>
	if (data) {
 80041c6:	b13b      	cbz	r3, 80041d8 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
 80041c8:	f3c2 2349 	ubfx	r3, r2, #9, #10
 80041cc:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
 80041ce:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 80041d2:	4418      	add	r0, r3
 80041d4:	f000 f894 	bl	8004300 <memcpy>
	msg->hdr.source = source;
 80041d8:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
 80041dc:	4620      	mov	r0, r4
}
 80041de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
 80041e2:	f7fd b849 	b.w	8001278 <z_log_msg_commit>

080041e6 <out_func>:
{
 80041e6:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
 80041e8:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
 80041ec:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
 80041f0:	6852      	ldr	r2, [r2, #4]
 80041f2:	2101      	movs	r1, #1
 80041f4:	f10d 0007 	add.w	r0, sp, #7
 80041f8:	4798      	blx	r3
}
 80041fa:	2000      	movs	r0, #0
 80041fc:	b003      	add	sp, #12
 80041fe:	f85d fb04 	ldr.w	pc, [sp], #4

08004202 <cr_out_func>:
	if (c == '\n') {
 8004202:	280a      	cmp	r0, #10
{
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4604      	mov	r4, r0
 8004208:	460d      	mov	r5, r1
	if (c == '\n') {
 800420a:	d102      	bne.n	8004212 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
 800420c:	200d      	movs	r0, #13
 800420e:	f7ff ffea 	bl	80041e6 <out_func>
	out_func(c, ctx);
 8004212:	4629      	mov	r1, r5
 8004214:	4620      	mov	r0, r4
 8004216:	f7ff ffe6 	bl	80041e6 <out_func>
}
 800421a:	2000      	movs	r0, #0
 800421c:	bd38      	pop	{r3, r4, r5, pc}

0800421e <buffer_write>:
{
 800421e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004220:	4606      	mov	r6, r0
 8004222:	460d      	mov	r5, r1
 8004224:	4614      	mov	r4, r2
 8004226:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 8004228:	4621      	mov	r1, r4
 800422a:	4628      	mov	r0, r5
 800422c:	463a      	mov	r2, r7
 800422e:	47b0      	blx	r6
	} while (len != 0);
 8004230:	1a24      	subs	r4, r4, r0
		buf += processed;
 8004232:	4405      	add	r5, r0
	} while (len != 0);
 8004234:	d1f8      	bne.n	8004228 <buffer_write+0xa>
}
 8004236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004238 <cbvprintf>:
{
 8004238:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 800423a:	2400      	movs	r4, #0
 800423c:	9400      	str	r4, [sp, #0]
 800423e:	f7fc fb87 	bl	8000950 <z_cbvprintf_impl>
}
 8004242:	b002      	add	sp, #8
 8004244:	bd10      	pop	{r4, pc}

08004246 <log_output_flush>:
{
 8004246:	b510      	push	{r4, lr}
		     output->control_block->offset,
 8004248:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800424a:	6881      	ldr	r1, [r0, #8]
{
 800424c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 800424e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004252:	6800      	ldr	r0, [r0, #0]
 8004254:	f7ff ffe3 	bl	800421e <buffer_write>
	output->control_block->offset = 0;
 8004258:	6863      	ldr	r3, [r4, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	bd10      	pop	{r4, pc}

08004260 <log_backend_uart_init>:
}
 8004260:	4770      	bx	lr

08004262 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
 8004262:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8004264:	ab0b      	add	r3, sp, #44	; 0x2c
 8004266:	9305      	str	r3, [sp, #20]
 8004268:	9303      	str	r3, [sp, #12]
 800426a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800426c:	9302      	str	r3, [sp, #8]
 800426e:	2300      	movs	r3, #0
 8004270:	e9cd 3300 	strd	r3, r3, [sp]
 8004274:	2201      	movs	r2, #1
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd f83c 	bl	80012f4 <z_impl_z_log_msg_runtime_vcreate>
}
 800427c:	b007      	add	sp, #28
 800427e:	f85d fb04 	ldr.w	pc, [sp], #4

08004282 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8004282:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8004284:	6800      	ldr	r0, [r0, #0]
 8004286:	f7fd ba85 	b.w	8001794 <z_arm_fatal_error>

0800428a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800428a:	2100      	movs	r1, #0
 800428c:	2001      	movs	r0, #1
 800428e:	f7fd ba81 	b.w	8001794 <z_arm_fatal_error>

08004292 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8004292:	b508      	push	{r3, lr}
	handler();
 8004294:	f7fd faf4 	bl	8001880 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8004298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800429c:	f7fd bbc8 	b.w	8001a30 <z_arm_exc_exit>

080042a0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
 80042a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 80042a2:	ab0b      	add	r3, sp, #44	; 0x2c
 80042a4:	9305      	str	r3, [sp, #20]
 80042a6:	9303      	str	r3, [sp, #12]
 80042a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042aa:	9302      	str	r3, [sp, #8]
 80042ac:	2300      	movs	r3, #0
 80042ae:	e9cd 3300 	strd	r3, r3, [sp]
 80042b2:	2201      	movs	r2, #1
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fd f81d 	bl	80012f4 <z_impl_z_log_msg_runtime_vcreate>
}
 80042ba:	b007      	add	sp, #28
 80042bc:	f85d fb04 	ldr.w	pc, [sp], #4

080042c0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
 80042c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 80042c2:	ab0b      	add	r3, sp, #44	; 0x2c
 80042c4:	9305      	str	r3, [sp, #20]
 80042c6:	9303      	str	r3, [sp, #12]
 80042c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042ca:	9302      	str	r3, [sp, #8]
 80042cc:	2300      	movs	r3, #0
 80042ce:	e9cd 3300 	strd	r3, r3, [sp]
 80042d2:	2201      	movs	r2, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fd f80d 	bl	80012f4 <z_impl_z_log_msg_runtime_vcreate>
}
 80042da:	b007      	add	sp, #28
 80042dc:	f85d fb04 	ldr.w	pc, [sp], #4

080042e0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 80042e0:	4603      	mov	r3, r0
	size_t n = 0;
 80042e2:	2000      	movs	r0, #0

	while (*s != '\0') {
 80042e4:	5c1a      	ldrb	r2, [r3, r0]
 80042e6:	b902      	cbnz	r2, 80042ea <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 80042e8:	4770      	bx	lr
		n++;
 80042ea:	3001      	adds	r0, #1
 80042ec:	e7fa      	b.n	80042e4 <strlen+0x4>

080042ee <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 80042ee:	4603      	mov	r3, r0
	size_t n = 0;
 80042f0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 80042f2:	5c1a      	ldrb	r2, [r3, r0]
 80042f4:	b10a      	cbz	r2, 80042fa <strnlen+0xc>
 80042f6:	4288      	cmp	r0, r1
 80042f8:	d100      	bne.n	80042fc <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 80042fa:	4770      	bx	lr
		n++;
 80042fc:	3001      	adds	r0, #1
 80042fe:	e7f8      	b.n	80042f2 <strnlen+0x4>

08004300 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8004300:	b510      	push	{r4, lr}
 8004302:	1e43      	subs	r3, r0, #1
 8004304:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8004306:	4291      	cmp	r1, r2
 8004308:	d100      	bne.n	800430c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 800430a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 800430c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004310:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8004314:	e7f7      	b.n	8004306 <memcpy+0x6>

08004316 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8004316:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8004318:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 800431a:	4603      	mov	r3, r0
	while (n > 0) {
 800431c:	4293      	cmp	r3, r2
 800431e:	d100      	bne.n	8004322 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8004320:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8004322:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8004326:	e7f9      	b.n	800431c <memset+0x6>

08004328 <_stdout_hook_default>:
}
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	4770      	bx	lr

0800432e <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800432e:	2200      	movs	r2, #0
{
 8004330:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8004332:	4611      	mov	r1, r2
 8004334:	2006      	movs	r0, #6
 8004336:	f7fd fa8b 	bl	8001850 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800433a:	2200      	movs	r2, #0
 800433c:	4611      	mov	r1, r2
 800433e:	2007      	movs	r0, #7
 8004340:	f7fd fa86 	bl	8001850 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8004344:	2200      	movs	r2, #0
 8004346:	4611      	mov	r1, r2
 8004348:	2008      	movs	r0, #8
 800434a:	f7fd fa81 	bl	8001850 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800434e:	2200      	movs	r2, #0
 8004350:	4611      	mov	r1, r2
 8004352:	2009      	movs	r0, #9
 8004354:	f7fd fa7c 	bl	8001850 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8004358:	2200      	movs	r2, #0
 800435a:	4611      	mov	r1, r2
 800435c:	200a      	movs	r0, #10
 800435e:	f7fd fa77 	bl	8001850 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8004362:	2200      	movs	r2, #0
 8004364:	4611      	mov	r1, r2
 8004366:	2017      	movs	r0, #23
 8004368:	f7fd fa72 	bl	8001850 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800436c:	2200      	movs	r2, #0
 800436e:	4611      	mov	r1, r2
 8004370:	2028      	movs	r0, #40	; 0x28
 8004372:	f7fd fa6d 	bl	8001850 <z_arm_irq_priority_set>
}
 8004376:	2000      	movs	r0, #0
 8004378:	bd08      	pop	{r3, pc}

0800437a <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 800437a:	6902      	ldr	r2, [r0, #16]
 800437c:	2110      	movs	r1, #16
 800437e:	200a      	movs	r0, #10
 8004380:	f7fd bf46 	b.w	8002210 <__stm32_exti_isr.isra.0>

08004384 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 8004384:	6902      	ldr	r2, [r0, #16]
 8004386:	210a      	movs	r1, #10
 8004388:	2005      	movs	r0, #5
 800438a:	f7fd bf41 	b.w	8002210 <__stm32_exti_isr.isra.0>

0800438e <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 800438e:	6902      	ldr	r2, [r0, #16]
 8004390:	2105      	movs	r1, #5
 8004392:	2004      	movs	r0, #4
 8004394:	f7fd bf3c 	b.w	8002210 <__stm32_exti_isr.isra.0>

08004398 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 8004398:	6902      	ldr	r2, [r0, #16]
 800439a:	2104      	movs	r1, #4
 800439c:	2003      	movs	r0, #3
 800439e:	f7fd bf37 	b.w	8002210 <__stm32_exti_isr.isra.0>

080043a2 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 80043a2:	6902      	ldr	r2, [r0, #16]
 80043a4:	2103      	movs	r1, #3
 80043a6:	2002      	movs	r0, #2
 80043a8:	f7fd bf32 	b.w	8002210 <__stm32_exti_isr.isra.0>

080043ac <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 80043ac:	6902      	ldr	r2, [r0, #16]
 80043ae:	2102      	movs	r1, #2
 80043b0:	2001      	movs	r0, #1
 80043b2:	f7fd bf2d 	b.w	8002210 <__stm32_exti_isr.isra.0>

080043b6 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 80043b6:	6902      	ldr	r2, [r0, #16]
 80043b8:	2101      	movs	r1, #1
 80043ba:	2000      	movs	r0, #0
 80043bc:	f7fd bf28 	b.w	8002210 <__stm32_exti_isr.isra.0>

080043c0 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 80043c0:	680b      	ldr	r3, [r1, #0]
 80043c2:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 80043c6:	2a18      	cmp	r2, #24
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 80043c8:	bf9f      	itttt	ls
 80043ca:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 80043ce:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val |= pclken->enr;
 80043d2:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 80043d4:	681a      	ldrls	r2, [r3, #0]
	reg_val |= pclken->enr;
 80043d6:	bf9d      	ittte	ls
 80043d8:	430a      	orrls	r2, r1
	return 0;
 80043da:	2000      	movls	r0, #0
	*reg = reg_val;
 80043dc:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 80043de:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 80043e2:	4770      	bx	lr

080043e4 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 80043e4:	680b      	ldr	r3, [r1, #0]
 80043e6:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 80043ea:	2a18      	cmp	r2, #24
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 80043ec:	bf9f      	itttt	ls
 80043ee:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 80043f2:	f503 3304 	addls.w	r3, r3, #135168	; 0x21000
	reg_val &= ~pclken->enr;
 80043f6:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 80043f8:	681a      	ldrls	r2, [r3, #0]
	reg_val &= ~pclken->enr;
 80043fa:	bf9d      	ittte	ls
 80043fc:	438a      	bicls	r2, r1
	return 0;
 80043fe:	2000      	movls	r0, #0
	*reg = reg_val;
 8004400:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8004402:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8004406:	4770      	bx	lr

08004408 <stm32_clock_control_configure>:
	err = enabled_clock(pclken->bus);
 8004408:	680b      	ldr	r3, [r1, #0]
	switch (src_clk) {
 800440a:	2b01      	cmp	r3, #1
 800440c:	d002      	beq.n	8004414 <stm32_clock_control_configure+0xc>
 800440e:	3b06      	subs	r3, #6
 8004410:	2b04      	cmp	r3, #4
 8004412:	d80f      	bhi.n	8004434 <stm32_clock_control_configure+0x2c>
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 8004414:	6849      	ldr	r1, [r1, #4]
					STM32_CLOCK_REG_GET(pclken->enr));
 8004416:	b2cb      	uxtb	r3, r1
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) +
 8004418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800441c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 8004420:	f3c1 4202 	ubfx	r2, r1, #16, #3
	reg_val = *reg;
 8004424:	6818      	ldr	r0, [r3, #0]
					STM32_CLOCK_SHIFT_GET(pclken->enr);
 8004426:	f3c1 2104 	ubfx	r1, r1, #8, #5
	dt_val = STM32_CLOCK_VAL_GET(pclken->enr) <<
 800442a:	408a      	lsls	r2, r1
	reg_val |= dt_val;
 800442c:	4302      	orrs	r2, r0
	*reg = reg_val;
 800442e:	601a      	str	r2, [r3, #0]
	return 0;
 8004430:	2000      	movs	r0, #0
 8004432:	4770      	bx	lr
	switch (src_clk) {
 8004434:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8004438:	4770      	bx	lr

0800443a <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800443a:	6843      	ldr	r3, [r0, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800443e:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8004440:	600b      	str	r3, [r1, #0]
}
 8004442:	2000      	movs	r0, #0
 8004444:	4770      	bx	lr

08004446 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004446:	6843      	ldr	r3, [r0, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800444a:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800444c:	4042      	eors	r2, r0
 800444e:	400a      	ands	r2, r1
 8004450:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8004452:	615a      	str	r2, [r3, #20]
}
 8004454:	2000      	movs	r0, #0
 8004456:	4770      	bx	lr

08004458 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004458:	6843      	ldr	r3, [r0, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
}
 800445c:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 800445e:	6199      	str	r1, [r3, #24]
}
 8004460:	4770      	bx	lr

08004462 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004462:	6843      	ldr	r3, [r0, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
}
 8004466:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8004468:	6299      	str	r1, [r3, #40]	; 0x28
 800446a:	4770      	bx	lr

0800446c <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800446c:	6843      	ldr	r3, [r0, #4]
 800446e:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8004470:	6953      	ldr	r3, [r2, #20]
 8004472:	404b      	eors	r3, r1
 8004474:	6153      	str	r3, [r2, #20]
}
 8004476:	2000      	movs	r0, #0
 8004478:	4770      	bx	lr

0800447a <gpio_stm32_manage_callback>:
{
 800447a:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 800447c:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 800447e:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8004480:	b148      	cbz	r0, 8004496 <gpio_stm32_manage_callback+0x1c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004482:	4288      	cmp	r0, r1
 8004484:	d113      	bne.n	80044ae <gpio_stm32_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
 8004486:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8004488:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 800448a:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 800448c:	42a1      	cmp	r1, r4
 800448e:	d100      	bne.n	8004492 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8004490:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8004492:	2000      	movs	r0, #0
 8004494:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8004496:	b97a      	cbnz	r2, 80044b8 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8004498:	2000      	movs	r0, #0
}
 800449a:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800449c:	4281      	cmp	r1, r0
 800449e:	d106      	bne.n	80044ae <gpio_stm32_manage_callback+0x34>
	return node->next;
 80044a0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 80044a2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80044a4:	68d8      	ldr	r0, [r3, #12]
 80044a6:	4281      	cmp	r1, r0
 80044a8:	d1f3      	bne.n	8004492 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 80044aa:	60dc      	str	r4, [r3, #12]
}
 80044ac:	e7f1      	b.n	8004492 <gpio_stm32_manage_callback+0x18>
	return node->next;
 80044ae:	4604      	mov	r4, r0
 80044b0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d1f2      	bne.n	800449c <gpio_stm32_manage_callback+0x22>
			if (!set) {
 80044b6:	b13a      	cbz	r2, 80044c8 <gpio_stm32_manage_callback+0x4e>
	return list->head;
 80044b8:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 80044ba:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80044bc:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 80044be:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 80044c0:	2a00      	cmp	r2, #0
 80044c2:	d1e9      	bne.n	8004498 <gpio_stm32_manage_callback+0x1e>
	list->tail = node;
 80044c4:	60d9      	str	r1, [r3, #12]
}
 80044c6:	e7e7      	b.n	8004498 <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 80044c8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 80044cc:	e7e5      	b.n	800449a <gpio_stm32_manage_callback+0x20>

080044ce <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 80044ce:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80044d0:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 80044d2:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80044d4:	6867      	ldr	r7, [r4, #4]
 80044d6:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 80044d8:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80044da:	f3c2 1380 	ubfx	r3, r2, #6, #1
 80044de:	ea27 0700 	bic.w	r7, r7, r0
 80044e2:	408b      	lsls	r3, r1
 80044e4:	433b      	orrs	r3, r7
 80044e6:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 80044ec:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80044f0:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80044f4:	f04f 0e03 	mov.w	lr, #3
 80044f8:	007f      	lsls	r7, r7, #1
 80044fa:	fa0e f707 	lsl.w	r7, lr, r7
 80044fe:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8004506:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800450a:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 800450e:	007f      	lsls	r7, r7, #1
 8004510:	40bb      	lsls	r3, r7
 8004512:	ea43 030c 	orr.w	r3, r3, ip
 8004516:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004518:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800451c:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004520:	68e7      	ldr	r7, [r4, #12]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	fa0e f303 	lsl.w	r3, lr, r3
 8004528:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452c:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8004530:	fab3 f383 	clz	r3, r3
 8004534:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8004538:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800453a:	f3c2 2241 	ubfx	r2, r2, #9, #2
 800453e:	409a      	lsls	r2, r3
 8004540:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8004542:	2d20      	cmp	r5, #32
 8004544:	60e2      	str	r2, [r4, #12]
 8004546:	d116      	bne.n	8004576 <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 8004548:	2907      	cmp	r1, #7
 800454a:	dc2b      	bgt.n	80045a4 <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004550:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 8004552:	b32b      	cbz	r3, 80045a0 <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 8004554:	fab3 f383 	clz	r3, r3
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	210f      	movs	r1, #15
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	fa06 f303 	lsl.w	r3, r6, r3
 8004572:	4313      	orrs	r3, r2
 8004574:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 800457a:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800457e:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	fa90 f0a0 	rbit	r0, r0
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8004588:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800458c:	092d      	lsrs	r5, r5, #4
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	0040      	lsls	r0, r0, #1
 8004594:	ea22 0303 	bic.w	r3, r2, r3
 8004598:	4085      	lsls	r5, r0
 800459a:	431d      	orrs	r5, r3
 800459c:	6025      	str	r5, [r4, #0]
}
 800459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 80045a0:	462b      	mov	r3, r5
 80045a2:	e7d9      	b.n	8004558 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80045a4:	0a03      	lsrs	r3, r0, #8
 80045a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80045ac:	b182      	cbz	r2, 80045d0 <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 80045ae:	fab2 f282 	clz	r2, r2
 80045b2:	0092      	lsls	r2, r2, #2
 80045b4:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80045ba:	fab3 f383 	clz	r3, r3
 80045be:	fa07 f202 	lsl.w	r2, r7, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	ea21 0202 	bic.w	r2, r1, r2
 80045c8:	409e      	lsls	r6, r3
 80045ca:	4316      	orrs	r6, r2
 80045cc:	6266      	str	r6, [r4, #36]	; 0x24
}
 80045ce:	e7d2      	b.n	8004576 <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 80045d0:	462a      	mov	r2, r5
 80045d2:	e7ee      	b.n	80045b2 <gpio_stm32_configure_raw.isra.0+0xe4>

080045d4 <gpio_stm32_config>:
{
 80045d4:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 80045d6:	039a      	lsls	r2, r3, #14
{
 80045d8:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 80045da:	d518      	bpl.n	800460e <gpio_stm32_config+0x3a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80045dc:	079c      	lsls	r4, r3, #30
 80045de:	d50f      	bpl.n	8004600 <gpio_stm32_config+0x2c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80045e0:	075a      	lsls	r2, r3, #29
 80045e2:	d52d      	bpl.n	8004640 <gpio_stm32_config+0x6c>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80045e4:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80045e6:	06dc      	lsls	r4, r3, #27
 80045e8:	d50c      	bpl.n	8004604 <gpio_stm32_config+0x30>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80045ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80045ee:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 80045f2:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80045f4:	d018      	beq.n	8004628 <gpio_stm32_config+0x54>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80045f6:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80045f8:	2301      	movs	r3, #1
 80045fa:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 80045fc:	61a3      	str	r3, [r4, #24]
	return 0;
 80045fe:	e00d      	b.n	800461c <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8004600:	2210      	movs	r2, #16
 8004602:	e7f0      	b.n	80045e6 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8004604:	069c      	lsls	r4, r3, #26
 8004606:	d5f2      	bpl.n	80045ee <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8004608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 800460c:	e7ef      	b.n	80045ee <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 800460e:	03dc      	lsls	r4, r3, #15
 8004610:	d511      	bpl.n	8004636 <gpio_stm32_config+0x62>
		if ((flags & GPIO_PULL_UP) != 0) {
 8004612:	06da      	lsls	r2, r3, #27
 8004614:	d411      	bmi.n	800463a <gpio_stm32_config+0x66>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8004616:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800461a:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 800461c:	6840      	ldr	r0, [r0, #4]
 800461e:	2300      	movs	r3, #0
 8004620:	f7ff ff55 	bl	80044ce <gpio_stm32_configure_raw.isra.0>
	return 0;
 8004624:	2000      	movs	r0, #0
}
 8004626:	bd10      	pop	{r4, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8004628:	035b      	lsls	r3, r3, #13
 800462a:	d5f7      	bpl.n	800461c <gpio_stm32_config+0x48>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800462c:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800462e:	2301      	movs	r3, #1
 8004630:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8004632:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8004634:	e7f2      	b.n	800461c <gpio_stm32_config+0x48>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8004636:	2230      	movs	r2, #48	; 0x30
 8004638:	e7f0      	b.n	800461c <gpio_stm32_config+0x48>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800463a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463e:	e7ed      	b.n	800461c <gpio_stm32_config+0x48>
				return -ENOTSUP;
 8004640:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004644:	e7ef      	b.n	8004626 <gpio_stm32_config+0x52>

08004646 <gpio_stm32_isr>:
{
 8004646:	b570      	push	{r4, r5, r6, lr}
 8004648:	460b      	mov	r3, r1
 800464a:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800464c:	b121      	cbz	r1, 8004658 <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800464e:	2501      	movs	r5, #1
 8004650:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8004652:	680c      	ldr	r4, [r1, #0]
 8004654:	4085      	lsls	r5, r0
 8004656:	b901      	cbnz	r1, 800465a <gpio_stm32_isr+0x14>
}
 8004658:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 800465a:	688a      	ldr	r2, [r1, #8]
 800465c:	402a      	ands	r2, r5
 800465e:	d002      	beq.n	8004666 <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8004660:	684b      	ldr	r3, [r1, #4]
 8004662:	4630      	mov	r0, r6
 8004664:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8004666:	b11c      	cbz	r4, 8004670 <gpio_stm32_isr+0x2a>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	4621      	mov	r1, r4
 800466c:	461c      	mov	r4, r3
 800466e:	e7f2      	b.n	8004656 <gpio_stm32_isr+0x10>
 8004670:	4623      	mov	r3, r4
 8004672:	e7fa      	b.n	800466a <gpio_stm32_isr+0x24>

08004674 <gpio_stm32_configure>:
{
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	461f      	mov	r7, r3
 8004678:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800467a:	6840      	ldr	r0, [r0, #4]
{
 800467c:	460e      	mov	r6, r1
 800467e:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8004680:	f7ff ff25 	bl	80044ce <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8004684:	2f11      	cmp	r7, #17
 8004686:	d108      	bne.n	800469a <gpio_stm32_configure+0x26>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004688:	2301      	movs	r3, #1
 800468a:	fa03 f606 	lsl.w	r6, r3, r6
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
		if (gpio_out == STM32_ODR_1) {
 8004692:	052a      	lsls	r2, r5, #20
	WRITE_REG(gpio->BSRR, pins);
 8004694:	bf4c      	ite	mi
 8004696:	619e      	strmi	r6, [r3, #24]
 8004698:	629e      	strpl	r6, [r3, #40]	; 0x28
}
 800469a:	2000      	movs	r0, #0
 800469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800469e <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800469e:	6341      	str	r1, [r0, #52]	; 0x34
}
 80046a0:	4770      	bx	lr

080046a2 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 80046a2:	6381      	str	r1, [r0, #56]	; 0x38
}
 80046a4:	4770      	bx	lr

080046a6 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 80046a6:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80046a8:	4770      	bx	lr

080046aa <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 80046aa:	6401      	str	r1, [r0, #64]	; 0x40
}
 80046ac:	4770      	bx	lr

080046ae <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80046ae:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80046b0:	6581      	str	r1, [r0, #88]	; 0x58
}
 80046b2:	4770      	bx	lr

080046b4 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 80046b4:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 80046b6:	4770      	bx	lr

080046b8 <pwm_stm32_get_cycles_per_sec>:
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80046b8:	6841      	ldr	r1, [r0, #4]
 80046ba:	6903      	ldr	r3, [r0, #16]
 80046bc:	6849      	ldr	r1, [r1, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2000      	movs	r0, #0
 80046c2:	3101      	adds	r1, #1
 80046c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80046c8:	e9c2 3000 	strd	r3, r0, [r2]
}
 80046cc:	4770      	bx	lr

080046ce <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
 80046ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 80046d0:	ab0b      	add	r3, sp, #44	; 0x2c
 80046d2:	9305      	str	r3, [sp, #20]
 80046d4:	9303      	str	r3, [sp, #12]
 80046d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	2300      	movs	r3, #0
 80046dc:	e9cd 3300 	strd	r3, r3, [sp]
 80046e0:	2201      	movs	r2, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fc fe06 	bl	80012f4 <z_impl_z_log_msg_runtime_vcreate>
}
 80046e8:	b007      	add	sp, #28
 80046ea:	f85d fb04 	ldr.w	pc, [sp], #4

080046ee <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 80046ee:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80046f0:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80046f2:	69d0      	ldr	r0, [r2, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80046f4:	69d1      	ldr	r1, [r2, #28]
 80046f6:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80046f8:	69d1      	ldr	r1, [r2, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80046fa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 80046fe:	bf48      	it	mi
 8004700:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004704:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8004706:	69d1      	ldr	r1, [r2, #28]
		err |= UART_ERROR_FRAMING;
 8004708:	bf48      	it	mi
 800470a:	f040 0004 	orrmi.w	r0, r0, #4
 800470e:	05c9      	lsls	r1, r1, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8004710:	bf42      	ittt	mi
 8004712:	f44f 7180 	movmi.w	r1, #256	; 0x100
		err |= UART_BREAK;
 8004716:	f040 0008 	orrmi.w	r0, r0, #8
 800471a:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_OVERRUN) {
 800471c:	07c2      	lsls	r2, r0, #31
		LL_USART_ClearFlag_ORE(config->usart);
 800471e:	bf42      	ittt	mi
 8004720:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004722:	2108      	movmi	r1, #8
 8004724:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_PARITY) {
 8004726:	0781      	lsls	r1, r0, #30
		LL_USART_ClearFlag_PE(config->usart);
 8004728:	bf42      	ittt	mi
 800472a:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800472c:	2101      	movmi	r1, #1
 800472e:	6211      	strmi	r1, [r2, #32]
	if (err & UART_ERROR_FRAMING) {
 8004730:	0742      	lsls	r2, r0, #29
		LL_USART_ClearFlag_FE(config->usart);
 8004732:	bf42      	ittt	mi
 8004734:	681a      	ldrmi	r2, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8004736:	2102      	movmi	r1, #2
 8004738:	6211      	strmi	r1, [r2, #32]
	LL_USART_ClearFlag_NE(config->usart);
 800473a:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800473c:	2204      	movs	r2, #4
 800473e:	621a      	str	r2, [r3, #32]
}
 8004740:	4770      	bx	lr

08004742 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
 8004742:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8004744:	ab0b      	add	r3, sp, #44	; 0x2c
 8004746:	9305      	str	r3, [sp, #20]
 8004748:	9303      	str	r3, [sp, #12]
 800474a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800474c:	9302      	str	r3, [sp, #8]
 800474e:	2300      	movs	r3, #0
 8004750:	e9cd 3300 	strd	r3, r3, [sp]
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc fdcd 	bl	80012f4 <z_impl_z_log_msg_runtime_vcreate>
}
 800475a:	b007      	add	sp, #28
 800475c:	f85d fb04 	ldr.w	pc, [sp], #4

08004760 <uart_stm32_poll_out>:
{
 8004760:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8004762:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8004764:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8004766:	69d3      	ldr	r3, [r2, #28]
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	d5fc      	bpl.n	8004766 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 800476c:	f04f 0210 	mov.w	r2, #16
 8004770:	f3ef 8311 	mrs	r3, BASEPRI
 8004774:	f382 8812 	msr	BASEPRI_MAX, r2
 8004778:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 800477c:	6802      	ldr	r2, [r0, #0]
 800477e:	69d4      	ldr	r4, [r2, #28]
 8004780:	0624      	lsls	r4, r4, #24
 8004782:	d404      	bmi.n	800478e <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 800478c:	e7ea      	b.n	8004764 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800478e:	8511      	strh	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
}
 8004798:	bd10      	pop	{r4, pc}

0800479a <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 800479a:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800479c:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800479e:	69d0      	ldr	r0, [r2, #28]
 80047a0:	0700      	lsls	r0, r0, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80047a2:	bf44      	itt	mi
 80047a4:	2008      	movmi	r0, #8
 80047a6:	6210      	strmi	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 80047a8:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80047ae:	bf43      	ittte	mi
 80047b0:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 80047b2:	700b      	strbmi	r3, [r1, #0]
	return 0;
 80047b4:	2000      	movmi	r0, #0
		return -1;
 80047b6:	f04f 30ff 	movpl.w	r0, #4294967295
}
 80047ba:	4770      	bx	lr

080047bc <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80047bc:	6903      	ldr	r3, [r0, #16]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 80047c2:	6843      	ldr	r3, [r0, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d0:	d035      	beq.n	800483e <uart_stm32_config_get+0x82>
 80047d2:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 80047d6:	f1dc 0300 	rsbs	r3, ip, #0
 80047da:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80047de:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 80047e0:	6843      	ldr	r3, [r0, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80047ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ee:	d028      	beq.n	8004842 <uart_stm32_config_get+0x86>
 80047f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047f4:	d027      	beq.n	8004846 <uart_stm32_config_get+0x8a>
		return UART_CFG_STOP_BITS_2;
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80047fe:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 8004800:	6843      	ldr	r3, [r0, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8004804:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004806:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8004808:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	switch (db) {
 800480c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004814:	d019      	beq.n	800484a <uart_stm32_config_get+0x8e>
 8004816:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800481a:	d11b      	bne.n	8004854 <uart_stm32_config_get+0x98>
			return UART_CFG_DATA_BITS_7;
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8004824:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8004826:	6843      	ldr	r3, [r0, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8004830:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8004834:	4253      	negs	r3, r2
 8004836:	4153      	adcs	r3, r2
 8004838:	71cb      	strb	r3, [r1, #7]
}
 800483a:	2000      	movs	r0, #0
 800483c:	4770      	bx	lr
	switch (parity) {
 800483e:	2302      	movs	r3, #2
 8004840:	e7cd      	b.n	80047de <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 8004842:	2300      	movs	r3, #0
 8004844:	e7db      	b.n	80047fe <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 8004846:	2302      	movs	r3, #2
 8004848:	e7d9      	b.n	80047fe <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf14      	ite	ne
 800484e:	2303      	movne	r3, #3
 8004850:	2304      	moveq	r3, #4
 8004852:	e7e7      	b.n	8004824 <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf14      	ite	ne
 8004858:	2302      	movne	r3, #2
 800485a:	2303      	moveq	r3, #3
 800485c:	e7e2      	b.n	8004824 <uart_stm32_config_get+0x68>

0800485e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800485e:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
 8004860:	6803      	ldr	r3, [r0, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8004862:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
 8004866:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8004868:	7905      	ldrb	r5, [r0, #4]
 800486a:	6804      	ldr	r4, [r0, #0]
 800486c:	4435      	add	r5, r6
 800486e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004872:	42a3      	cmp	r3, r4
 8004874:	d902      	bls.n	800487c <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
 8004876:	f06f 0001 	mvn.w	r0, #1
}
 800487a:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
 800487c:	795c      	ldrb	r4, [r3, #5]
 800487e:	428c      	cmp	r4, r1
 8004880:	d001      	beq.n	8004886 <pinctrl_lookup_state+0x28>
		(*state)++;
 8004882:	3308      	adds	r3, #8
 8004884:	e7ef      	b.n	8004866 <pinctrl_lookup_state+0x8>
			return 0;
 8004886:	2000      	movs	r0, #0
 8004888:	e7f7      	b.n	800487a <pinctrl_lookup_state+0x1c>

0800488a <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 800488a:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8004890:	e9c0 2302 	strd	r2, r3, [r0, #8]
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8004894:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8004896:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8004898:	6103      	str	r3, [r0, #16]
}
 800489a:	4770      	bx	lr

0800489c <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 800489c:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 800489e:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 80048a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 80048a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80048aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 80048ae:	4770      	bx	lr

080048b0 <z_device_state_init>:
}
 80048b0:	4770      	bx	lr

080048b2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 80048b2:	b138      	cbz	r0, 80048c4 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80048b4:	68c3      	ldr	r3, [r0, #12]
 80048b6:	8818      	ldrh	r0, [r3, #0]
 80048b8:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80048bc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 80048c0:	4258      	negs	r0, r3
 80048c2:	4158      	adcs	r0, r3
}
 80048c4:	4770      	bx	lr

080048c6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
 80048c6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 80048c8:	ab0b      	add	r3, sp, #44	; 0x2c
 80048ca:	9305      	str	r3, [sp, #20]
 80048cc:	9303      	str	r3, [sp, #12]
 80048ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d0:	9302      	str	r3, [sp, #8]
 80048d2:	2300      	movs	r3, #0
 80048d4:	e9cd 3300 	strd	r3, r3, [sp]
 80048d8:	2201      	movs	r2, #1
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fc fd0a 	bl	80012f4 <z_impl_z_log_msg_runtime_vcreate>
}
 80048e0:	b007      	add	sp, #28
 80048e2:	f85d fb04 	ldr.w	pc, [sp], #4

080048e6 <arch_system_halt>:
	__asm__ volatile(
 80048e6:	f04f 0210 	mov.w	r2, #16
 80048ea:	f3ef 8311 	mrs	r3, BASEPRI
 80048ee:	f382 8812 	msr	BASEPRI_MAX, r2
 80048f2:	f3bf 8f6f 	isb	sy
	for (;;) {
 80048f6:	e7fe      	b.n	80048f6 <arch_system_halt+0x10>

080048f8 <z_early_memset>:
	(void) memset(dst, c, n);
 80048f8:	f7ff bd0d 	b.w	8004316 <memset>

080048fc <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 80048fc:	f7ff bd00 	b.w	8004300 <memcpy>

08004900 <k_thread_name_get>:
}
 8004900:	2000      	movs	r0, #0
 8004902:	4770      	bx	lr

08004904 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8004904:	b508      	push	{r3, lr}
 8004906:	f04f 0210 	mov.w	r2, #16
 800490a:	f3ef 8311 	mrs	r3, BASEPRI
 800490e:	f382 8812 	msr	BASEPRI_MAX, r2
 8004912:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8004916:	f7fc ff2f 	bl	8001778 <arch_cpu_idle>
 800491a:	e7f4      	b.n	8004906 <idle+0x2>

0800491c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 800491c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8004920:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8004922:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8004924:	2300      	movs	r3, #0
	node->prev = NULL;
 8004926:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 800492a:	4770      	bx	lr

0800492c <unpend_thread_no_timeout>:
{
 800492c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 800492e:	f7ff fff5 	bl	800491c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8004932:	7b43      	ldrb	r3, [r0, #13]
 8004934:	f023 0302 	bic.w	r3, r3, #2
 8004938:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	6083      	str	r3, [r0, #8]
}
 800493e:	bd08      	pop	{r3, pc}

08004940 <z_thread_timeout>:
{
 8004940:	b510      	push	{r4, lr}
 8004942:	4601      	mov	r1, r0
 8004944:	f04f 0310 	mov.w	r3, #16
 8004948:	f3ef 8411 	mrs	r4, BASEPRI
 800494c:	f383 8812 	msr	BASEPRI_MAX, r3
 8004950:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8004954:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8004958:	f013 0f28 	tst.w	r3, #40	; 0x28
 800495c:	d10d      	bne.n	800497a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 800495e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8004962:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8004964:	b10b      	cbz	r3, 800496a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8004966:	f7ff ffe1 	bl	800492c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800496a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 800496e:	f023 0314 	bic.w	r3, r3, #20
 8004972:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8004976:	f7fe ff9b 	bl	80038b0 <ready_thread>
	__asm__ volatile(
 800497a:	f384 8811 	msr	BASEPRI, r4
 800497e:	f3bf 8f6f 	isb	sy
}
 8004982:	bd10      	pop	{r4, pc}

08004984 <z_ready_thread>:
{
 8004984:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004986:	f04f 0310 	mov.w	r3, #16
 800498a:	f3ef 8411 	mrs	r4, BASEPRI
 800498e:	f383 8812 	msr	BASEPRI_MAX, r3
 8004992:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8004996:	f7fe ff8b 	bl	80038b0 <ready_thread>
	__asm__ volatile(
 800499a:	f384 8811 	msr	BASEPRI, r4
 800499e:	f3bf 8f6f 	isb	sy
}
 80049a2:	bd10      	pop	{r4, pc}

080049a4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80049a4:	4603      	mov	r3, r0
 80049a6:	b920      	cbnz	r0, 80049b2 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a8:	f3ef 8205 	mrs	r2, IPSR
 80049ac:	b90a      	cbnz	r2, 80049b2 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 80049ae:	f7fc bf8f 	b.w	80018d0 <arch_swap>
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
}
 80049ba:	4770      	bx	lr

080049bc <z_reschedule_unlocked>:
	__asm__ volatile(
 80049bc:	f04f 0310 	mov.w	r3, #16
 80049c0:	f3ef 8011 	mrs	r0, BASEPRI
 80049c4:	f383 8812 	msr	BASEPRI_MAX, r3
 80049c8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80049cc:	f7ff bfea 	b.w	80049a4 <z_reschedule_irqlock>

080049d0 <z_abort_timeout>:
{
 80049d0:	b510      	push	{r4, lr}
 80049d2:	f04f 0210 	mov.w	r2, #16
 80049d6:	f3ef 8411 	mrs	r4, BASEPRI
 80049da:	f382 8812 	msr	BASEPRI_MAX, r2
 80049de:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80049e2:	6803      	ldr	r3, [r0, #0]
 80049e4:	b13b      	cbz	r3, 80049f6 <z_abort_timeout+0x26>
			remove_timeout(to);
 80049e6:	f7ff fa01 	bl	8003dec <remove_timeout>
			ret = 0;
 80049ea:	2000      	movs	r0, #0
	__asm__ volatile(
 80049ec:	f384 8811 	msr	BASEPRI, r4
 80049f0:	f3bf 8f6f 	isb	sy
}
 80049f4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80049f6:	f06f 0015 	mvn.w	r0, #21
 80049fa:	e7f7      	b.n	80049ec <z_abort_timeout+0x1c>

080049fc <z_set_timeout_expiry>:
{
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	4604      	mov	r4, r0
 8004a00:	460d      	mov	r5, r1
	__asm__ volatile(
 8004a02:	f04f 0310 	mov.w	r3, #16
 8004a06:	f3ef 8611 	mrs	r6, BASEPRI
 8004a0a:	f383 8812 	msr	BASEPRI_MAX, r3
 8004a0e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8004a12:	f7ff f9c3 	bl	8003d9c <next_timeout>
			      || (ticks <= next_to);
 8004a16:	2801      	cmp	r0, #1
 8004a18:	dd07      	ble.n	8004a2a <z_set_timeout_expiry+0x2e>
 8004a1a:	42a0      	cmp	r0, r4
 8004a1c:	db05      	blt.n	8004a2a <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8004a1e:	42a0      	cmp	r0, r4
 8004a20:	4629      	mov	r1, r5
 8004a22:	bfa8      	it	ge
 8004a24:	4620      	movge	r0, r4
 8004a26:	f7fe f9f3 	bl	8002e10 <sys_clock_set_timeout>
	__asm__ volatile(
 8004a2a:	f386 8811 	msr	BASEPRI, r6
 8004a2e:	f3bf 8f6f 	isb	sy
}
 8004a32:	bd70      	pop	{r4, r5, r6, pc}

08004a34 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 8004a34:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 8004a36:	f7ff facd 	bl	8003fd4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8004a3a:	bd08      	pop	{r3, pc}

08004a3c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
 8004a3c:	f7ff baca 	b.w	8003fd4 <sys_clock_tick_get>
